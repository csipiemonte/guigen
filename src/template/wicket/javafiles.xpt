«IMPORT guigen»
«EXTENSION template::GenericExtensions»
«EXTENSION template::wicket::WicketExtensions»

«DEFINE javaFiles(boolean skip_component_dir_creation) FOR GUIModel»
	«EXPAND wicketApplicationJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND wicketBasePageJavaFile(skip_component_dir_creation) FOR this»
«ENDDEFINE»


«REM»Genera l'Application di Wicket«ENDREM»
«DEFINE wicketApplicationJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getWicketApplicationJavaFile(skip_component_dir_creation)»package «getPresentationJavaPackage()»;

import org.apache.wicket.Page;
import org.apache.wicket.protocol.http.WebApplication;

/**
 * Application object for your web application.
 *
 * @author GuiGen
 */
public class «getWicketApplicationClassName()» extends WebApplication
{    
    /**
     * Constructor
     */
	public «getWicketApplicationClassName()»()
	{
	}
	
	/**
	 * @see wicket.Application#getHomePage()
	 */
	public Class<? extends Page> getHomePage()
	{
		«LET this.structure.appWindow.appArea.contentPanels.first() AS startPage»
		return «getWicketPageFQN(startPage, this)».class;
		«ENDLET»
	}
	
	/**
	 * @see wicket.Application#init()
	 */
	@Override
	protected void init()
	{
		super.init();
    
    	«REM»
    	«PROTECT CSTART '/*' CEND '*/' ID ElementsUniqueID»
    		In questa sezione potrebbero essere collocati personalizzazioni 
    		del comportamento dell'applicazione Wicket.
    	«ENDPROTECT»
    	«ENDREM»
	}   	

}
«ENDFILE»
«ENDDEFINE»


«REM»
Genera una BasePage (parte Java) che contiene gli elementi comuni all'applicazione.
Tutte le altre Page dell'applicazione dovranno ereditare da questa
in modo da ottenere le parti comuni, e dovranno implementare in proprio
le funzionalità specifiche della pagina.
«ENDREM»
«DEFINE wicketBasePageJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getWicketBasePageJavaFile(this, skip_component_dir_creation)»package «getPresentationJavaPackage()»;

«IF this.structure.appWindow.header != null»
import «getWicketPanelFQN("header", this)»;
«ENDIF»
«IF this.structure.appWindow.appArea.menubar != null»
import «getWicketPanelFQN("menuBar", this)»;
«ENDIF»
«IF this.structure.appWindow.footer != null»
import «getWicketPanelFQN("footer", this)»;
«ENDIF»

import org.apache.wicket.IPageMap;
import org.apache.wicket.PageParameters;
import org.apache.wicket.markup.html.WebPage;
import org.apache.wicket.model.IModel;

/**
 * Pagina base che contiene le parti comuni dell'applicazione.
 * Tutte le pagine dovranno estendere questa per ereditare gli elemeti comuni.
 * 
 * @author GuiGen
 */
public abstract class «getWicketBasePageClassName()» extends WebPage {

	public «getWicketBasePageClassName()»() {
		super();
		init();
	}
	
	public «getWicketBasePageClassName()»(final IModel model) {
		super( model );
		init();
	}
	
	public «getWicketBasePageClassName()»(final IPageMap pageMap) {
		super( pageMap );
		init();
	}
	
	public «getWicketBasePageClassName()»(final PageParameters parameters) {
		super( parameters );
		init();
	}
	
	public «getWicketBasePageClassName()»(final IPageMap pageMap, final IModel model) {
		super( pageMap, model );
		init();
	}
	
	public «getWicketBasePageClassName()»(final IPageMap pageMap, final PageParameters parameters) {
		super( pageMap, parameters );
		init();
	}
	
	/**
	 * Inserire in questo metodo la definizione delle parti comuni
	 * dell'applicazione.
	 * Inserire inoltre eventuali comportamenti comuni a tutte le pagine dell'applicazione
	 * specifici per ogni singola applicazione
	 * @author GuiGen
	 */
	protected void init() {
		
		«REM»Genera la HEADER (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«IF this.structure.appWindow.header != null»
		«LET "header" AS headerName»
		// HEADER
		final «getWicketPanelClassName(headerName)» «headerName» = new «getWicketPanelClassName(headerName)»("«headerName»-panel");
		add(«headerName»);
		«EXPAND panelJavaFile(headerName, skip_component_dir_creation) FOR this»
		«ENDLET»
		«ENDIF»

		«REM»Genera i Link Statici«ENDREM»
		«IF this.structure.appWindow.appArea.staticLinks != null»
		// STATIC LINKS
			«REM»TODO: implementare quando si capirà cosa vuole dire«ENDREM»
		«ENDIF»

		«REM»Genera la TitleBar«ENDREM»
		«IF this.structure.appWindow.appArea.staticLinks != null»
		// TITLEBAR
			«REM»TODO: implementare quando si capirà cosa vuole dire«ENDREM»
		«ENDIF»

		«REM»Genera la StatusBar«ENDREM»
		«IF this.structure.appWindow.appArea.statusbar != null»
		// STATUSBAR
			«REM»TODO: implementare quando si capirà cosa vuole dire«ENDREM»
		«ENDIF»

		«REM»Genera la MENU BAR (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«IF this.structure.appWindow.appArea.menubar != null»
		«LET "menuBar" AS menuBarName»
		// MENUBAR
		final «getWicketPanelClassName(menuBarName)» «menuBarName» = new «getWicketPanelClassName(menuBarName)»("«menuBarName»-panel");
		add(«menuBarName»);
		«EXPAND panelJavaFile(menuBarName, skip_component_dir_creation) FOR this»
		«ENDLET»
		«ENDIF»

		«REM»Genera la FOOTER (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«IF this.structure.appWindow.footer != null»
		«LET "footer" AS footerName»
		// FOOTER
		final «getWicketPanelClassName(footerName)» «footerName» = new «getWicketPanelClassName(footerName)»("«footerName»-panel");
		add(«footerName»);
		«EXPAND panelJavaFile(footerName, skip_component_dir_creation) FOR this»
		«ENDLET»
		«ENDIF»

	}

}

«ENDFILE»
«ENDDEFINE»


«REM»Genera la componente Java di una pagina Wicket«ENDREM»
«DEFINE pageJavaFile(GUIModel model, boolean skip_component_dir_creation) FOR ContentPanel»
«FILE getWicketPageJavaFile(this, model, skip_component_dir_creation)»package «getPresentationJavaPackage(model)»;

import org.apache.wicket.PageParameters;
«REM»TODO: IMPORT -> come facciamo?«ENDREM»

/**
 *
 *
 * @author GuiGen
 */
public class «getWicketPageClassName(this)» extends BasePage {

	private static final long serialVersionUID = 1L;
	
	// TODO Add any page properties or variables here
	
	/**
	 * Empty Constructor.
	 @author GuiGen
	 */
	public «getWicketPageClassName(this)»() {
	
	}	
	
	/**
	 * Constructor that is invoked when page is invoked without a session.
	 * @author GuiGen
	 * @param parameters Page parameters
	 */
	public «getWicketPageClassName(this)»(final PageParameters parameters) {
	
	}

	«LET this.panels AS currP»
	@Override
	protected void init() {
		super.init();
		
		«REM»TODO: Parte dimostrativa -> rimuovere«ENDREM»
		// Add the simplest type of label
		add(new org.apache.wicket.markup.html.basic.Label("message", "Questa è la pagina «getWicketPageClassName(this)»"));

		«REM»Espande i pannelli«ENDREM»
		«IF currP != null»
		«EXPAND genPanelSetupJava FOR currP»
		«ENDIF»
	}
	
	«REM»Espande il Form panel (Wicket vuole una inner class)«ENDREM»
	«IF (currP != null && currP.metaType == FormPanel)»
		«EXPAND createFormPanelClass(model) FOR (FormPanel)currP»
	«ENDIF»

	«ENDLET»
}

«ENDFILE»
«ENDDEFINE»


«REM»Genera la componente Java di un Panel Wicket«ENDREM»
«DEFINE panelJavaFile(String panelName, boolean skip_component_dir_creation) FOR GUIModel»
«FILE getWicketPanelJavaFile(panelName, this, skip_component_dir_creation)»package «getWicketPanelJavaPackage(this)»;

import org.apache.wicket.markup.html.panel.Panel;
«REM»TODO: IMPORT -> come facciamo?«ENDREM»

/**
 *
 *
 * @author GuiGen
 */
public final class «getWicketPanelClassName(panelName)» extends Panel {

	private static final long serialVersionUID = 1L;

	public «getWicketPanelClassName(panelName)»(final String id) {
	    super(id);
	    
	    «REM»TODO: questo è da RIFARE SICURAMENTE MEGLIO (usando i riferimenti giusti) e non la stringa«ENDREM»
		«IF panelName.matches("header")»
			«EXPAND getHeaderJava(this) FOR this.structure.appWindow.header»
		«ELSEIF panelName.matches("menuBar")»
			«EXPAND getMenubarJava(this) FOR this.structure.appWindow.appArea.menubar»
		«ELSEIF panelName.matches("footer")»
			«EXPAND getFooterJava(this) FOR this.structure.appWindow.footer»
		«ENDIF»
	}
	
}
«ENDFILE»
«ENDDEFINE»


«REM»Genera la componente Java della HEADER«ENDREM»
«DEFINE getHeaderJava(GUIModel model) FOR Header»
	«REM»TODO: vedere se è necessaria e cosa si vuole mettere quii«ENDREM»
«ENDDEFINE»

«REM»Genera la componente Java) della MENUBAR«ENDREM»
«DEFINE getMenubarJava(GUIModel model) FOR Menubar»
	«FOREACH this.topLevelMenu AS tlmenu»
	add(new org.apache.wicket.markup.html.basic.Label("menu.«tlmenu.name»", "«tlmenu.label»"));
		«FOREACH tlmenu.item AS currMenuItem»
		«IF currMenuItem.eventHandler.eventType == EventTypes::CLICKED»
		«LET currMenuItem.eventHandler.command AS currAction»
		add(new org.apache.wicket.markup.html.link.BookmarkablePageLink("menu.items.«currMenuItem.name»", «getWicketPageFQN(((JumpCommand)currAction).jumpTo, model)».class));
		«ENDLET»
		«ENDIF»
		«ENDFOREACH»
	«ENDFOREACH»
«ENDDEFINE»

«REM»Genera la componente Java della FOOTER«ENDREM»
«DEFINE getFooterJava(GUIModel model) FOR Footer»
	«REM»TODO: vedere se è necessaria e cosa si vuole mettere qui.«ENDREM»
«ENDDEFINE»



«REM»Espande la componente Java dei pannelli.«ENDREM»
«DEFINE genPanelSetupJava FOR Panel»
	// [GUIGEN] Aggiungo il pannello «this»
	«IF this.metaType == FormPanel»
		«REM»Al momento per semplificazione è stata fatta l'assunzione che FormPanel = form Wicket/HTML,
		e che all'interno di un Form NON ci sono sottopannelli. Bisogna chiarire come si vuole rendere
		i sottopannelli, ovvero come si vogliono raggruppare i componenti (con COMUNICAZIONE).«ENDREM»
		«EXPAND setupFormPanelJava FOR (FormPanel)this»
	«ELSEIF this.metaType == TabSetPanel»
		«EXPAND setupTabSetPanelJava FOR (TabSetPanel)this»
		«EXPAND genPanelSetupJava FOREACH ((TabSetPanel)this).panels»
	«ELSEIF this.metaType == DialogPanel»
		«REM»TODO: Da definire cosa si intende per DialogPanel«ENDREM»
	«ENDIF»
«ENDDEFINE»


«REM»Crea la definizione Java di un FormPanel«ENDREM»
«DEFINE setupFormPanelJava FOR FormPanel»
add(new «name.toFirstUpper()»Form("form.«name.toFirstUpper()»Form"));
«ENDDEFINE»


«REM»Crea la definizione Javadi un TabSetPanel«ENDREM»
«DEFINE setupTabSetPanelJava FOR TabSetPanel»
	«REM»Può essere utilizzato il componente 
	org.apache.wicket.extensions.markup.html.tabs.TabbedPanel (wicket-extensions)
	Vedi: http://wicketstuff.org/wicket13/compref/?wicket:bookmarkablePage=:org.apache.wicket.examples.compref.TabbedPanelPage
	«ENDREM»
«ENDDEFINE»


«REM»
Genera la componente Java di un FORM, che in Wicket è una Inner class.
NOTA: per il momento per semplificare la generazione
      è stata fatta l'assunzione Form = form HTML/Wicket
«ENDREM»
«DEFINE createFormPanelClass(GUIModel model) FOR FormPanel»
/**
 * Inner class per il Form
 * 
 * @author GuiGen
 */
class «name.toFirstUpper()»Form extends org.apache.wicket.markup.html.form.Form {

		public «name.toFirstUpper()»Form(final String id) {
			super(id);
			
			«REM»Creo i componenti del form«ENDREM»
			«FOREACH findAllWidgetsInPanel(this) AS currWidg»
				«EXPAND createAndAddWidgetJava(model) FOR (Widget)currWidg»
			«ENDFOREACH»
			
			// Aggiungo FeedbackPanel per la visualizzazione dei messaggi (soluzione TMP del submit)
			org.apache.wicket.markup.html.panel.FeedbackPanel feedbackPanel = new org.apache.wicket.markup.html.panel.FeedbackPanel("feedback");
	        add(feedbackPanel);
		}


		/**
		 * Inserire nel metodo la Business logic da invocare al submit del form.
		 * @author GuiGen
		 */
		@Override
		public void onSubmit() {
	    	«REM»
	    	«PROTECT CSTART '/*' CEND '*/' ID ElementsUniqueID»
	    		//Business logic da invocare al submit del form
	    	«ENDPROTECT»
	    	«ENDREM»
	    	
	    	«REM»Soluzione temporanea (visualizzo un messaggio)«ENDREM»
    		info("Il form «name.toFirstUpper()»Form è stato sottomesso.");
		}
		

		/**
		 * Inserire nel metodo la gestione personalizzata degli errori di validazione
		 * @author guigen
		 */
		@Override
		public void onError() {
	    	«REM»
	    	«PROTECT CSTART '/*' CEND '*/' ID ElementsUniqueID»
	    		//Gestione personalizzata degli errori di validazione
	    	«ENDPROTECT»
	    	«ENDREM»			
		}		

} // END «name.toFirstUpper()»Form INNER CLASS
«ENDDEFINE»


«REM»Crea un widget generico (non dovrebbe mai essere chiamato)«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR Widget»
// [GUIGEN] widget non gestito: «this»
«ENDDEFINE»


«REM»Crea un TextField«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR TextField»
// [GUIGEN] Crea il widget «this»
org.apache.wicket.markup.html.form.TextField widg_«this.name» = new org.apache.wicket.markup.html.form.TextField(
	"widg.«this.name»", new org.apache.wicket.model.Model(""));
add(widg_«this.name»);
«ENDDEFINE»


«REM»Crea una TextArea«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR TextArea»
// [GUIGEN] Crea il widget «this»
org.apache.wicket.markup.html.form.TextArea widg_«this.name» = new org.apache.wicket.markup.html.form.TextArea(
	"widg.«this.name»", new org.apache.wicket.model.Model(""));
add(widg_«this.name»);
«ENDDEFINE»


«REM»Crea dei radio button. TODO: implementare«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR RadioButtons»
// [GUIGEN] Crea il widget «this»

«ENDDEFINE»


«REM»Crea una CheckBox.«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR CheckBox»
// [GUIGEN] Crea il widget «this»
org.apache.wicket.markup.html.form.CheckBox widg_«this.name» = new org.apache.wicket.markup.html.form.CheckBox(
	"widg.«this.name»", new org.apache.wicket.model.Model(""));
add(widg_«this.name»);
«ENDDEFINE»


«REM»Crea una ComboBox. 
NOTA: ComboBox è stata per il momento interpretata come "lista a scelta singola" 
      e mappata con il widget WicketDropDownChoice«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR ComboBox»
// [GUIGEN] Crea il widget «this»

«REM»DATI TEMPORANEI - INIZIO«ENDREM»
java.util.Random generator_«name» = new java.util.Random();
int num_«name» = generator_«name».nextInt(10) + 1;
String[] tmp_data_«name» = new String[num_«name»];
for (int i = 0; i < num_«name»; i++) {
	tmp_data_«name»[i] = "«name» : Elemento " + i;
}
java.util.List elementiCombo«name.toFirstUpper()» = java.util.Arrays.asList(tmp_data_«name»);
«REM»DATI TEMPORANEI - FINE«ENDREM»

org.apache.wicket.markup.html.form.DropDownChoice widg_«this.name» = new org.apache.wicket.markup.html.form.DropDownChoice(
	"widg.«this.name»", new org.apache.wicket.model.Model(""), elementiCombo«name.toFirstUpper()»);
add(widg_«this.name»);
«ENDDEFINE»


«REM»Crea un pulsante (Button).«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR Button»
// [GUIGEN] Crea il widget «this»
org.apache.wicket.markup.html.form.Button widg_«this.name» = new org.apache.wicket.markup.html.form.Button(
	"widg.«this.name»", new org.apache.wicket.model.Model("")) {
	«LET this.eventHandlers.first().command AS currAction»
		@Override
		public void onSubmit() {
			«REM»Estrarre il codice delle azioni e generalizzare«ENDREM»
			«IF currAction.metaType == JumpCommand»
			System.out.println("Button widg_«this.name» ha been pressed!");
			setResponsePage(«getWicketPageFQN(((JumpCommand)currAction).jumpTo, model)».class);
			«ELSEIF currAction.metaType == JumpBackCommand»
			// DO NOTHING
			«ENDIF»
		}
	«ENDLET»
};
add(widg_«this.name»);
«ENDDEFINE»


«REM»Crea un pulsante (Button). TODO: implementare«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR ConfirmButton»
// [GUIGEN] Crea il widget «this»
org.apache.wicket.markup.html.form.Button widg_«this.name» = new org.apache.wicket.markup.html.form.Button(
"widg.«this.name»", new org.apache.wicket.model.Model("")) {
«REM»TODO: estrarre la logica delle azioni da qui e generalizzare«ENDREM»
«LET this.eventHandlers.first().command AS currAction»
	@Override
	public void onSubmit() {
		String esito = null;
		«IF currAction.metaType == JumpCommand»
		«REM»GENERAZIONE: se Push Current Page vale true, inserire in uno stack (sessione?) la pagina di provenienza«ENDREM»
		setResponsePage(«getWicketPageFQN(((JumpCommand)currAction).jumpTo, model)».class);
		«ELSEIF currAction.metaType == JumpBackCommand»
		«REM»GENERAZIONE: recuperare dallo stack (sessione?) la pagina di provenienza«ENDREM»
		«ELSEIF currAction.metaType == ExecCommand»
		
		«REM»
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID()»
		«ENDPROTECT»
		«ENDREM»
		
		«FOREACH ((ExecCommand)currAction).results AS currRes»
		if ( "«currRes.resultCode»".equals(esito) ) {
			
		}
		«ENDFOREACH»
		
	// espandere 
}
		
		«REM»E' una regione protetta nella quale verrà inserito manualmente il codice«ENDREM»
		«ELSEIF currAction.metaType == SequenceCommand»
		«REM»E' una sequenza di azioni di qualunque tipo«ENDREM»
		«ELSEIF currAction.metaType == ONOFFCommand»
		«REM»CICLARE SU«((ONOFFAction)currAction).targetWidgets»«ENDREM»
		«REM»Rende i widget indicati abilitati o disabilitati (metodo setEnabled(true/false))«ENDREM»
		«ELSEIF currAction.metaType == VisibilityCommand»
		«REM»CICLARE SU«((VisibilityAction)currAction).targetWidgets»«ENDREM»
		«REM»Rende i widget indicati visibili o invisibili (metodo setVisible(true/false) chiamato sui widgets)
		NOTA: rendere final tutte le definizioni dei widgets«ENDREM»
		«ENDIF»
	}
«ENDLET»
};
add(widg_«this.name»);
«ENDDEFINE»


«REM»Crea un pulsante di reset del form.
NOTA: implementato per il momento SOLO in HTML«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR ResetButton»
// [GUIGEN] Crea il widget «this»

«ENDDEFINE»


«REM»Crea una immagine. TODO: implementare«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR Image»
// [GUIGEN] Crea il widget «this»

«ENDDEFINE»


«REM»Crea una tabella. TODO: implementare«ENDREM»
«DEFINE createAndAddWidgetJava(GUIModel model) FOR Table»
// [GUIGEN] Crea il widget «this»

«ENDDEFINE»




«REM»GESTIONE DELLE AZIONI«ENDREM»
«DEFINE creaAzione FOR Command»

«ENDDEFINE»

