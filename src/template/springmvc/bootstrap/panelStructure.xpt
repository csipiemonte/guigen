«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT guigen»


«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»
«EXTENSION template::struts2::bootstrap::Struts2ExtensionsNeutral»

«REM»
==========================================================================================================================
Gestione dei PANNELLI
==========================================================================================================================
«ENDREM»


«REM»Per il momento si parte dall'assunzione che a primo livello ci siano solo Form Pnels«ENDREM»
«DEFINE setupFirstLevelFormPanel(GUIModel model, boolean skip_component_dir_creation, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR FormPanel»
<div id="contentPanel" class="container">
	«IF this.layout.metaType == VerticalFlowPanelLayout-»
		«EXPAND setupVFL(model, skip_component_dir_creation, cp, contextPrefix, pduConf, isPortlet) FOR this»
	«ELSEIF this.layout.metaType == UDLRCPanelLayout-»
		«EXPAND setupUDLRCL(model, skip_component_dir_creation, cp, contextPrefix, pduConf, isPortlet) FOR this»
	«ELSE-»
		«ERROR "Layout " + this.layout.metaType + " non gestito al primo livello per portale " + getPortalName()»
	«ENDIF-»
</div>
«ENDDEFINE»


«REM»Genera la struttura di markup (HTML) per il Vertical Flow Layout«ENDREM»
«DEFINE setupVFL(GUIModel model, boolean skip_component_dir_creation, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR FormPanel»
<!-- ####################### PANNELLO CONTENUTI ###################### -->
	<div id="centerWrapper" class="floatWrapper">
		<div id="centerPanel">
		«REM»stdmdd-1068: creo un'ancora che viene richiamata dal link "Vai al contenuto principale" presente nel portal_header.html«ENDREM»
		<a id="main_content" name="main_content"></a>
			<div class="wrapper">

				«IF !isNullOrEmpty(this.label) -»
				<!-- titolo pannello PRIMO livello -->
				<h3><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></h3>
				«ENDIF-»

				«REM»ATTENZIONE: qui devo espandere i sottopannelli del pannello di primo livello«ENDREM»
				«FOREACH this.subpanels AS subpanel»
					«EXPAND template::struts2::view::resourcefiles::createAndAddSubpanel(model, skip_component_dir_creation, cp, true, UDLRCSpecConstants::CENTER, contextPrefix, pduConf, isPortlet) FOR subpanel»
				«ENDFOREACH»

			</div>
		</div>
	</div>
<!-- #################### FINE PANNELLO CONTENUTI #################### -->
«ENDDEFINE»


«REM»Genera la struttura di markup (HTML) per l'UDLRC (Up-Down-Left-Right-Center) Layout«ENDREM»
«DEFINE setupUDLRCL(GUIModel model, boolean skip_component_dir_creation, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR FormPanel»
<!-- ####################### PANNELLO CONTENUTI ###################### -->

	«LET getSubPanelByLayout(this, UDLRCSpecConstants::UP) AS upPanel-»
	«IF upPanel != null -»
	<!-- ================ UDLRC Layout UP PANEL ================ -->
	<div id="northPanel">
		<div class="wrapper">
		«EXPAND template::struts2::view::resourcefiles::createAndAddSubpanel(model, skip_component_dir_creation, cp, false, UDLRCSpecConstants::UP, contextPrefix, pduConf, isPortlet) FOR upPanel»
		</div>
	</div>
	<!-- ================ FINE UDLRC Layout UP PANEL ================ -->
	«ENDIF-»
	«ENDLET-»


	«LET getSubPanelByLayout(this, UDLRCSpecConstants::LEFT) AS leftPanel-»
	«LET getSubPanelByLayout(this, UDLRCSpecConstants::RIGHT) AS rightPanel-»
	<!-- ================ UDLRC Layout WEST-CENTER-EAST WRAPPER ================ -->
	<div id="«getWestCenterEastWrapperId(leftPanel, rightPanel).toFirstLower()»Wrapper" class="floatWrapper">
		«IF leftPanel != null -»
		<!-- ***** UDLRC Layout LEFT PANEL ***** -->
		<div id="westPanel">
			<div class="wrapper">
			«EXPAND template::struts2::view::resourcefiles::createAndAddSubpanel(model, skip_component_dir_creation, cp, false, UDLRCSpecConstants::LEFT, contextPrefix, pduConf, isPortlet) FOR leftPanel»
			</div>
		</div>
		<!-- ***** FINE UDLRC Layout LEFT PANEL ***** -->
		«ENDIF-»


		<!-- ***** UDLRC Layout CENTER PANEL ***** -->
		<div id="centerPanel">
			«REM»stdmdd-1068: creo un'ancora che viene richiamata dal link "Vai al contenuto principale" presente nel portal_header.html«ENDREM»
			<a id="main_content" name="main_content"></a>
			<div class="wrapper">
				«IF !isNullOrEmpty(this.label) -»
				<!-- titolo pannello PRIMO livello -->
				<h3><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></h3>
				«ENDIF-»

				«LET getSubPanelByLayout(this, UDLRCSpecConstants::CENTER) AS centerPanel-»
					«EXPAND template::struts2::view::resourcefiles::createAndAddSubpanel(model, skip_component_dir_creation, cp, false, UDLRCSpecConstants::CENTER, contextPrefix, pduConf, isPortlet) FOR centerPanel»
				«ENDLET-»
			</div>
		</div>
		<!-- ***** FINE UDLRC Layout CENTER PANEL ***** -->


		«IF rightPanel != null -»
		<!-- ***** UDLRC Layout RIGHT PANEL ***** -->
		<div id="eastPanel">
			<div class="wrapper">
			«EXPAND template::struts2::view::resourcefiles::createAndAddSubpanel(model, skip_component_dir_creation, cp, false, UDLRCSpecConstants::RIGHT, contextPrefix, pduConf, isPortlet) FOR rightPanel»
			</div>
		</div>
		<!-- ***** FINE UDLRC Layout RIGHT PANEL ***** -->
		«ENDIF-»

	</div>
	<!-- ================ FINE UDLRC Layout WEST-CENTER-EAST WRAPPER ================ -->
	«ENDLET-»
	«ENDLET-»


	«LET getSubPanelByLayout(this, UDLRCSpecConstants::DOWN) AS downPanel-»
	«IF downPanel != null -»
	<!-- ================ UDLRC Layout DOWN PANEL ================ -->
	<div id="southPanel">
		<div class="wrapper">
		«EXPAND template::struts2::view::resourcefiles::createAndAddSubpanel(model, skip_component_dir_creation, cp, false, UDLRCSpecConstants::DOWN, contextPrefix, pduConf, isPortlet) FOR downPanel»
		</div>
	</div>
	<!-- ================ FINE UDLRC Layout DOWN PANEL ================ -->
	«ENDIF-»
	«ENDLET-»

</div>
<!-- #################### FINE PANNELLO CONTENUTI #################### -->
«ENDDEFINE»

«REM»

WidgetsPanel (-> AOP*)

«ENDREM»
«DEFINE createWidgets(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR WidgetsPanel»
«REM»«FOREACH (List[Widget])getWidgetsByOrder(this) AS currWidg ITERATOR wi-»
	«EXPAND createAndAddWidgetMarkup(model, cp, this, wi.firstIteration, wi.lastIteration, contextPrefix, pduConf, isPortlet) FOR currWidg»
«ENDFOREACH-»«ENDREM»
«IF layout.metaType == VerticalFlowPanelLayout-»
«EXPAND createWidgetsVertical(model, cp, contextPrefix, pduConf, isPortlet) FOR this»
«ELSEIF layout.metaType == HorizontalFlowPanelLayout-»
«EXPAND createWidgetsHorizontal(model, cp, contextPrefix, pduConf, isPortlet) FOR this»
«ELSEIF layout.metaType == GridPanelLayout-»
«EXPAND createWidgetsGrid(model, cp, contextPrefix, pduConf, isPortlet) FOR this»
«ENDIF-»
«ENDDEFINE»

«DEFINE createWidgetsVertical(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR WidgetsPanel»
«FOREACH (List[Widget])getWidgetsByOrder(this) AS currWidg ITERATOR wi-»
	<div class="form-group">
	«EXPAND template::struts2::bootstrap::widgetStructure::createAndAddWidgetMarkup(model, cp, this, wi.firstIteration, wi.lastIteration, contextPrefix, pduConf, isPortlet) FOR currWidg»
	</div>
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE createWidgetsHorizontal(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR WidgetsPanel»
<div class="form-group">
«FOREACH (List[Widget])getWidgetsByOrder(this) AS currWidg ITERATOR wi-»
	«EXPAND template::struts2::bootstrap::widgetStructure::createAndAddWidgetMarkup(model, cp, this, wi.firstIteration, wi.lastIteration, contextPrefix, pduConf, isPortlet) FOR currWidg»
«ENDFOREACH-»
</div>
«ENDDEFINE»

«DEFINE createWidgetsGrid(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR WidgetsPanel»
«LET getWidgetRows(this) AS allRows-»
«FOREACH allRows AS currRow ITERATOR currRowIndex-»
    <!-- row # «currRowIndex.counter1» -->
	<div class="form-group">
«FOREACH ((List[Widget])currRow) AS currWidg ITERATOR wi-»
	«EXPAND template::struts2::bootstrap::widgetStructure::createAndAddWidgetMarkup(model, cp, this, wi.firstIteration, wi.lastIteration, contextPrefix, pduConf, isPortlet) FOR currWidg»
«ENDFOREACH-»
	</div>
«ENDFOREACH-»
«ENDLET-»
«ENDDEFINE»

«REM»
************** Multi Panel e tipi derivati (TabsetPanel, WizardPanel) **************
«ENDREM»

«REM»TabsetPanel«ENDREM»
«DEFINE setupTabSetPanel(GUIModel model, ContentPanel cp, String contextPrefix) FOR TabSetPanel»
«IF !isNullOrEmpty(this.label)-»
<h4 class="tspLabel"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></h4>
«ENDIF-»
<div class="tabSetPanel" id="«getFullID(this, contextPrefix)»">
	<ul class="nav nav-tabs">
	«LET this.switcher != null ? (this.switcher.eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED)) : null AS switchHnd-»
	«FOREACH this.panels AS currTab ITERATOR i-»
		«LET i.firstIteration ? " || #session."+getSelectedMultiPanelName(this, cp, contextPrefix)+"_selectedMultiPanel == null" : "" AS stepExtraCondition -»
		<s:url id="«getMultiPanelName(this, currTab, cp, contextPrefix)»_URL" action="«getStrutsActionConfigName(cp)»" namespace="«getContentPanelNamespace(cp, false)»" method="handleChangeTab" includeParams="get">
			<s:param name="selectedTabKey" value="%{'«getSelectedMultiPanelName(this, cp, contextPrefix)»_selectedMultiPanel'}" />
			<s:param name="selectedTabValue" value="%{'«getMultiPanelName(this, currTab, cp, contextPrefix)»'}" />
		</s:url>
		<s:if test="%{#session.«getSelectedMultiPanelName(this, cp, contextPrefix)»_selectedMultiPanel == '«getMultiPanelName(this, currTab, cp, contextPrefix)»'«stepExtraCondition»}">
			<li role="presentation" class="item-«i.counter1» active"><a href="#"><span class="activeItem"><s:text name="«cp.name».«getFullID(currTab, contextPrefix)».label" /></span></a></li>
		</s:if>
		«IF switchHnd != null-»
		<s:else>
			<li role="presentation" class="item-«i.counter1»">
				«IF model.targetPlatform.enableRichUIBehavior-»
					«EXPAND template::struts2::view::richFeatures::ajaxifyControlHeader(model, cp, this, currTab, contextPrefix) FOR this.switcher-»
				«ENDIF-»
				<s:submit name="«getFullID(switcher, contextPrefix)»"
				          id="«getTabSwitcherSubmitID(switcher, currTab, contextPrefix)»"
				          method="«getTabItemHandlerMethodName(cp,this,currTab, contextPrefix)»"
				          key="«cp.name».«getFullID(currTab, contextPrefix)».label" />
				«IF model.targetPlatform.enableRichUIBehavior-»
					«EXPAND template::struts2::view::richFeatures::ajaxifyControlFooter FOR this.switcher-»
				«ENDIF-»
			</li>
		</s:else>
		«ELSE-»
		<s:else>
			<li role="presentation" class="item-«i.counter1»"><s:a href="%{«getMultiPanelName(this, currTab, cp, contextPrefix)»_URL}"><s:text name="«cp.name».«getFullID(currTab, contextPrefix)».label" /></s:a></li>
		</s:else>
		«ENDIF-»
		«ENDLET-»
	«ENDFOREACH-»
	«ENDLET-»
	</ul>
</div>
«ENDDEFINE»

«REM»WizardPanel«ENDREM»
«DEFINE setupWizardPanel(GUIModel model, ContentPanel cp, String contextPrefix) FOR WizardPanel»
«IF !isNullOrEmpty(this.label)-»
<h4 class="wzpLabel"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></h4>
«ENDIF-»
«LET this.switcher != null ? (this.switcher.eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED).first()) : null AS switchHnd-»
<div class="wizardPanel" id="«getFullID(this, contextPrefix)»">
	<ul class="nav nav-pills">
	«FOREACH this.panels AS currStep ITERATOR i-»
		«LET i.firstIteration ? " || #session."+getSelectedMultiPanelName(this, cp, contextPrefix)+"_selectedMultiPanel == null" : "" AS stepExtraCondition -»
		<s:url id="«getMultiPanelName(this, currStep, cp, contextPrefix)»_URL" action="«getStrutsActionConfigName(cp)»" namespace="«getContentPanelNamespace(cp, false)»" method="handleChangeTab" includeParams="get">
			<s:param name="selectedTabKey" value="%{'«getSelectedMultiPanelName(this, cp, contextPrefix)»_selectedMultiPanel'}" />
			<s:param name="selectedTabValue" value="%{'«getMultiPanelName(this, currStep, cp, contextPrefix)»'}" />
		</s:url>
		«LET getWizardPanelStepCompleteIndex(this, decodeWizardNumbering(this, i.counter1.toString())) AS decodedStepNumber-»
		<s:if test="%{#session.«getSelectedMultiPanelName(this, cp, contextPrefix)»_selectedMultiPanel == '«getMultiPanelName(this, currStep, cp, contextPrefix)»'«stepExtraCondition»}">
			«EXPAND setupActiveWizardNavigatorCurrentItem(model, this, stepExtraCondition, i.counter1.toString(), decodedStepNumber, cp, contextPrefix) FOR currStep-»
		</s:if>
		<s:else>
			«IF this.navigatorActive-»
				«EXPAND setupActiveWizardNavigatorNotCurrentItem(model, this, i.counter1.toString(), decodedStepNumber, switcher, switchHnd, cp, contextPrefix) FOR currStep-»
			«ELSE-»
				«EXPAND setupPassiveWizardNavigatorNotCurrentItem(model, this, i.counter1.toString(), decodedStepNumber, cp, contextPrefix) FOR currStep-»
			«ENDIF-»
		</s:else>
		«ENDLET-»
		«ENDLET-»
	«ENDFOREACH-»
	</ul>
</div>
«ENDLET-»
«ENDDEFINE»

«DEFINE setupActiveWizardNavigatorCurrentItem(GUIModel model, WizardPanel wizard, String stepExtraCondition, String stepNumber, String decodedStepNumber, ContentPanel cp, String contextPrefix) FOR Panel-»
	«LET this AS currStep-»
	<li role="presentation" class="item-«stepNumber» active"><a href="#"><span class="activeItem">«decodedStepNumber»<s:text name="«cp.name».«getFullID(currStep, contextPrefix)».label" /></span></a></li>
	«ENDLET-»
«ENDDEFINE»

«DEFINE setupActiveWizardNavigatorNotCurrentItem(GUIModel model, WizardPanel wizard, String stepNumber, String decodedStepNumber, TabSwitcher switcher, EventHandler switchEvent, ContentPanel cp, String contextPrefix) FOR Panel»
	<li role="presentation" class="item-«stepNumber»">
	«LET this AS currStep-»
	«IF switchEvent != null-»
		«IF model.targetPlatform.enableRichUIBehavior-»
        	«EXPAND template::struts2::view::richFeatures::ajaxifyControlHeader(model, cp, (WizardPanel)eContainer, this, contextPrefix) FOR switcher-»
        «ENDIF-»
    	<s:submit name="«getFullID(switcher, contextPrefix)»"
		          id="«getTabSwitcherSubmitID(switcher, currStep, contextPrefix)»"
		          method="«getTabItemHandlerMethodName(cp,(WizardPanel)this.eContainer,this, contextPrefix)»"
		          key="«cp.name».«getFullID(this, contextPrefix)».label" />
        «IF model.targetPlatform.enableRichUIBehavior-»
        	«EXPAND template::struts2::view::richFeatures::ajaxifyControlFooter FOR switcher-»
        «ENDIF-»
	«ELSE-»
		<s:a href="%{«getMultiPanelName(wizard, currStep, cp, contextPrefix)»_URL}">«decodedStepNumber»<s:text name="«cp.name».«getFullID(currStep, contextPrefix)».label" /></s:a>
	«ENDIF-»
	«ENDLET-»
	</li>
«ENDDEFINE»

«DEFINE setupPassiveWizardNavigatorNotCurrentItem(GUIModel model, WizardPanel wizard, String stepNumber, String decodedStepNumber, ContentPanel cp, String contextPrefix) FOR Panel»
	«LET this AS currStep-»
	<li role="presentation" class="item-«stepNumber»"><a href="#"><span class="wizardItem">«decodedStepNumber»<s:text name="«cp.name».«getFullID(currStep, contextPrefix)».label" /></span></a></li>
	«ENDLET-»
«ENDDEFINE»


«REM»
************** StdMessagePanel (Pannello per errori) **************
«ENDREM»

«DEFINE setupStdMessagePanel(GUIModel model, ContentPanel cp, String contextPrefix) FOR StdMessagePanel»
<div class="stdMessagePanel" id="«getFullID(this, contextPrefix)»">
	<customtag:stdMessagePanel id="«getFullID(this, contextPrefix)»" errorMessage="«showFieldErrors»" errorDetails="«showFieldErrorDetails»" actionMessage="«showGlobalMessages»" successCssClass="alert alert-info" errorCssClass="alert alert-danger" «IF !isRemote()»isStandalone="true" «ENDIF»/>
</div>
«ENDDEFINE»


«REM»
************** UserInfoPanel (pannello con le informazioni sull'utente loggato) **************
«ENDREM»

«REM»[DM] STDMDD-904 e STDMDD-905: conferma logout e modellazione scelta local/sso logout mode


<div class="panel panel-user row-fluid">
  <div class="span10">
    <dl class="dl-horizontal">
     <dt class=""><i class="icon-user"></i>&nbsp;Utente</dt>
      <dd>Nome Cognome</dd>
     <dt class="ente">&nbsp;Ente</dt>
       <dd>Regione</dd>
    </dl>
  </div>
  <div class="span2"> <a href="#" class="btn btn-default">esci&nbsp;<i class="icon-signout"></i></a> </div>
</div>

«ENDREM»
«DEFINE setupUserInfoPanel(GUIModel model, ContentPanel cp, String contextPrefix) FOR UserInfoPanel»
«LET ((List[ApplicationData])getAllApplicationData(model)).select(ad|ad.name=="currentUser").first() AS currentUserAD-»
<div class="panel panel-user row-fluid" id="«getFullID(this, contextPrefix)»">
	<div class="span10">
	<dl class="dl-horizontal">
		<dt class=""><i class="glyphicon glyphicon-user"></i>&nbsp;Utente: </dt>
		<dd><s:property value="«getAppDataKey(currentUserAD)».nome" /> <s:property value="«getAppDataKey(currentUserAD)».cognome" /></dd>
		<dt>&nbsp;Ente: </dt><dd><s:property value="«getAppDataKey(currentUserAD)».ente" /></dd>
		<dt>Ruolo: </dt><dd><s:property value="«getAppDataKey(currentUserAD)».ruolo" /></dd>
	</dl>
	</div>
	<div class="span2">
		<!-- uscita dal servizio e/o cambio ruolo -->
		<s:url id="logoutUrl" action="«getLogoutActionName()»" namespace="«getLogoutActionNamespace(false)»" method="«getUserInfoPanelLogoutMethod(model)»" />
		<s:a href="%{logoutUrl}" title="chiudi: questo link fa uscire dal servizio" cssClass="btn btn-default">esci&nbsp;<i class="glyphicon glyphicon-log-out"></i></s:a>
	</div>
</div>
«ENDLET-»
«ENDDEFINE»


«REM»
************** Breadcrumb (filo d'arianna) **************
«ENDREM»

«DEFINE setupBreadcrumb(GUIModel model, ContentPanel cp, String contextPrefix) FOR Breadcrumb»
«LET ((List[ApplicationData])getAllApplicationData(model)).select(ad|ad.name=="crumbs").first() AS crumbsAD-»
<div id="breadCrumbPanel" class="breadCrumbPanel">
    <!-- elementi statici -->
    <span class="element"><a href="«getHomePageActionURLWithContextPath()»">«model.structure.appWindow.header.nomeApplicativo»</a></span>
    <!-- elementi dinamici (legati alla logica di navigazione)  -->
<s:iterator value="appDatacrumbs" status="breadcrumbStatus">
	<s:if test="!#breadcrumbStatus.last">
	<span class="separator"> &raquo; </span>
    <span class="element"><s:property/></span>
    </s:if>
    <s:else>
    <span class="separator"> &raquo; </span>
    <span id="currentElement" class="active"><s:property/></span>
    </s:else>
</s:iterator>
</div>
«ENDLET-»
«ENDDEFINE»



«REM»
==========================================================================================================================
Gestione dei LAYOUT - PANNELLI
==========================================================================================================================
«ENDREM»

«REM»Genera la header di un sottopannello di tipo FormPanel (solo se non è un FormPanel "contenitore")«ENDREM»
«DEFINE subPanelControlHeader(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR FormPanel»
«IF (this.subpanels.select(e|e.metaType == MultiPanel).size == 0 && this.subpanels.select(e|e.metaType == TabSetPanel).size == 0 && this.subpanels.select(e|e.metaType == WizardPanel).size == 0) && !((this.eContainer.metaType == TabSetPanel || this.eContainer.metaType == WizardPanel) && !(this.subpanels.select(e|e.metaType == FormPanel).size == 0)) -»
<div class="panel panel-default">
«IF !isNullOrEmpty(this.label) && !(this.eContainer.metaType == TabSetPanel || this.eContainer.metaType == WizardPanel) -»
<div class="panel-heading">
<h4 class="panel-title"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" />«getToggleHandleHtml(this,contextPrefix)»</h4>
</div>
«ENDIF-»
<div class="panel-body" id="«getFullID(this, contextPrefix)»">
«ENDIF-»
«ENDDEFINE»

«REM»Genera la header di un sottopannello di tipo CommandPanel«ENDREM»
«DEFINE subPanelControlHeader(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR CommandPanel»
«LET (this.cmdStyle == CommandStyles::NAVIGATION ? " navigation" : (this.cmdStyle == CommandStyles::FUNCTIONAL ? " functional" : "" ) ) AS ptype-»
<div class="col-md-12" id="«getFullID(this, contextPrefix)»">
«ENDLET-»
«ENDDEFINE»

«REM»Genera la header di un sottopannello di tipo MenuPanel«ENDREM»
«DEFINE subPanelControlHeader(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR MenuPanel»
<div class="menuPanel«getMenuPanelOrientation(this)»" id="«getFullID(this, contextPrefix)»">
«ENDDEFINE»


«REM»Genera la footer di un sottopannello di tipo FormPanel (solo se non è un FormPanel "contenitore")«ENDREM»
«DEFINE subPanelControlFooter(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR FormPanel»
«IF (this.subpanels.select(e|e.metaType == MultiPanel).size == 0 && this.subpanels.select(e|e.metaType == TabSetPanel).size == 0 && this.subpanels.select(e|e.metaType == WizardPanel).size == 0) && !((this.eContainer.metaType == TabSetPanel || this.eContainer.metaType == WizardPanel) && !(this.subpanels.select(e|e.metaType == FormPanel).size == 0)) -»
</div>
</div>
«ENDIF-»
«ENDDEFINE»

«REM»Genera la footer di un sottopannello di tipo CommandPanel«ENDREM»
«DEFINE subPanelControlFooter(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR CommandPanel»
</div>
«ENDDEFINE»

«REM»Genera la footer di un sottopannello di tipo MenuPanel«ENDREM»
«DEFINE subPanelControlFooter(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR MenuPanel»
</div>
«ENDDEFINE»


«REM»
************** WidgetsPanel **************
«ENDREM»

«REM»Genera la header di un sottopannello di tipo WidgetsPanel«ENDREM»
«DEFINE subPanelControlHeader(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR WidgetsPanel»
«IF !this.widgets.isEmpty -»
<div id="«getFullID(this, contextPrefix)»">
«IF !isNullOrEmpty(this.label)»
	<h4><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /> «getToggleHandleHtml(this,contextPrefix)»</h4>«ENDIF»

	<div>
«ENDIF-»
«ENDDEFINE»

«REM»Genera la footer di un sottopannello di tipo WidgetsPanel«ENDREM»
«DEFINE subPanelControlFooter(UDLRCSpecConstants quadrante, ContentPanel cp, String contextPrefix) FOR WidgetsPanel»
«IF !this.widgets.isEmpty -»
	</div>
</div>
«ENDIF-»
«ENDDEFINE»


«REM»
************** User Defined Panel **************
«ENDREM»

«REM»Genera la header di un pannello di tipo UserDefinedPanel«ENDREM»
«DEFINE userDefinedPanelControlHeader(GUIModel model, ContentPanel cp, String contextPrefix) FOR UserDefinedPanel-»
<div class="userDefinedPanel" id="«getFullID(this, contextPrefix)»">
«ENDDEFINE»

«REM»Genera la footer di un pannello di tipo UserDefinedPanel«ENDREM»
«DEFINE userDefinedPanelControlFooter(GUIModel model, ContentPanel cp, String contextPrefix) FOR UserDefinedPanel-»
</div>
«ENDDEFINE»


«REM»
************** Dialog Panel **************
«ENDREM»

«REM»Genera la header di un pannello di tipo DialogPanel«ENDREM»
«DEFINE dialogPanelControlHeader(GUIModel model, ContentPanel cp) FOR DialogPanel-»
«IF model.structure.appWindow.header != null-»
<s:include value="../fragments/header.jsp" ></s:include>
«ENDIF-»

<s:form id="«this.name»Form" action="«getStrutsActionConfigName(findParentContentPanel(this))»" namespace="«getContentPanelNamespace(cp, false)»" method="post">

	<!-- ####################### PANNELLO CONTENUTI ###################### -->
	<div id="contentPanel" class="container">
		<div id="centerWrapper" class="floatWrapper">
			<div id="centerPanel">
			«REM»stdmdd-1068: creo un'ancora che viene richiamata dal link "Vai al contenuto principale" presente nel portal_header.html«ENDREM»
			<a id="main_content" name="main_content"></a>
«IF !isNullOrEmpty(this.label) -»
				<h3><s:text name="«cp.name».«getFullID(this, null)».label" /></h3>
«ENDIF-»
				<div class="dialogPanel" id="«this.name»">
«ENDDEFINE»

«REM»Genera la footer di un pannello di tipo DialogPanel«ENDREM»
«DEFINE dialogPanelControlFooter(GUIModel model, ContentPanel cp) FOR DialogPanel-»
				</div>

			</div>
		</div>
	</div>
	<!-- #################### FINE PANNELLO CONTENUTI #################### -->

</s:form>

«IF model.structure.appWindow.footer != null-»
<s:include value="../fragments/footer.jsp" ></s:include>
«ENDIF-»
«ENDDEFINE»


«REM»
************** MsgBoxPanel (STDMDD-245: solo se inseriti in DialogPanel ) **************
«ENDREM»

«REM»Genera la header di un pannello di tipo MsgBoxPanel«ENDREM»
«DEFINE msgBoxPanelControlHeader(GUIModel model, ContentPanel cp, String contextPrefix) FOR MsgBoxPanel»
<div class="msgBoxPanel«getMsgBoxPanelStyleByPortal(model, this)»" id="«getFullID(this, contextPrefix)»">
«ENDDEFINE»

«REM»Genera la footer di un pannello di tipo MsgBoxPanel«ENDREM»
«DEFINE msgBoxPanelControlFooter(GUIModel model, ContentPanel cp, String contextPrefix) FOR MsgBoxPanel»
</div>
«ENDDEFINE»

