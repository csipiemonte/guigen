«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT guigen»
«EXTENSION template::GenericExtensions»
«EXTENSION template::springmvc::SpringMVCExtensions»
«EXTENSION template::springmvc::security::securityCustom::SecurityProfileExtensions»
«DEFINE springSecurityHelperClasses FOR GUIModel-»
«FILE getSpringSecurityHelperJavaFile()»
package «getBaseJavaPackage()».business;

import java.util.*;
import java.io.*;
import it.csi.csi.porte.InfoPortaDelegata;
import it.csi.csi.porte.proxy.PDProxy;
import it.csi.csi.util.xml.PDConfigReader;
import it.csi.csi.wrapper.SystemException;
import it.csi.csi.wrapper.UnrecoverableException;
import it.csi.iride2.policy.entity.*;
import it.csi.iride2.policy.exceptions.*;
import it.csi.iride2.policy.interfaces.PolicyEnforcerBaseService;
import it.csi.iride2.iridefed.entity.Ruolo;
import it.csi.iride2.iridefed.exceptions.BadRuoloException;
import «getDTOBaseJavaPackage()».*;
import org.apache.log4j.*;
import «getBaseJavaPackage()».util.*;
«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringSecurityHelperImports")»

«ENDPROTECT»

public class «getSpringSecurityHelperClassName()»{

    /**  */
	protected static final Logger LOG =									
		Logger.getLogger(Constants.APPLICATION_CODE + ".security");   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi di supporto alla sicurezza.
	//////////////////////////////////////////////////////////////////////////////
	«EXPAND springSecurityHelperMethods FOR this»
	
	//////////////////////////////////////////////////////////////////////////////
	/// properieta' di configurazione dell'helper
	//////////////////////////////////////////////////////////////////////////////
	
	private String pdProtocol = "EJB";
	
	/**
	 * @param prot protocollo di richiamo del PEP. Puo' valere: 
	 * 1) EJB (default)
	 * 2) WS
	 * utilizzato solo se la security non e' custom
	 */
	public void setPDProtocol(String prot) {
		pdProtocol = prot;
	}
	
	public String getPDProtocol(){
		return pdProtocol;
	}
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringSecurityHelperProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»
«ENDDEFINE»

«DEFINE springSecurityHelperMethods FOR GUIModel»
	«EXPAND template::springmvc::security::irideIntegration::irideHelperMethods FOR this»
	«EXPAND customConstraintsMethods FOR this»
«ENDDEFINE»


«DEFINE customConstraintsMethods FOR GUIModel»
	///////////////////////////////////////////////////////////////////////////////
	//// Metodi per la sicurezza custom
	///////////////////////////////////////////////////////////////////////////////
	
	«FOREACH (List[ContentPanel])getAllContentPanels(this) AS cp-»
			«EXPAND customConstraints(this) FOR cp-»
	«ENDFOREACH-»
	«LET getAllCustomSecConstraints4Menus(this.structure.appWindow.appArea.menubar) AS customCtr4Menu-»
			«FOREACH customCtr4Menu AS currMenuCustomCtr-»
		
	public boolean customCheck«((CustomSecurityConstraint)currMenuCustomCtr).methodNameSuffix.toFirstUpper()» (Map session)
		throws BEException
	{
			«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("customCheck"+(((CustomSecurityConstraint)currMenuCustomCtr).methodNameSuffix))-»
		/// inserire qui il codice del controllo custom
		try{
			return true;
		}
		catch(Exception ex){
			LOG.error("[SecurityHelper::customCheck«((CustomSecurityConstraint)currMenuCustomCtr).methodNameSuffix.toFirstUpper()»] Errore durante l'esecuzione del metodo", ex);
			throw new BEException("Errore durante l'esecuzione del metodo customCheck«((CustomSecurityConstraint)currMenuCustomCtr).methodNameSuffix.toFirstUpper()»", ex);
		}
			«ENDPROTECT»
	}		
			«ENDFOREACH-»
	«ENDLET»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model) FOR ContentPanel-»
	«EXPAND customConstraints(model, this, "") FOR this.panels-»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model, ContentPanel cp, String contextPrefix) FOR Panel-»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model, ContentPanel cp, String contextPrefix) FOR FormPanel-»
	«EXPAND customConstraints(model, cp, contextPrefix) FOREACH this.subpanels-»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model, ContentPanel cp, String contextPrefix) FOR WidgetsPanel-»
	«EXPAND customConstraints(model, cp, contextPrefix) FOREACH this.widgets-»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model, ContentPanel cp, String contextPrefix) FOR CommandPanel-»
	«EXPAND customConstraints(model, cp, contextPrefix) FOREACH this.widgets-»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model, ContentPanel cp, String contextPrefix) FOR MultiPanel-»
	«EXPAND customConstraints(model, cp, contextPrefix) FOREACH this.panels-»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model, ContentPanel cp, String contextPrefix) FOR PanelDefUse-»
	«EXPAND customConstraints(model, cp, getChainedContext(contextPrefix,name)) FOR this.panelDef.panel-»
«ENDDEFINE»

«DEFINE customConstraints(GUIModel model, ContentPanel cp, String contextPrefix) FOR Widget-»
	«LET (List[CustomSecurityConstraint])(this.securityConstraints.select(sc|sc.metaType==CustomSecurityConstraint)) AS allCustomSC-»
		«EXPAND customConstraint(model, cp, contextPrefix) FOREACH allCustomSC-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE customConstraint(GUIModel model, ContentPanel cp, String contextPrefix) FOR CustomSecurityConstraint-»
	public boolean customCheck«contextPrefix+this.methodNameSuffix.toFirstUpper()» (Map session)
		throws BEException
	{
			«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("customCheck"+contextPrefix+this.methodNameSuffix)-»
		/// inserire qui il codice del controllo custom
		try{
			return true;
		}
		catch(Exception ex){
			LOG.error("[SecurityHelper::customCheck«contextPrefix+this.methodNameSuffix.toFirstUpper()»] Errore durante l'esecuzione del metodo", ex);
			throw new BEException("Errore durante l'esecuzione del metodo customCheck«contextPrefix+this.methodNameSuffix.toFirstUpper()»", ex);
		}
			«ENDPROTECT»
	}
«ENDDEFINE»