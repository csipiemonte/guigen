«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT guigen»

«EXTENSION template::GenericExtensions»
«EXTENSION template::springmvc::SpringMVCExtensions»

«DEFINE constraintFactoryFiles FOR GUIModel-»
«EXPAND constraintFactoryClass FOR this»
«ENDDEFINE»

«DEFINE constraintFactoryClass FOR GUIModel-»
«FILE getConstraintFactoryJavaFile(true)»package «getConstraintFactoryPkg()»;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

import flexjson.JSONDeserializer;
import flexjson.locators.TypeLocator;
import «getCommandFactoryPkg()».CommandExecutionException;

public class ConstraintFactory {
	private static JSONDeserializer<UISecConstraint> deser = new JSONDeserializer<UISecConstraint>();
	private static final String RESOURCE_BASE = "«getPresentationJavaPath()»";

	static final ConstraintFactory INSTANCE = new ConstraintFactory();

	static final Map<String, UISecConstraint> ctrCache = new HashMap<String, UISecConstraint>();
	
	public static ConstraintFactory getInstance() {
		return INSTANCE;
	}

	static {
		// INIT....
		
	}

	private static String makeKey(String moduleName,
			String cpName, String widgetName, String constrainedBehavior){
		return moduleName+"/"+cpName+"/"+widgetName+"/"+constrainedBehavior;
	}
	
	public UISecConstraint buildCtrStructure_internal(String moduleName,
			String cpName, String widgetName, String constrainedBehavior) throws CommandExecutionException{
		String key = makeKey(moduleName, cpName, widgetName, constrainedBehavior);
		UISecConstraint ctr = ctrCache.get(key);
		if (ctr != null) {
			return ctr;
		} else {
			String resource = RESOURCE_BASE;
			
			resource = resource + "/" + moduleName + "/constraints/"
					+ cpName + "/" + widgetName+"_"+constrainedBehavior+"_constraints.json";
			
			
			InputStream is = getClass().getResourceAsStream(resource);
			if (is !=null){
				InputStreamReader isReader = new InputStreamReader(is);
				try{
					ctr = deser.deserialize(isReader);
				}
				catch(Exception e){
					throw new CommandExecutionException("Errore nella lettura della struttura di constraints, key="+key+", risorsa:"+resource, e);
				}
				ctrCache.put(key, ctr);
				return ctr;
			}
			else{
				throw new CommandExecutionException("Errore nella lettura della struttura di comandi, key="+key+", risorsa:"+resource+ " non trovata");
			}
		}
	}
}

«ENDFILE»
«ENDDEFINE»