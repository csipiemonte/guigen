import guigen;
import ecore;


////////////////////////////////////////////////////////////
/// Estensioni java indipendenti dalla piattaforma target //
////////////////////////////////////////////////////////////

/// standard generici J2EE Csi piemonte
String getProjectRootDir(GUIModel model, boolean omit_root) :
	omit_root ? "" : model.codComponente;


/// buildfiles
String getBuildXmlFileName(GUIModel model, boolean omit_root) :
	getProjectRootDir(model, omit_root) + "/build.xml";

String getBuildfilesDir(GUIModel model, boolean omit_root) :
	getProjectRootDir(model, omit_root) + "/buildfiles";

String getBuildPropertiesFileName(GUIModel model, boolean omit_root) :
	getBuildfilesDir(model, omit_root) + "/build.properties";

String getBuildPropertiesTemplateFileName(GUIModel model, boolean omit_root) :
	getBuildfilesDir(model, omit_root) + "/target_template_file.properties";

String getIvyFileName(GUIModel model, boolean omit_root) :
	getBuildfilesDir(model, omit_root) + "/ivy.xml";

String getIvyConfFileName(GUIModel model, boolean omit_root) :
	getBuildfilesDir(model, omit_root) + "/ivyconf.xml";

String getAppServerLib(GUIModel model) :
	if ( model.targetPlatform.code == TargetPlatformCodes::JBoss43 ) then
		"jboss"
	else if ( model.targetPlatform.code == TargetPlatformCodes::WLS92 ) then
		"weblogic";


/// configfiles

String getConfigRootDir(GUIModel model, boolean omit_root) :
	getProjectRootDir(model, omit_root) + "/conf";

String getAppServerConfigFile(GUIModel model) :
	if ( model.targetPlatform.code == TargetPlatformCodes::JBoss43 ) then
		"jboss-web"
	else if ( model.targetPlatform.code == TargetPlatformCodes::WLS92 ) then
		"weblogic";


/// parte EAR
String getEarConfigRootDir(GUIModel model, boolean omit_root) :
	getConfigRootDir(model, omit_root) + "/ear";

String getEarConfigDir(GUIModel model, boolean omit_root) :
	getEarConfigRootDir(model, omit_root) + "/" + model.codComponente + "/META-INF";

String getEarConfigFile(GUIModel model, boolean omit_root) :
	getEarConfigDir(model, omit_root) + "/application.xml";

String getEarManifestFile(GUIModel model, boolean omit_root) :
	getEarConfigDir(model, omit_root) + "/MANIFEST.MF";


/// parte EJB
String getEjbConfigRootDir(GUIModel model, boolean omit_root) :
	getConfigRootDir(model, omit_root) + "/ejb";

String getEjbConfigDir(GUIModel model, boolean omit_root) :
	getEjbConfigRootDir(model, omit_root) + "/business/" + model.codComponente + "/META-INF";

String getEjbManifestFile(GUIModel model, boolean omit_root) :
	getEjbConfigDir(model, omit_root) + "/MANIFEST.MF";

String getEjbDeploymentDescriptorFile(GUIModel model, boolean omit_root) :
	getEjbConfigDir(model, omit_root) + "/ejb-jar.xml";

String getJbossEjbDeploymentDescriptorFile(GUIModel model, boolean omit_root) :
	getEjbConfigDir(model, omit_root) + "/jboss.xml";

String getWlEjbDeploymentDescriptorFile(GUIModel model, boolean omit_root) :
	getEjbConfigDir(model, omit_root) + "/weblogic-ejb-jar.xml";



/// parte JAR
String getJarConfigRootDir(GUIModel model, boolean omit_root) :
	getConfigRootDir(model, omit_root) + "/jar";

String getJarConfigDir(GUIModel model, boolean omit_root) :
	getJarConfigRootDir(model, omit_root) + "/integration/META-INF";

String getJarManifestFile(GUIModel model, boolean omit_root) :
	getJarConfigDir(model, omit_root) + "/MANIFEST.MF";


// parte WEB
String getWebModulesConfigDir(GUIModel model, boolean omit_root) :
	getConfigRootDir(model, omit_root) + "/web";

String getWebModuleConfigDir(GUIModel model, boolean omit_root) :
	getWebModulesConfigDir(model, omit_root) + "/" + model.codComponente + "/WEB-INF";

String getWebDeploymentDescriptorFile(GUIModel model, boolean omit_root) :
	getWebModuleConfigDir(model, omit_root) + "/web.xml";

String getReminclTldDescriptorFile(GUIModel model, boolean omit_root) :
	getWebModuleConfigDir(model, omit_root) + "/remincl.tld";

String getJbossWebDeploymentDescriptorFile(GUIModel model, boolean omit_root) :
	getWebModuleConfigDir(model, omit_root) + "/jboss-web.xml";

String getWlWebDeploymentDescriptorFile(GUIModel model, boolean omit_root) :
	getWebModuleConfigDir(model, omit_root) + "/weblogic.xml";

String getWebModuleMetaInfDir(GUIModel model, boolean omit_root) :
	getWebModulesConfigDir(model, omit_root) + "/" + model.codComponente + "/META-INF";

String getWebModuleManifestFile(GUIModel model, boolean omit_root) :
	getWebModuleMetaInfDir(model, omit_root) + "/MANIFEST.MF";


/// javafiles

String getJavaSrcDir(GUIModel model, boolean omit_root) :
	getProjectRootDir(model, omit_root) + "/src/java";

String getBaseJavaSrcDir(GUIModel model, boolean omit_root) :
	getJavaSrcDir(model, omit_root) + "/it/csi/" + model.codProdotto + "/" + model.codComponente;

String getBaseJavaPackage(GUIModel model) :
	"it.csi." + model.codProdotto + "." + model.codComponente;

String getBaseJavaPath(GUIModel model) :
	"/it/csi/" + model.codProdotto + "/" + model.codComponente;


// resourcefiles

String getWebSrcDir(GUIModel model, boolean omit_root) :
	getProjectRootDir(model, omit_root) + "/src/web/" + model.codComponente;


////////////////////////////////////////////////////////////
/// Estensioni di layout                                  //
////////////////////////////////////////////////////////////

// Viene ridefinita mediante AOP per ogni singolo portale (questo è un default)
String getPortalName() :
	"";

String getPortalCode() :
	"";

String getApplicationName(GUIModel model) :
	if ( model.structure.appWindow.header != null ) then
		model.structure.appWindow.header.nomeApplicativo
	else
		"";


////////////////////////////////////////////////////////////
/// Estensioni di utilita'                                //
////////////////////////////////////////////////////////////

// [DM] Verifica che la stringa passata non sia nulla o sia blank
boolean isNullOrEmpty(String s) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.isNullOrEmpty(java.lang.String);


//boolean isBoundToArray(AppDataBinding db) :
//	let fld = (db.path!=null ? getSelectedField(null, db.appData.type, db.path): null) :
//	fld==null ? db.appData.type.metaType==TypedArray : fld.metaType==TypedArray;

////////////////////////////////////////////////////////////
/// Estensioni java                                       //
////////////////////////////////////////////////////////////

List getAllContentPanels(GUIModel model) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllContentPanels(it.csi.mddtools.guigen.GUIModel);

List getAllContentPanels(ApplicationArea appArea) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllContentPanels(it.csi.mddtools.guigen.ApplicationArea);

boolean isContentPanelUnique(ContentPanel cp) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.isContentPanelUnique(it.csi.mddtools.guigen.ContentPanel);

ContentPanel findParentContentPanel(Command a) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findParentContentPanel(it.csi.mddtools.guigen.Command);

ContentPanel findParentContentPanel(Widget w) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findParentContentPanel(it.csi.mddtools.guigen.Widget);

ContentPanel findParentContentPanel(Panel p) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findParentContentPanel(it.csi.mddtools.guigen.Panel);

List findAllWidgetsInContentPanel(ContentPanel cp) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findAllWidgetsInContentPanel(it.csi.mddtools.guigen.ContentPanel);

List findAllWidgetsInPanel(MultiPanel p): JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findAllWidgetsInPanel(it.csi.mddtools.guigen.MultiPanel);

List findAllWidgetsInPanel(FormPanel fp) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findAllWidgetsInPanel(it.csi.mddtools.guigen.FormPanel);
	
List[TabSetPanel] getAllTabSets(ContentPanel p) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllTabSets(it.csi.mddtools.guigen.ContentPanel);

boolean isVersioneFormalmenteCorretta(String v) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.isVersioneFormalmenteCorretta(java.lang.String);

String getRegionUID(String sourceId) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getRegionUID(java.lang.String);

List findUnresolvedAppDataBinding(ContentPanel cp) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtilsChecks.findUnresolvedAppDataBinding(it.csi.mddtools.guigen.ContentPanel);
	
List getAllCustomSecConstraints4Menus(Menubar mb) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllCustomSecConstraints4Menus(it.csi.mddtools.guigen.Menubar);

List getAllTypes(GUIModel model) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllTypes(it.csi.mddtools.guigen.GUIModel);

List getAllTypes(Typedefs typedef) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllTypes(it.csi.mddtools.guigen.Typedefs);

List getAllApplicationData(GUIModel model) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllApplicationData(it.csi.mddtools.guigen.GUIModel);
	
List getAllApplicationData(ApplicationDataDefs appDataDefs) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllApplicationData(it.csi.mddtools.guigen.ApplicationDataDefs);

Field getSelectedField(Field f, Type ct, String selector) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getSelectedField(it.csi.mddtools.guigen.Field, it.csi.mddtools.guigen.Type, java.lang.String);

boolean isBoundToArray(AppDataBinding db) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.isBoundToArray(it.csi.mddtools.guigen.AppDataBinding);