import guigen;
extension template::GenericExtensions reexport;

/// string utils
String toCamel(String s) :
s;

String removeSeparator(String s) :
s;

//// files & paths

///////////////////////////////////////////////////////////////////////////////////////////////
//// NAMING BEAN SPRING


String springConfigurationFileName():
	getDefaultCodServizio().toCamel()+"SpringMain.xml";
	
String springConfigurationFilePath():
let actualFolderForPlatform =  "WEB-INF" : 
	getSpecificWarConfigRootDir(getDefaultCodBinding(), removeSeparator(getDefaultCodServizio().toLowerCase()))+"/"+actualFolderForPlatform+"/"+springConfigurationFileName();

String springDaoBeansInternalFileName():
	"dao-beans.xml";
	
String springDaoBeansInternalFilePath():
let actualFolderForPlatform = "WEB-INF" : 
	getSpecificWarConfigRootDir(getDefaultCodBinding(), removeSeparator(getDefaultCodServizio().toLowerCase()))+"/"+actualFolderForPlatform+"/"+springDaoBeansInternalFileName();

String springAppContextFileName():
	"applicationContext.xml";
	
String springAppContextFilePath():
let actualFolderForPlatform =  "WEB-INF"  :
	getSpecificWarConfigRootDir(getDefaultCodBinding(), removeSeparator(getDefaultCodServizio().toLowerCase()))+"/"+actualFolderForPlatform+"/"+springAppContextFileName();


String getConfigRootDir() :
  "conf";

String getDocsRootDir() :
  "docs";

String getTestDir() :
  "test";
  
String getTestJavaDir() :
  "test/java";

String getWarConfigRootDir() :
  getConfigRootDir()+"/web";
  
// conf/<tipobinding>/<codwar>
String getSpecificWarConfigRootDir(String codBinding, String codWar) :
  getWarConfigRootDir()+"/"+codWar+"/"+codBinding;
  
//// codici

String getDefaultCodBinding() :
"rest";

String getDefaultCodServizio() :
 "be";
 
String getDefaultServiceType() :
 "appl";
 

///////////////////////////////////////////////////////////////////////////////////////////////
// JAVA CLASSES

//// BUSINESS
String getBusinessJavaPackage(GUIModel model):
getBaseJavaPackage(model)+".business";

String getBusinessJavaPath(GUIModel model):
getBaseJavaSrcDir(model, true)+"/business";

String getSpringHelperJavaClassName() :
"SpringApplicationContextHelper";

String getSpringHelperJavaClassFQN(GUIModel model) :
getBusinessJavaPackage(model)+"."+getSpringHelperJavaClassName();

String getSpringHelperFullPath(GUIModel model):
getBusinessJavaPath(model)+"/"+getSpringHelperJavaClassName()+".java";



//////////////////////////////////////////////////////////////////////////////////////////////
//// FILTERS


String getFiltersJavaPackage(GUIModel model):
getBaseJavaPackage(model)+".filter";

String getFiltersJavaPath(GUIModel model):
getBaseJavaSrcDir(model, true)+"/filter";

////////////////////////////////////////////////
////// XSRFFilter //////////////////////////////
////////////////////////////////////////////////
String getXSRFFilterJavaClassName() :
"XSRFProtectionFilter";

String getXSRFFilterJavaClassFQN(GUIModel model) :
getFiltersJavaPackage(model)+"."+getXSRFFilterJavaClassName();

String getXSRFFilterFullPath(GUIModel model):
getFiltersJavaPath(model)+"/"+getXSRFFilterJavaClassName()+".java";


////////////////////////////////////////////////
////// IrideIdAdapterFilter ////////////////////
////////////////////////////////////////////////
String getIrideIdAdapterFilterClassName() :
	"IrideIdAdapterFilter";
	
String getIrideIdAdapterFilterFQN(GUIModel model) :
	getFiltersJavaPackage(model) + "." + getIrideIdAdapterFilterClassName();
	
String getIrideIdAdapterFilterJavaFile(GUIModel model) :
	getFiltersJavaPath(model) + "/" + getIrideIdAdapterFilterClassName() + ".java";



///////////////////////////////////////////////////////////////////////////////////
//// UTIL
String getUtilJavaPackage(GUIModel model):
getBaseJavaPackage(model)+".util";

String getUtilJavaPath(GUIModel model):
getBaseJavaSrcDir(model, true)+"/util";

String getConstantsJavaClassName() :
"Constants";

String getConstantsJavaClassFQN(GUIModel model) :
getUtilJavaPackage(model)+"."+getConstantsJavaClassName();

String getConstantsFullPath(GUIModel model):
getUtilJavaPath(model)+"/"+getConstantsJavaClassName()+".java";


///////////////////////////////////////////////////////////////////////////////////////////////
/// NAMING PACCHETTI

String getWSWarName(String codServ, String codBinding, String srvType, GUIModel model) :
	srvType+"-"+codServ+"-"+codBinding.toLowerCase()+".war";

String wsWebContext(String codServ, String codBinding, String serviceType, GUIModel model) :
//	model.codComponente.toLowerCase()+toCamel(serviceType.toString())+toCamel(codServ)+codBinding.toLowerCase().toFirstUpper();
model.codComponente;

///////////////////////////////////////////////////////////////////////////////////////////////
/// Type Mapping

/// mapping di tipi model -> java
String toJavaSimpleType(Type type) :
	let code = ((SimpleType)type).code :
	let nillable =  ((SimpleType)type).nillable :
	if (code == guigen::SimpleTypeCodes::INT) then
  		(nillable ? "java.lang.Integer" : "int")
	else if (code == guigen::SimpleTypeCodes::STRING) then
  		(nillable ? "java.lang.String" : "java.lang.String")
	else if (code == guigen::SimpleTypeCodes::FLOAT) then
  		(nillable ? "java.lang.Float" : "float")
  	else if (code == guigen::SimpleTypeCodes::LONG) then
  		(nillable ? "java.lang.Long" : "long")
	else if (code == guigen::SimpleTypeCodes::DOUBLE) then
  		(nillable ? "java.lang.Double" : "double")
	else if (code == guigen::SimpleTypeCodes::BOOLEAN) then
  		(nillable ? "java.lang.Boolean" : "boolean")
	else if (code == guigen::SimpleTypeCodes::DATE) then
  		(nillable ? "java.lang.String" : "java.lang.String")
  	else if (code == guigen::SimpleTypeCodes::DATETIME) then
  		(nillable ? "java.lang.String" : "java.lang.String")
  	else if (code == guigen::SimpleTypeCodes::HOURS) then
  		(nillable ? "java.lang.String" : "java.lang.String")
	else if (code == guigen::SimpleTypeCodes::BYTE) then
  		(nillable ? "java.lang.Byte" : "byte")
  	else if (code == guigen::SimpleTypeCodes::TREE_NODE) then
  		"it.csi.custom.component.tree.base.TreeNode"
	else 
  		"???";

String toJavaSimpleUDType(SimpleType t, GUIModel model) :
	getUDTFQN(t, model);

String toJavaType(Type type, GUIModel model) :
	if (type==null) then
		"void"
	else if (type.metaType==SimpleType && !((SimpleType)type).userDefined) then
		toJavaSimpleType(type)
	else if (type.metaType==SimpleType && ((SimpleType)type).userDefined) then
		toJavaSimpleUDType((SimpleType)type, model)		
	else if (type.metaType==ComplexType && ((ComplexType)type).typeAnnotation != null && ((ComplexType)type).typeAnnotation.size > 0) then
		((ComplexType)type).typeAnnotation.get(0).fqn
	else if (type.metaType==ComplexType) then
		getDTOBaseJavaPackage(model)+"."+getTypeNSAsPkg((ComplexType)type,false,true)+type.name.toFirstUpper() 
	else 
		"java.util.ArrayList<"+toJavaType(((TypedArray)type).componentType, model)+">";

String defaultInitVal(Type type, GUIModel model) :
	if(type==null) then
	  "null"
	else if(type.metaType==SimpleType && !((SimpleType)type).userDefined) then
	  defaultSimpleInitVal(type)
	else if(type.metaType==SimpleType && ((SimpleType)type).userDefined) then
	  "null"
	else if(type.metaType==TypedArray) then
	  "new java.util.ArrayList<"+toJavaType(((TypedArray)type).componentType, model)+">()"
	else
	  "null";

String defaultSimpleInitVal(Type type) :
	let code = ((SimpleType)type).code :
	let nillable =  ((SimpleType)type).nillable :
	if (code == guigen::SimpleTypeCodes::INT) then
  		(nillable ? "null" : "0")
	else if (code == guigen::SimpleTypeCodes::STRING) then
  		(nillable ? "null" : "null")
	else if (code == guigen::SimpleTypeCodes::FLOAT) then
  		(nillable ? "null" : "0")
  	else if (code == guigen::SimpleTypeCodes::LONG) then
  		(nillable ? "null" : "0")
	else if (code == guigen::SimpleTypeCodes::DOUBLE) then
  		(nillable ? "null" : "0")
	else if (code == guigen::SimpleTypeCodes::BOOLEAN) then
  		(nillable ? "null" : "false")
	else if (code == guigen::SimpleTypeCodes::DATE) then
  		(nillable ? "null" : "null")
  	else if (code == guigen::SimpleTypeCodes::DATETIME) then
  		(nillable ? "null" : "null")
  	else if (code == guigen::SimpleTypeCodes::HOURS) then
  		(nillable ? "null" : "null")
	else if (code == guigen::SimpleTypeCodes::BYTE) then
  		(nillable ? "0" : "0")
	else 
  		"???";


SimpleType getWrappedTypeFromSimpleType(SimpleType s) :
	let tw = new SimpleType :
	tw.setCode(s.code) ->
	tw.setNillable(true) ->
	tw;

boolean typeHandleNullValue(SimpleType type) :
	let code = ((SimpleType)type).code :
	let nillable = ((SimpleType)type).nillable :
	nillable || (code == guigen::SimpleTypeCodes::STRING)   ||
  				(code == guigen::SimpleTypeCodes::DATE)     ||
  				(code == guigen::SimpleTypeCodes::DATETIME) ||
  				(code == guigen::SimpleTypeCodes::HOURS)    ||
  				(code == guigen::SimpleTypeCodes::TREE_NODE);

boolean jsonBasedType(Type type) :
	false;
	
boolean jsonBasedType(ComplexType type) :
	let ct = (ComplexType)type :
	let fqnAnnotation = ct.typeAnnotation.selectFirst(ta|ta.language=="java").fqn :
		(fqnAnnotation != null && fqnAnnotation == "it.csi.jeegia.jeegfw.dto.jeegweb.query.BaseResultDatarow")  
	;

boolean jsonBasedType(TypedArray type) :
	jsonBasedType(type.componentType);
		

///////////////////////////////////////////////////////////////////////////////////////////////
/// Classi Java comuni

String getDTOBaseJavaPackage(GUIModel model) :
	getBaseJavaPackage(model) + ".dto";

String getDTOBaseSrcDir(GUIModel model) :
	getBaseJavaSrcDir(model, true)+"/dto";

String getDTOClassName(ComplexType ct) :
	ct.name.toFirstUpper();

String getFQNDTOClassName(ComplexType ct, GUIModel model) :
	getDTOBaseJavaPackage(model)+"."+getTypeNSAsPkg(ct,false,true)+getDTOClassName(ct);
	
String getFullDTOClassFile(ComplexType ct, GUIModel model) :
	getDTOBaseSrcDir(model)+"/"+getTypeNSAsFolder(ct,false,true)+getDTOClassName(ct)+".java";	


String getModelDTOClassName(ContentPanel cp, boolean forMenu, boolean forHome, GUIModel model) :
    ( forMenu? "GlobalMenuModel":
    	(forHome? "GlobalHomeModel": cp.name.toFirstUpper()+"Model") 
    );

String getModelDTOFQN(ContentPanel cp, boolean forMenu, boolean forHome, GUIModel model) :
	getDTOBaseJavaPackage(model) + "." +getAppModuleAsPkg(cp,false,true) + getModelDTOClassName(cp, forMenu, forHome, model);

String getFullModelDTOClassFile(ContentPanel cp, boolean forMenu, boolean forHome, GUIModel model) :
	getDTOBaseSrcDir(model)+"/"+getAppModuleAsFolder(cp,false, true)+getModelDTOClassName(cp, forMenu, forHome, model)+".java";

String getUDTClassName(SimpleType t) : 
	if (t.userDefined)then 
		"UDT"+t.name 
	else
		"<<errore getUDT ClassName: "+t.name+" non � userDefined!>>";

String getUDTFQN(SimpleType t, GUIModel model) :
		getDTOBaseJavaPackage(model)+"."+getTypeNSAsPkg(t,false,true)+getUDTClassName(t);
		
String getFullUDTClassFile(SimpleType t, GUIModel model) :
	getDTOBaseSrcDir(model)+"/"+getTypeNSAsFolder(t,false,true)+getUDTClassName(t)+".java";


///////////////////////////////////////////////////////////////////////////////////////////////
/// ALTRE UTILITY

String getAppModuleAsPkg(ContentPanel cp, boolean prependDot, boolean appendDot) : 
	let parent = cp.eContainer :
		(parent.metaType==AppModule ? (prependDot ? "." :"")+((AppModule)parent).name.toLowerCase()+(appendDot ? "." :"") : "" );
		
String getAppModuleAsFolder(ContentPanel cp, boolean prependSlash, boolean appendSlash) : 
	let parent = cp.eContainer :
		(parent.metaType==AppModule ? (prependSlash ? "/" :"")+((AppModule)parent).name.toLowerCase()+(appendSlash? "/": "") : "" );

String getTypeNSAsPkg(Type ct, boolean prependDot, boolean appendDot) : 
	let parent = ct.eContainer :
		(parent.metaType==TypeNamespace ? (prependDot ? "." :"")+((AppModule)parent).name.toLowerCase()+(appendDot ? "." :"") : "" );		

String getTypeNSAsFolder(Type ct, boolean prependDot, boolean appendDot) : 
	let parent = ct.eContainer :
		(parent.metaType==TypeNamespace ? (prependDot ? "/" :"")+((AppModule)parent).name.toLowerCase()+(appendDot ? "/" :"") : "" );		


String getChainedContext(String oldContext, String newContext) :
	oldContext==null || oldContext.length==0 ? newContext : oldContext+"_"+newContext;

// serve in quei casi in cui si usava w.name senza necessita' di avere il prefisso "widg"
//String getFullID(Widget w, String contextPrefix) :
//	contextPrefix == null || contextPrefix.length==0 ? w.name : contextPrefix+w.name;

//String getFullID(Panel p, String contextPrefix) :
//	contextPrefix == null || contextPrefix.length==0 ? p.name : contextPrefix+p.name;


String getFullExecCmdMethodName(String methodName, String contextPrefix) :
	contextPrefix!=null && contextPrefix.length>0 ? 
	contextPrefix+methodName.toFirstUpper() :
	methodName;

int getStepNumber(Panel step, WizardPanel wiz) :
	wiz.panels.indexOf(step)+1;

///// risoluzione hostname del repository artefatti
String getIvyRepositoryHost() :
	getProperty("guigen.ivyRepositoryHost")==null||getProperty("guigen.ivyRepositoryHost").length==0?
	"repart.csi.it":
	getProperty("guigen.ivyRepositoryHost");
	

//// ALTRO
// chiave dell'app data quando salvato in sessione
String getAppDataKey(ApplicationData ad) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAppDataKey(it.csi.mddtools.guigen.ApplicationData);
	

	
 