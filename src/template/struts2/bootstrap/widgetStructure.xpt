«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT guigen»

«EXTENSION org::eclipse::xtend::util::stdlib::naming»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»
«EXTENSION template::struts2::bootstrap::Struts2ExtensionsNeutral»
«EXTENSION template::struts2::bootstrap::BootstrapExtensions»



«REM»###############################################################
copiare le definizioni originali da struts2::view::resourcefiles.xpt 
e riscrivere secondo le necessita'
####################################################################
«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel cp, WidgetsPanel wp, Boolean isFirst, Boolean isLast, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR Widget»
<s:if test="isWidgetVisible('«cp.name»','«getFullID(this, contextPrefix)»')" >
«EXPAND createWidgetMarkup(model, cp, contextPrefix, pduConf, isPortlet) FOR this-»
</s:if>
«ENDDEFINE»

«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR Widget»
«ERROR "createwidgetMarkup:"+this.metaType+" non gestito"»
<span>widget «this.metaType» non gestito</span>
«ENDDEFINE»


«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR Button»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form-inline">
	<div class="form-group «getWidgetColSizes()»">
«LET getRefreshTargetIds(this) AS refreshIds-»
«IF refreshIds !=null && model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlHeader(refreshIds, model, cp, contextPrefix, isPortlet) FOR this-»
«ENDIF-»
<s:submit type="button" name="«getWidgetName(this, contextPrefix)»" id="«getWidgetName(this, contextPrefix)»" method="«getClickHandlerMethodName(this, contextPrefix)»"
	key="«cp.name».«getFullID(this, contextPrefix)».label" cssClass="«getCSSClasses(this)»"
	disabled="isWidgetDisabled('«cp.name»','«getFullID(this, contextPrefix)»')" />
«IF refreshIds !=null && model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlFooter FOR this-»
«ENDIF-»
«ENDLET-»
</div>
</div>
«ENDDEFINE»

«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR Calendar»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form-inline">
	<div class="form-group «getWidgetColSizes()»">
		<label class="control-label" for="«getWidgetLabelFor(this, contextPrefix, pduConf)»"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></label>
<s:textfield 
	«REM»[LC] stdmdd-1060 - Imposta l'attributo "title" con il valore specificato nella property "Tooltip"«ENDREM»
	«IF this.tooltip!=null-»title="«this.tooltip»"«ENDIF-»
	
	name="«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="«getWidgetName(this, contextPrefix)»"
	disabled="isWidgetDisabled('«cp.name»','«getFullID(this, contextPrefix)»')"
	maxlength="10" 
	cssClass="«getCSSClasses(this)»"
/> «getCalendarImageByLayout(model, this)»
</div>
</div>
«ENDDEFINE»

«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR CheckBox»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form-inline">
	<div class="form-group «getWidgetColSizes()»">
«IF !isNullOrEmpty(this.label)»
		<label class="control-label" for="«getWidgetLabelFor(this, contextPrefix, pduConf)»"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></label>
«ENDIF-»
«LET getRefreshTargetIds(this) AS refreshIds-»
«IF refreshIds !=null && model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlHeader(refreshIds, model, cp, contextPrefix) FOR this-»
«ENDIF-»
<s:checkbox 
	«REM»[LC] stdmdd-1060 - Imposta l'attributo "title" con il valore specificato nella property "Tooltip"«ENDREM»
	«IF this.tooltip!=null-»title="«this.tooltip»"«ENDIF-»
	
	name="«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="«getWidgetName(this, contextPrefix)»"
	disabled="isWidgetDisabled('«cp.name»','«getFullID(this, contextPrefix)»')"
	«getCheckBoxesValueChangedHandlerJS(this, model, cp, contextPrefix)»«REM»STDMDD-163: Check box: implementazione evento di click«ENDREM»
	/> 
<s:if test="!isWidgetDisabled('«cp.name»','«getFullID(this, contextPrefix)»')" >
	<s:hidden name="__checkbox_«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="__checkbox_«getWidgetName(this, contextPrefix)»" />
</s:if>
«IF refreshIds!=null && model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlFooter FOR this-»
«ENDIF-»
«ENDLET-»
</div>
</div>
«ENDDEFINE»

«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR ComboBox»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form-inline">
	<div class="form-group «getWidgetColSizes()»">
«IF !isNullOrEmpty(this.label)»
		<label class="control-label" for="«getWidgetLabelFor(this, contextPrefix, pduConf)»"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></label>
«ENDIF-»
«LET getRefreshTargetIds(this) AS targetIdsTemp-»
«LET (Panel)(this.eContainer) AS parentPanel-»
«LET targetIdsTemp!=null ? targetIdsTemp : {getFragmentId(parentPanel)} AS refreshIds-»
«IF model.targetPlatform.enableRichUIBehavior && eventHandlers.select(evh|evh.eventType==EventTypes::KEY_PRESSED).size>0-»«REM»genero una suggestion con bind su chiave e valore«ENDREM»
<s:textfield 

	«REM»[LC] stdmdd-1060 - Imposta l'attributo "title" con il valore specificato nella property "Tooltip"«ENDREM»
	«IF eventHandlers.select(evh|evh.eventType==EventTypes::VALUE_CHANGED).size>0 -»«REM»[LC] stdmdd-1072 - In caso di funzionalita' Value Changed, si accoda, nel testo del tooltip, l'avviso«ENDREM»
		title="«this.tooltip» - Attenzione. Dopo aver selezionato un valore, la pagina verra' aggiornata automaticamente"
	«ELSE-»
		title="«this.tooltip»"
	«ENDIF-»
	
	name="«getAppDataKey(databinding.appData)».«valueSelector»"
	id="«getWidgetName(this, contextPrefix)»"
	size="«fieldLength»"
	cssClass="form-control"
	disabled="isWidgetDisabled('«cp.name»','«getFullID(this, contextPrefix)»')"
	/>
«REM»«EXPAND createComboBoxNoscriptMarkup(model, cp, contextPrefix, pduConf) FOR this-» [DM] SDTMDD-1084: rimozione noscript«ENDREM»
«ELSE-»
«IF model.targetPlatform.enableRichUIBehavior && eventHandlers.select(evh|evh.eventType==EventTypes::VALUE_CHANGED).size>0 -»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlHeader(refreshIds, model, cp, contextPrefix) FOR this-»

<s:url id="«getWidgetName(this, contextPrefix)»urlComboBoxValueChange"
   «getUrlWidgetValueChange(this, model, cp, contextPrefix)» 
   includeParams="all" portletUrlType="action" 
/>
«ENDIF-»
<s:select name="«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="«getWidgetName(this, contextPrefix)»"
	 
	«REM»[LC] stdmdd-1060 - Imposta l'attributo "title" con il valore specificato nella property "Tooltip"«ENDREM»
	«IF eventHandlers.select(evh|evh.eventType==EventTypes::VALUE_CHANGED).size>0 -»«REM»[LC] stdmdd-1072 - In caso di funzionalita' Value Changed, si accoda, nel testo del tooltip, l'avviso«ENDREM»
		title="«this.tooltip» - Attenzione. Dopo aver selezionato un valore, la pagina verra' aggiornata automaticamente"
	«ELSE-»
		title="«this.tooltip»"
	«ENDIF-»
			
	  «IF !omitHeaderValue»headerKey="" headerValue=""«ENDIF» «REM»STDMDD-244: headerValue="&nbsp;"«ENDREM»
	  list="«getOGNLForWidgetMultiValue(this, contextPrefix, pduConf)»"
	  disabled="isWidgetDisabled('«cp.name»','«getFullID(this, contextPrefix)»')"
	  «IF (databinding!=null && isBoundToArray(this.databinding)) ||
	  	  (databinding==null && dataType.metaType==TypedArray)-»
	  multiple="true"
	  cssClass="«getCSSClasses()» selectMultiple"          
	  «IF visibleLines>0»size="«visibleLines»"«ENDIF»
	  «ELSE-»
	  cssClass="«getCSSClasses()»"
	  «ENDIF-»
	  «IF this.keySelector!=null && this.keySelector.length>0»listKey="«keySelector»"«ENDIF»
	  «IF this.valueSelector!=null && this.valueSelector.length>0»listValue="«valueSelector»"«ENDIF»
	  «getComboBoxValueChangedHandlerJS(this, model, cp, contextPrefix)»
	  />
«getComboBoxValueChangedHandlerNoScript(this, model, cp, contextPrefix)»
«IF model.targetPlatform.enableRichUIBehavior && eventHandlers.select(evh|evh.eventType==EventTypes::VALUE_CHANGED).size>0 -»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlFooter FOR this-»
«ENDIF-»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
</div>
</div>
«ENDDEFINE»


«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR PlainText»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form-inline">
	<div class="form-group «getWidgetColSizes()»">
«IF !isNullOrEmpty(this.label)»
		<label class="control-label" for="«getWidgetLabelFor(this, contextPrefix, pduConf)»"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></label>
«ENDIF-»
<p class="form-control-static">
«IF this.databinding!=null-»
<s:property value="«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" escape="false" />
«ELSE-»
«IF !isNullOrEmpty(this.staticText)»<s:text name="«cp.name».«getFullID(this, contextPrefix)».statictext.label" />«ENDIF»
«ENDIF-»
</p>
</div>
</div>
«ENDDEFINE»

«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR RadioButtons»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form">
	<div class="form-group «getWidgetColSizes()»">
		<label class="control-label" for="«getWidgetLabelFor(this, contextPrefix, pduConf)»"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></label>
«LET getRefreshTargetIds(this) AS refreshIds-»
«IF refreshIds !=null && model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlHeader(refreshIds, model, cp, contextPrefix) FOR this-»
«ENDIF-»
«FOREACH this.radio AS currRadio ITERATOR iter-»
«EXPAND createWidgetMarkup(model, cp, this, contextPrefix, pduConf,iter.counter1, isPortlet) FOR currRadio»
«ENDFOREACH-»
«getRadioButtonsValueChangedHandlerNoScript(this, model, cp, contextPrefix)»«REM»STDMDD-163: Radio button: implementazione evento di click«ENDREM»
«IF refreshIds!=null && model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlFooter FOR this-»
«ENDIF-»
«ENDLET-»
	</div>
	</div>
«ENDDEFINE»






«REM»Genera la componente di markup (HTML) di un singolo radio button.«ENDREM»
«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, RadioButtons parent, String contextPrefix, PDefUseConfig pduConf,Integer cont, boolean isPortlet) FOR RadioButton»

<div class="radio">
«IF cont==1 && parent.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1»
<s:url id="«getWidgetName(parent, contextPrefix)»urlRadioButtonValueChange"
   «getUrlParentWidgetValueChange(parent, model, cp, contextPrefix)» 
   includeParams="all" portletUrlType="action" 
/>
«ENDIF»
<s:radio
	«REM»[LC] stdmdd-1060 - Imposta l'attributo "title" con il valore specificato nella property "Tooltip"«ENDREM»
	«IF this.tooltip!=null-»title="«this.tooltip»"«ENDIF-»
	
	id="«getWidgetName(this, contextPrefix)»" name="«getOGNLForWidgetValue(parent, contextPrefix, pduConf)»"
	list="#{«getFixedRadioButtonList(this)»}"
	disabled="isWidgetDisabled('«cp.name»','«getFullID(parent, contextPrefix)»')"
	labelPosition="top"
	«!isNullOrEmpty(this.tooltip)?"tooltip=\""+this.tooltip+"\"":""»
	«getRadioPortalStyle(model)»
	«getRadioButtonsValueChangedHandlerJS(parent, model, cp, contextPrefix)»«REM»STDMDD-163: Radio button: implementazione evento di click«ENDREM»
	/> 
</div>
«ENDDEFINE»










«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR Table»
<!-- widget «getFullID(this, contextPrefix)» -->
«LET (Panel)(this.eContainer) AS parentPanel-»
«LET getRefreshTargetIds(this) AS targetIdsTemp-»
«LET targetIdsTemp!=null ? addTableRefreshTargetId(targetIdsTemp, getFragmentId(parentPanel)) : {getFragmentId(parentPanel)} AS targetIds-»
«IF model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlHeader((List[String])targetIds, model, cp, contextPrefix) FOR this-»
«ENDIF-»
«LET this.enableExport ? "true" : "false" AS exportEnabled-»
<s:set name="«cp.name»_«getFullID(this, contextPrefix)»_clearStatus" value="isTableClearStatus('«cp.name»_«getFullID(this, contextPrefix)»')" />
<s:url id="«getStrutsActionConfigName(cp)»ViewUrl"						   
					   action="«getStrutsActionConfigName(cp)»"
					   namespace="«getContentPanelNamespace(cp, false)»"/>
<display:table name="«getNameDisplayTable(this, contextPrefix, pduConf)»"  				
			   «excludeParamas()-»
			   export="«enableExport»"
               id="«getWidgetName(this, contextPrefix)»"
               pagesize="«this.pageSize»"
               keepStatus="true"
               requestURI="${«getStrutsActionConfigName(cp)»ViewUrl}"  
               clearStatus="${«cp.name»_«getFullID(this, contextPrefix)»_clearStatus}"
               uid="row_«getFullID(this, contextPrefix)»"
               summary="«this.summary»" «REM»STDMDD-332«ENDREM»
               «IF customDecorator-»decorator="«getTableDecoratorFQN(model, this)»"«ENDIF-»
               class="«getCSSClasses(this)»" >
	«REM»<display:caption>se label!=null</display:caption>«ENDREM»
	«IF this.databinding != null -»
		<display:column headerClass="nosort" media="html">
		«IF this.databinding.appData.type.metaType == SimpleType -»
			<s:radio list="%{#attr.row_«getFullID(this, contextPrefix)».«columnModel.valueSelector»}" name="«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="%{'«getFullID(this, contextPrefix)»-editcell-'+ (#attr.row_«getFullID(this, contextPrefix)»_rowNum - 1)}" 
				theme="csi"
			«IF (eventHandlers.exists(eh|eh.eventType==EventTypes::VALUE_CHANGED)) -»
				«LET eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED ).first() AS vcHandler-»
				onclick="onRBClick('«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,this.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix)»')"
				«ENDLET-»
			«ENDIF-»
			/>
		«ELSEIF this.databinding.appData.type.metaType == TypedArray -»
			<s:checkboxlist list="%{#attr.row_«getFullID(this, contextPrefix)».«columnModel.valueSelector»}" name="«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="%{'«getFullID(this, contextPrefix)»-editcell-'+ (#attr.row_«getFullID(this, contextPrefix)»_rowNum - 1)}" «getCheckboxPortalStyle(model)»
			«IF (eventHandlers.exists(eh|eh.eventType==EventTypes::VALUE_CHANGED)) -»
			«LET eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED ).first() AS vcHandler-»
				onclick="onRBClick('«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,this.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix)»')"
			«ENDLET-» 
			«ENDIF-»
			/>
		«ELSEIF this.databinding.appData.type.metaType == ComplexType -»
			«REM»COME FARE SE SIAMO IN QUESTO CASO?«ENDREM»
			«ERROR "Databinding a ComplexType non ancora gestito sul widget Table " + loc()»
		«ENDIF-»
		</display:column>
		«IF enableExport-»«REM»STDMDD-479«ENDREM»
		<display:column headerClass="nosort" media="excel pdf">
		</display:column>
		«ENDIF-»
	«ENDIF-»
	«LET this.columnModel AS tabColMod-»
	«FOREACH getCustomizedColumnsList(this, pduConf) AS currCol-»
		«IF currCol.editable-»
			«IF currCol.editableFlagSelector != null-»
		<display:column titleKey="«cp.name».«getFullID(this, contextPrefix)».«currCol.selector».label" 
			sortable="«currCol.sortable»" headerClass="«currCol.sortable ? "sortable" : "nosort"»" media="html"
			«IF currCol.customDecorator-»decorator="«getColumnDecoratorFQN(model, this, currCol)»"«ENDIF-»>
				«getColumnEditableField(currCol, this, model, contextPrefix, pduConf, null)»
		</display:column>
			«ELSE-»
		<display:column titleKey="«cp.name».«getFullID(this, contextPrefix)».«currCol.selector».label" «getColumnComparator(model, currCol, this)»
			sortable="«currCol.sortable»" headerClass="«currCol.sortable ? "sortable" : "nosort"»" media="html"
			«IF currCol.customDecorator-»decorator="«getColumnDecoratorFQN(model, this, currCol)»"«ENDIF-»>
				«getColumnEditableField(currCol, this, model, contextPrefix, pduConf, null)»
		</display:column>
			«ENDIF-»
		«REM»[SC] Jira STDMDD-536 Introdotta gestione dell'Active Flag Selector «ENDREM»
		«ELSEIF currCol.eventActive && currCol.activeFlagSelector!=null -»
		<display:column titleKey="«cp.name».«getFullID(this, contextPrefix)».«currCol.selector».label"
						sortable="«currCol.sortable»" headerClass="«currCol.sortable ? "sortable" : "nosort"»" media="html"
						«IF currCol.customDecorator-»decorator="«getColumnDecoratorFQN(model, this, currCol)»"«ENDIF-»>
				<s:if test="%{#attr.row_«getFullID(this, contextPrefix)».«currCol.activeFlagSelector» == true}">
					<s:url id="targetUrlLinkableCell"						   
						   action="«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,this.eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED).first(), contextPrefix)»"
						   namespace="«getContentPanelNamespace(cp, false)»"
						   includeParams="none">
						<s:param name="idRiga"  value="%{#attr.row_«getFullID(this, contextPrefix)».«this.columnModel.valueSelector»}"/>
						<s:param name="idColonna">«currCol.selector»</s:param>
					</s:url>
					<s:a href="%{targetUrlLinkableCell}" id="id_linkable_cell">
						<s:property value="%{#attr.row_«getFullID(this, contextPrefix)».«currCol.selector»}"/>
					</s:a>
				</s:if>
				<s:else>
					<s:property value="%{#attr.row_«getFullID(this, contextPrefix)».«currCol.selector»}"/>
				</s:else>
		</display:column>
		«ELSE-»
		<display:column «IF !currCol.eventActive-»property="«currCol.selector»"«ENDIF» titleKey="«cp.name».«getFullID(this, contextPrefix)».«currCol.selector».label" 
			sortable="«currCol.sortable»" headerClass="«currCol.sortable ? "sortable" : "nosort"»"
			«getColumnFormatter(currCol, this)» «getColumnComparator(model, currCol, this)» «getColumnStyle(currCol, this, model)»  media="html"
			«IF currCol.customDecorator-»decorator="«getColumnDecoratorFQN(model, this, currCol)»"«ENDIF-» >
			«IF currCol.eventActive-»
			<s:url id="targetUrlLinkableCell"						   
					action="«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,this.eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED).first(), contextPrefix)»"
					namespace="«getContentPanelNamespace(cp, false)»"
					includeParams="none">
				<s:param name="idRiga"  value="%{#attr.row_«getFullID(this, contextPrefix)».«this.columnModel.valueSelector»}"/>
				<s:param name="idColonna">«currCol.selector»</s:param>
			</s:url>
			<s:a href="%{targetUrlLinkableCell}" id="id_linkable_cell">
				<s:property value="%{#attr.row_«getFullID(this, contextPrefix)».«currCol.selector»}"/>
			</s:a>
			«ENDIF»
		</display:column>
		«ENDIF-»
		«IF enableExport-»«REM»STDMDD-694«ENDREM»
		<display:column property="«currCol.selector»" titleKey="«cp.name».«getFullID(this, contextPrefix)».«currCol.selector».export.label"
			sortable="«currCol.sortable»" headerClass="«currCol.sortable ? "sortable" : "nosort"»"
			«getColumnComparator(model, currCol, this)»
			media="excel" />
		<display:column property="«currCol.selector»" titleKey="«cp.name».«getFullID(this, contextPrefix)».«currCol.selector».export.label"
			sortable="«currCol.sortable»" headerClass="«currCol.sortable ? "sortable" : "nosort"»"
			«getColumnFormatter(currCol, this)» «getColumnComparator(model, currCol, this)»
			media="pdf" />	
		«ENDIF-»
	«ENDFOREACH-»
	«ENDLET-»
</display:table>
«REM»STDMDD-416 - creato un Custom Interceptor per la gestione (TableSelectionInterceptor)«ENDREM»
«IF this.databinding != null && this.databinding.appData.type.metaType == TypedArray -»
<s:hidden name="__tableselectionempty_«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="__tableselectionempty_«getWidgetName(this, contextPrefix)»" />
«ENDIF-»

«IF model.targetPlatform.enableRichUIBehavior-»
«EXPAND template::struts2::view::richFeatures::ajaxifyControlFooter FOR this-»
«ENDIF-»

«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDDEFINE»








«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR TextField»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form-inline">
	<div class="form-group «getWidgetColSizes()»">
		<label class="control-label" for="«getWidgetLabelFor(this, contextPrefix, pduConf)»"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></label>
<s:textfield 
	«REM»[LC] stdmdd-1060 - Imposta l'attributo "title" con il valore specificato nella property "Tooltip"«ENDREM»
	«IF this.tooltip!=null-»title="«this.tooltip»"«ENDIF-»
	
	name="«getOGNLForWidgetValue(this, contextPrefix, pduConf)»" id="«getWidgetName(this, contextPrefix)»"
	«IF fieldMaxLength!=null && fieldMaxLength>0 -»maxlength="«fieldMaxLength»"«ENDIF-»
	disabled="isWidgetDisabled('«cp.name»','«getFullID(this, contextPrefix)»')"
	cssClass="«getCSSClasses(this)»"
/>
</div>
</div>
«ENDDEFINE»



«DEFINE createWidgetMarkup(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduConf, boolean isPortlet) FOR Captcha»
<!-- widget «getFullID(this, contextPrefix)» -->
	<div class="form-inline">
	<div class="form-group «getWidgetColSizes()»">
«IF !isNullOrEmpty(this.label)»
		<label class="control-label" for="«getWidgetLabelFor(this, contextPrefix, pduConf)»"><s:text name="«cp.name».«getFullID(this, contextPrefix)».label" /></label>
«ENDIF-»
<img src="<%=request.getContextPath()%>/base/captchaServlet" alt="captcha"/>
</div>
</div>
«ENDDEFINE»

