/**
 * <copyright>
 * (C) Copyright 2011 CSI-PIEMONTE;

 * Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;
 * Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.
 * E' possibile ottenere una copia della Licenza al seguente indirizzo:
 *
 * http://www.eupl.it/opensource/eupl-1-1
 *
 * Salvo diversamente indicato dalla legge applicabile o concordato per 
 * iscritto, il software distribuito secondo i termini della Licenza e' 
 * distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,
 * esplicite o implicite.
 * Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni
 * e le limitazioni secondo i termini della Licenza.
 * </copyright>
 *
 * $Id$
 */

import guigen;
import ecore;
extension template::GenericExtensions;
extension template::struts2::Struts2Extensions;
 

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
/// Estensioni specifiche per il framework Struts2 e layout RESPONSIVE                       //
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////
// calcolo dimensioni dei widget
/////////////////////////////////////////////////////////

String getWidgetLabelSizeClasses(Widget w) : 
getWidgetLabel_sm_SizeClasses(w)+" "+getWidgetLabel_md_SizeClasses(w)+" "+getWidgetLabel_xs_SizeClasses(w);

String getWidgetControlSizeClasses(Widget w) :
getWidgetControl_sm_SizeClasses(w)+" "+getWidgetControl_md_SizeClasses(w)+" "+getWidgetControl_xs_SizeClasses(w);


String getWidgetLabel_sm_SizeClasses(Widget w) :
"col-sm-"+getBlockSize(w,true);

String getWidgetLabel_md_SizeClasses(Widget w) :
"";

String getWidgetLabel_xs_SizeClasses(Widget w) :
"";


String getWidgetControl_sm_SizeClasses(Widget w) :
"col-sm-"+getBlockSize(w,false);

String getWidgetControl_md_SizeClasses(Widget w) :
"";

String getWidgetControl_xs_SizeClasses(Widget w) :
"";

int getBlockSize(Widget w, boolean isForLabel):
let container = (Panel)w.eContainer :
let containerLayout = container.layout :
if (container == null && containerLayout == null) then // plain text sintetici per fill grid???
	0 
else
	getBlockSize(w, container, containerLayout, isForLabel);


//////////////////////////////////
/// get block size             ///
//////////////////////////////////

int getBlockSize(Widget w, Panel container, PanelLayout layout, boolean isForLabel) :
1000;


/*****************************************************************************
 * true se il widget non ha label e quindi deve occupare sia lo spazio della *
 * label che quello del controllo.                                           *
 * - Button (e sottoclassi)                                                  *
 * - PlainText con label == null                                             *
 ****************************************************************************/
boolean isWidgetWithoutLabel(Widget w) :
if (w.metaType.isAssignableFrom(Button)) then 
	true
else if (w.metaType==PlainText && w.label.isNullOrEmpty()) then
	true
else false;  // altri casi?????

/****************************************************************************
 * nel layout verticale ci possono solo essere due numeri: il primo         *
 * viene restituito per le label e il secondo per il controllo              * 
 * nei casi senza label (plain text senza label, button) restituito sempre  *
 * 12.                                                                      *
 * Il default column sizes se non specificato e' 3,9                        *
 ****************************************************************************/
//int getBlockSize(Widget w, WidgetsPanel wp, VerticalFlowPanelLayout layout, boolean isForLabel) : 
//	normalizeTo12(getColumnPercent(w, wp, layout, isForLabel));

int getBlockSize(Widget w, WidgetsPanel wp, VerticalFlowPanelLayout layout, boolean isForLabel) : 
let actualColumnSizes = ((String)(layout.columnSizes.isNullOrEmpty() ? "3,9" : layout.columnSizes)).split(",") :
if (isForLabel) then 
	actualColumnSizes.get(0).asInteger()
else if (isWidgetWithoutLabel(w)) then
	(actualColumnSizes.get(1).asInteger())+(actualColumnSizes.get(0).asInteger())
else actualColumnSizes.get(1).asInteger();

int getBlockSize(Widget w, WidgetsPanel wp, HorizontalFlowPanelLayout layout, boolean isForLabel) :
normalizeTo12(getColumnPercent(w, wp, layout, isForLabel));


/*****************************************************************************
 * nel layout a griglia ci sono (2*n_colonne) numeri.
 * per il widget in posizione r,c:
 * - se e' un widget con label:
 * -- per la label viene preso il valore Sz(c*2-1)
 * -- se il widget ha span 1 
 * --- per il controllo viene preso il valore Sz(c*2)
 * -- se il widget ha span > 1
 * --- per il controllo viene presa la somma tra il valore Sx(c*2) e la
 *     somma dei valori Sz((c + i)*2 - 1) , Sz((c + i)*2) con i da 2 a span incluso
 * -- (unificando i due casi: Sz(c*2) + Sum[i=1..span]{Sz((c + i)*2)}) 
 * - se e' un widget senza label:
 * -- il calcolo e' lo stesso del caso controllo con label, ma con in piu' il valore 
 *    che sarebbe stato della label, ovvero il Sz(c*2-1)
 *****************************************************************************/
//int getBlockSize(Widget w, WidgetsPanel wp, GridPanelLayout layout, boolean isForLabel) :
//normalizeTo12(getColumnPercent(w, wp, layout, isForLabel));

int getBlockSize(Widget w, WidgetsPanel wp, GridPanelLayout layout, boolean isForLabel) :
let actualColumnSizes = ((String)(layout.columnSizes.isNullOrEmpty() ? getDefaultGridColSizes(layout) : layout.columnSizes)).split(",") :
let column = ((GridWidgetLayoutSpec)w.layoutSpec).column : // da 1
if (isForLabel) then actualColumnSizes.get((2*column -1)-1).asInteger()
else actualColumnSizes.get(2*column - 1).asInteger();

String getDefaultGridColSizes(GridPanelLayout layout):
if (layout.columns == 1) then
"3,9"
else if (layout.columns == 1) then
"2,4,2,4"
else if (layout.columns == 1) then
"1,3,1,3,1,3"
else "errore";
 
// getColumnPercent: restituisce la percentuale (0-100) del pezzo di widget (label o controllo) 
// considerando eventuali percentuali custom

int getColumnPercent(Widget w, WidgetsPanel wp, PanelLayout layout, boolean isForLabel) :
if (isForLabel) then 25 else 75;

int getColumnPercent(Button b, WidgetsPanel wp, PanelLayout layout, boolean isForLabel) :
if (isForLabel) then 0 else 100;

int normalizeTo12(int percent) :
(12*percent)/100; // !!!!!

//// classi per bootstrap
//String getWidgetColSizes(Widget w) :
//"col-md-4 col-sm-6 col-xs-12"; 


/////////////////////////////////////////////////////////
// altre classi (verificare?)
/////////////////////////////////////////////////////////
String getCSSClasses(Table t) :
"table table-hover table-striped table-bordered";


String getCSSClasses(TextField tf) :
"form-control";

String getCSSClasses(Button b) :
"btn btn-default btn-lg "+
(switch (b.functionSpecifier){
	case CommandFunctions::ADD_ITEM : "glyphicon glyphicon-plus"
	case CommandFunctions::EDIT_ITEM : "glyphicon glyphicon-pencil"
	case CommandFunctions::DELETE_ITEM : "glyphicon glyphicon-trash"
	case CommandFunctions::SEARCH : "glyphicon glyphicon-search"
	case CommandFunctions::SAVE : "glyphicon glyphicon-save"
	case CommandFunctions::LOAD : "glyphicon glyphicon-open"
	case CommandFunctions::DETAIL : "glyphicon glyphicon-zoom-in"
	case CommandFunctions::LOOKUP : "glyphicon glyphicon-search"
	case CommandFunctions::PREVIOUS_ITEM : "glyphicon glyphicon-step-backward"
	case CommandFunctions::NEXT_ITEM : "glyphicon glyphicon-step-forward"
	case CommandFunctions::FIRST_ITEM : "glyphicon glyphicon-fast-backward"
	case CommandFunctions::LAST_ITEM : "glyphicon glyphicon-fast-forward"
	case CommandFunctions::CONFIRM : "glyphicon glyphicon-ok"
	case CommandFunctions::CANCEL : "glyphicon glyphicon-remove"
	case CommandFunctions::FORWARD : "glyphicon glyphicon-forward"
	case CommandFunctions::BACK : "glyphicon glyphicon-backward"
	case CommandFunctions::SHOW_REPORT : "glyphicon glyphicon-open-file showReport"
	case CommandFunctions::SHOW_HELP : "glyphicon glyphicon-question-sign showHelp"
	case CommandFunctions::SEND_MESSAGE : "glyphicon glyphicon-envelope sendMessage"
	default : ""
});

String getCSSClasses(Calendar c) :
"form-control calendar";
	
String getCSSClasses(ComboBox cb) :
"form-control";

	
