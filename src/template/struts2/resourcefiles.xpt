«IMPORT guigen»

«IMPORT template::struts2::remoteResources»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«DEFINE resourceFiles(boolean skip_component_dir_creation) FOR GUIModel»
	«EXPAND indexJspFile(skip_component_dir_creation) FOR this»
	«EXPAND jspFragmentsFile(skip_component_dir_creation) FOR this»
«ENDDEFINE»


«REM»Genera un file di index con la redirect alla welcome action.«ENDREM»
«DEFINE indexJspFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getIndexJspFile(this, skip_component_dir_creation)»<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>Welcome</title>
		<meta http-equiv="refresh" content="0;url=HomePage.do"  />
	</head>
	<body>
	</body>
</html>
«ENDFILE»
«ENDDEFINE»


«REM»Espande i frammenti JSP comuni all'applicazione«ENDREM»
«DEFINE jspFragmentsFile(boolean skip_component_dir_creation) FOR GUIModel»

		«REM»Genera la HEADER (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«LET this.structure.appWindow.header AS header»
			«IF header != null»
				«EXPAND template::struts2::remoteResources::getHeaderMarkup(this, skip_component_dir_creation) FOR header»
			«ENDIF»
		«ENDLET»

		«REM»Genera la MENU BAR (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«LET this.structure.appWindow.appArea.menubar AS menubar»
			«IF menubar != null»
				«EXPAND template::struts2::remoteResources::getMenubarMarkup(this, skip_component_dir_creation) FOR menubar»
			«ENDIF»		
		«ENDLET»

		«REM»Genera la FOOTER (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«LET this.structure.appWindow.footer AS footer»
			«IF footer != null»
				«EXPAND template::struts2::remoteResources::getFooterMarkup(this, skip_component_dir_creation) FOR footer»
			«ENDIF»
		«ENDLET»

«ENDDEFINE»


«REM»Mappa un ContentPanel con una Action Struts«ENDREM»
«DEFINE actionJspFile(GUIModel model, boolean skip_component_dir_creation) FOR ContentPanel»
«FILE getStrutsActionJspFile(this, model, skip_component_dir_creation)»<%@ taglib uri="/struts-tags" prefix="s" %>
<%@ taglib uri="http://displaytag.sf.net" prefix="display" %>

		«REM»Genera la HEADER (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«LET model.structure.appWindow.header AS header»
		«IF header != null»
		<s:include value="fragments/header.jsp" ></s:include>
		«ENDIF»
		«ENDLET»
		

		«REM»Corpo della Pagina«ENDREM»
		<s:form action="«getStrutsActionConfigName(this)»" method="post">
		«LET this.panels AS currP»
			«EXPAND genPanelSetupFunction(model, this) FOR currP»
		«ENDLET»
		</s:form>


		«REM»Genera la FOOTER (NOTA: è una possibile implementazione, migliorabile)«ENDREM»
		«LET model.structure.appWindow.footer AS footer»
		«IF footer != null»
		<s:include value="fragments/footer.jsp" ></s:include>
		«ENDIF»
		«ENDLET»

«ENDFILE»
«ENDDEFINE»


«REM»genera la funzione di setup di un singolo pannello
e si richiama ricordivamente sui sottopannelli in modo da fare una visita
depth first dell'albero della struttura a pannelli
NOTA: il pannello è stato reso temporaneamente con il tag <fieldset> per rendere visivamente l'idea 
del raggruppamento dei widget. Si può eventualmente rendere con il tag <div id="panel.«this.name»"> 
o con altri tag HTML (<div>, <span>) a seconda delle richieste di Comunicazione.
«ENDREM»
«DEFINE genPanelSetupFunction(GUIModel model, ContentPanel panel) FOR Panel»
<!-- Creazione del pannello «this» -->
«IF this.metaType == FormPanel»
	<fieldset>
		<legend>«label.toUpperCase()»</legend>
		«EXPAND setupFormPanel(model, panel) FOR (FormPanel)this»
		«EXPAND genPanelSetupFunction(model, panel) FOREACH ((FormPanel)this).subpanels»
	</fieldset>
«ELSEIF this.metaType == TabSetPanel»
	«REM»TODO: IMPLEMENTARE«ENDREM»
«ELSEIF this.metaType == DialogPanel»
	«REM»TODO: IMPLEMENTARE«ENDREM»
«ENDIF»
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE setupFormPanel(GUIModel model, ContentPanel panel) FOR FormPanel»
	«FOREACH this.widgets AS currWidg»
		«EXPAND createAndAddWidgetMarkup(model, panel) FOR currWidg»
	«ENDFOREACH»
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di un widget generico (non dovrebbe mai essere chiamato)«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR Widget»
<!-- [GUIGEN] widget non gestito: «this» -->
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di un TextField.«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR TextField»
<!-- [GUIGEN] Crea il widget «this» -->
«REM»ABILITAZIONE: null=abilitato; true=abilitato, false=disabilitato«ENDREM»

<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
	<s:label value="«this.label»" for="widg_«this.name»"/>
	<s:textfield name="«getOGNLForWidgetValue(this)»" id="widg_«this.name»" «IF this.fieldLength != null»size="«this.fieldLength»"«ENDIF» 
		disabled="#session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled"
		
		 />
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di una TextArea.«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR TextArea»
<!-- [GUIGEN] Crea il widget «this» -->
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<s:label value="«this.label»" for="widg_«this.name»"/>
<s:textarea name="«getOGNLForWidgetValue(this)»" id="widg_«this.name»"
	disabled="#session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled"
	«IF this.rows != null»rows="«this.rows»"«ENDIF»
	«IF this.columns != null»cols="«this.columns»"«ENDIF»
	
	></s:textarea>
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) dei radio button. TODO: implementare«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR RadioButtons»
<!-- [GUIGEN] Crea il widget «this» -->
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<s:label value="«this.label»" for="widg_«this.name»"/>
<s:radio id="widg_«this.name»" name="«getOGNLForWidgetValue(this)»" list="#{«getFixedRadioButtonList(this)»}" 
	disabled="#session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled" 
	
	/>
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di una CheckBox.«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR CheckBox»
<!-- [GUIGEN] Crea il widget «this» -->
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<s:label value="«this.label»" for="widg_«this.name»"/>
<s:checkbox name="«getOGNLForWidgetValue(this)»" id="widg_«this.name»" 
	disabled="#session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled" 
	
	/>
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di una ComboBox.«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR ComboBox»
<!-- [GUIGEN] Crea il widget «this» -->
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<s:label value="«this.label»" for="widg_«this.name»"/>
<s:select name="«getOGNLForWidgetValue(this)»" id="widg_«this.name»"
          headerKey="00" headerValue="-- Selezionare un valore --"
          list="«getOGNLForWidgetMultiValue(this)»"
          disabled="session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled"
          
          «IF this.keySelector!=null && this.keySelector.length>0»listKey="«keySelector»"«ENDIF»
          «IF this.valueSelector!=null && this.valueSelector.length>0»listValue="«valueSelector»"«ENDIF»
          />
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di un pulsante (Button).«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR Button»
<!-- [GUIGEN] Crea il widget «this» -->
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<s:submit name="widg_«this.name»" id="widg_«this.name»" value="«this.label»" disabled="session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled" />
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di un pulsante di submit del form.«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR ConfirmButton»
<!-- [GUIGEN] Crea il widget «this» -->
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<s:submit name="widg_«this.name»" id="widg_«this.name»" value="«this.label»" disabled="session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled"/>
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di un pulsante di reset del form. 
NOTA: implementato per il momento SOLO in HTML«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR ResetButton»
<!-- [GUIGEN] Crea il widget «this» -->
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<s:reset name="widg_«this.name»" id="widg_«this.name»" value="«this.label»" disabled="session.«panel.name».«this.name»_enabled!=null && !#session.«panel.name».«this.name»_enabled" />
</s:if>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di una immagine. TODO: implementare«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR Image»
<!-- [GUIGEN] Crea il widget «this» -->
<img src="«this.image»" alt="«this.label»"/>
«ENDDEFINE»


«REM»Genera la componente di markup (HTML) di una tabella. Implementato tramite DisplayTag«ENDREM»
«DEFINE createAndAddWidgetMarkup(GUIModel model, ContentPanel panel) FOR Table»
<!-- [GUIGEN] Crea il widget «this» -->

«REM»tag implementation: KEEP«ENDREM»
<s:if test="#session.«panel.name»==null || #session.«panel.name».«this.name»_visible==null || #session.«panel.name».«this.name»_visible" >
<display:table name="«getOGNLForWidgetMultiValue(this)»" 
               export="true" 
               defaultsort="1" 
               defaultorder="descending" 
               id="rowR" 
               pagesize="«this.pageSize»" 
               requestURI="«getStrutsActionConfigName(panel)».do" 
               class="righe_alternate" 
               cellpadding="0" 
               cellspacing="0" 
               keepStatus="true" 
               clearStatus="false">
	«LET this.columnModel AS tabColMod»
		«FOREACH tabColMod.columns AS currCol»
		<display:column property="«currCol.selector»" title="«currCol.label»" sortable="«currCol.sortable»" headerClass="sortable" />
		«ENDFOREACH»
	«ENDLET»
</display:table>
</s:if>
«ENDDEFINE»

