«IMPORT guigen»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«DEFINE modelClasses FOR GUIModel»
«REM»tipi complessi«ENDREM»
«LET this.typedefs AS typedefs»
«IF typedefs != null»
«LET ((List[Type])getAllTypes(this)).typeSelect(ComplexType) AS complexType»
«EXPAND modelClass(this) FOREACH complexType»
«ENDLET»
«ENDIF»
«ENDLET»
«REM»action model«ENDREM»
«EXPAND baseActionModelfile(this) FOR this»
«LET (List[ContentPanel])getAllContentPanels(this) AS currCP»
«EXPAND actionModelFile(this) FOREACH currCP»
«ENDLET»
«IF this.structure.appWindow.appArea.menubar!=null»
	«EXPAND actionModelFile(this) FOR this.structure.appWindow.appArea.menubar»
«ENDIF»
«IF this.structure.appWindow.appArea.onInitCommand!=null»
	«EXPAND actionModelFile(this) FOR this.structure.appWindow.appArea»
«ENDIF»
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE modelClass(GUIModel model) FOR ComplexType»
«FILE getFullDTOClassFile(this,model)»
package «getDTOBaseJavaPackage(model)+getTypeNSAsPkg(this,true,false)»;
«REM»STDMDD-159: visitor validator.«ENDREM»
«IF isValidatorAnnotationRequired(this)-»
import com.opensymphony.xwork2.validator.annotations.*;

@Validation
«ENDIF-»
public class «getDTOClassName(this)» implements java.io.Serializable {
«EXPAND property(model) FOREACH this.fields»

	public «getDTOClassName(this)»() {
	«IF this.initFields-»
		«FOREACH fields.select(f|f.type.metaType==ComplexType) AS cf-»
		«LET (ComplexType)(cf.type) AS tp»
		this.set«cf.name.toFirstUpper()»(new «tp.toJavaType(model)»());
		«ENDLET-»
		«ENDFOREACH»
		«FOREACH fields.select(f|f.type.metaType==TypedArray) AS taf-»
		«LET (TypedArray)(taf.type) AS atp»
		this.set«taf.name.toFirstUpper()»(new «atp.toJavaType(model)»());
		«ENDLET-»
		«ENDFOREACH»
	«ENDIF»
	}
	
	public String toString(){
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(""+this.name+"toString")»
		/// inserire qui la logica desiderata per la rappresenatazione a stringa
		return super.toString();
		«ENDPROTECT»
	}
}
«ENDFILE»
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE property(GUIModel model) FOR Field»

	/// Field [«name»]
	private «toJavaType(this.type, model)» _«this.name» = «defaultInitVal(this.type, model)»;
	
	«REM»STDMDD-159: visitor validator.«ENDREM»
	«getValidatorFieldAnnotationForDTO(this)»
	public void set«name.toFirstUpper()»(«toJavaType(this.type, model)» val) {
		_«this.name» = val;
	}
	
	public «toJavaType(this.type,model)» get«name.toFirstUpper()»() {
		return _«this.name»;
	}
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE springBEClasses FOR GUIModel-»
«EXPAND CPBEJavaFile(this) FOREACH (List[ContentPanel])getAllContentPanels(this)-»

«FILE getSpringBEJavaFile()»
package «getBaseJavaPackage()».business;

import java.util.*;

import «getDTOBaseJavaPackage()».*;

import org.apache.log4j.*;
import «getBaseJavaPackage()».util.*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEImports")»

«ENDPROTECT»

public class «getSpringBEClassName()»{

	/**  */
	protected static Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".business");
	
    //////////////////////////////////////////////////////////////////////////////
	/// Costanti identificative degli Application Data
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH (List[ApplicationData])getAllApplicationData(this) AS currAD»
    public final static String APPDATA_«currAD.name.toUpperCase()»_CODE = "«getAppDataKey(currAD)»";
    «ENDFOREACH» 
   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi associati alla U.I.
	/// - i metodi relativi a menu e azioni di inizializzazione sono direttamente 
	///   implementati in questa classe
	/// - i metodi relativi ai singoli content panel sono delegati nei rispettivi
	///   bean
	//////////////////////////////////////////////////////////////////////////////
	«EXPAND template::struts2::model::businessLogic::springBEMethodsDelegation FOR this»
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property relative ai bean spring associati agli specifici content panel
	//////////////////////////////////////////////////////////////////////////////
	«FOREACH (List[ContentPanel])getAllContentPanels(this) AS currCP-»
	
	private «getSpringCPBEFQN(currCP)» _«getSpringCPBEClassName(currCP)» = null;
	
	public void set«getSpringCPBEClassName(currCP)»(«getSpringCPBEFQN(currCP)» bean){
		_«getSpringCPBEClassName(currCP)» = bean;
	}
	
	public «getSpringCPBEFQN(currCP)» get«getSpringCPBEClassName(currCP)»(){
		return _«getSpringCPBEClassName(currCP)»;
	}
	«ENDFOREACH-»
	
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»

«FILE getSpringBEExcJavaFile()»package «getBaseJavaPackage()».business;

/**
 * Eccezione rilanciata dallo strato spring nel caso in cui la condizione di 
 * errore non sia gestita attraverso un outcome_code e corrispondenti messaggi.
 * Serve per gestire situazioni non recuperabili o impreviste
 */
public class «getSpringBEExcClassName()» extends Exception {
	public «getSpringBEExcClassName()»(String msg, Throwable nested) {
		super(msg, nested);
	}
}
«ENDFILE»
«ENDDEFINE»


«REM»bean spring associato alla logica del singolo pannello«ENDREM»
«DEFINE CPBEJavaFile(GUIModel model) FOR ContentPanel»
«FILE getSpringCPBEJavaFile(model,this)»
package «getBaseJavaPackage(model)».business«getAppModuleAsPkg(this,true,false)»;

import java.util.*;

import «getDTOBaseJavaPackage(model)».*;
«EXPAND importAllNamespaces(model) FOR model.typedefs»

import org.apache.log4j.*;
import «getBaseJavaPackage(model)».util.*;
import «getBaseJavaPackage(model)».business.*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("CP"+name+"SpringBEImports")»

«ENDPROTECT»

public class «getSpringCPBEClassName()»{

	/**  */
	protected static Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".business");
	
    //////////////////////////////////////////////////////////////////////////////
	/// Costanti identificative degli Application Data
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH this.appData AS currAD»
    public final static String APPDATA_«currAD.name.toUpperCase()»_CODE = "«getAppDataKey(currAD)»";
    «ENDFOREACH» 
   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi associati alla U.I.
	//////////////////////////////////////////////////////////////////////////////
	
	// nome del content panel associato al bean
	public final static String CPNAME = "«name»"; 
	
	«EXPAND tabSetUtils(model) FOR this-»
	
	«EXPAND template::struts2::model::businessLogic::springBEMethods(model) FOR this»
	
	«REM»[DM] gestione del reset delle tabelle«ENDREM»
	«IF hasTable(this)»
	«EXPAND resetTableMethods FOR this»
	«ENDIF»
	
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(""+this.name+"SpringBEProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»
«ENDDEFINE»

«DEFINE tabSetUtils(GUIModel model) FOR ContentPanel-»
«LET getAllTabSets() AS allTabSets-»
«FOREACH allTabSets AS currTabSet-»
	public final static String TABSET_«currTabSet.name.toUpperCase()» = "«currTabSet.name»";
	«FOREACH currTabSet.panels AS currTab-»
	public final static String TAB_«currTabSet.name.toUpperCase()»_«currTab.name.toUpperCase()» = 
		CPNAME+"_"+TABSET_«currTabSet.name.toUpperCase()»+"_"+"«currTab.name»";
	«ENDFOREACH-»
	
«ENDFOREACH-»

	/** 
	 * Restituisce il tab correntemente visibile in un determinato tab set
	 */
    private String getCurrentTab(Map session, String tabSetName){
		String value = (String)session.get(CPNAME+"_"+tabSetName+"_selectedMultiPanel");
		return value;
	}
	
«ENDLET-»
«ENDDEFINE»



«DEFINE baseActionModelfile(GUIModel model) FOR GUIModel»
«FILE getDTOBaseSrcDir()+"/BaseSessionAwareDTO.java"»package «getDTOBaseJavaPackage()»;

import java.util.Map;
import org.apache.log4j.*;
import «getBaseJavaPackage()».util.*;

public abstract class BaseSessionAwareDTO implements java.io.Serializable {
	protected Map session;
	
	public void setSession(Map session){
		this.session = session;
	}
	
	public Map getSession(){
		return this.session;
	}
	
	/**  */
	protected static Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".dto");
	
	/**
	 * dump di debug dello stato interno del DTO
	 */
	public String dump() {
		StringBuffer sb = new StringBuffer();
		sb.append(""+getClass().getName()+"{\n");
		sb.append("\telenco fields:\n");
		java.beans.BeanInfo bi;
		try {
			bi = java.beans.Introspector.getBeanInfo(this.getClass());
			java.beans.PropertyDescriptor[] pds = bi.getPropertyDescriptors();
			for (int i = 0; i < pds.length; i++) {
				java.beans.PropertyDescriptor currPD = pds[i];
				java.lang.reflect.Method currReadMethod = currPD
						.getReadMethod();
				if (currReadMethod != null) {
					try {
						Object srcVal = currReadMethod.invoke(this,
								new Object[]{});
						sb.append("\t\t" + currPD.getName() + "=" + srcVal
								+ "\n");
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (java.lang.reflect.InvocationTargetException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (java.beans.IntrospectionException e) {
			e.printStackTrace();
		}

		sb.append("\t\t");

		sb.append("\tsessione:\n");

		sb.append("}\n");
		return sb.toString();
	}
}
«ENDFILE»
«ENDDEFINE»

«REM»[DM] metodi statici per il reset delle tabelle (non bello... ma così è...)«ENDREM»
«DEFINE resetTableMethods FOR ContentPanel»
    //////////////////////////////////////////////////////////////////////////////
	/// Metodi statici per il reset delle tabelle
	//////////////////////////////////////////////////////////////////////////////
	
	«EXPAND resetTableMethods("") FOR this.panels»
	  
«ENDDEFINE»

«REM»implementazione di default per i casi non da gestire«ENDREM»
«DEFINE resetTableMethods(String contextPrefix) FOR Panel»
«ENDDEFINE»

«DEFINE resetTableMethods(String contextPrefix) FOR FormPanel»
	«EXPAND resetTableMethods(contextPrefix) FOREACH this.subpanels-»
«ENDDEFINE»

«DEFINE resetTableMethods(String contextPrefix) FOR MultiPanel»
	«EXPAND resetTableMethods(contextPrefix) FOREACH this.panels-»
«ENDDEFINE»

«DEFINE resetTableMethods(String contextPrefix) FOR PanelDefUse»
	«EXPAND resetTableMethods(getChainedContext(contextPrefix,this.name)) FOR this.panelDef.panel-»
«ENDDEFINE»

«DEFINE resetTableMethods(String contextPrefix) FOR WidgetsPanel»
	«FOREACH this.widgets.typeSelect(Table) AS currTable»
    	«EXPAND resetTableMethod(contextPrefix) FOR currTable-»
    «ENDFOREACH»
«ENDDEFINE»



«DEFINE resetTableMethod(String contextPrefix) FOR Table»
	public static void resetClearStatus_«getWidgetName(this, contextPrefix)»(java.util.Map session) {
    	session.put("«this.name»_«getFullID(this, contextPrefix)»_clearStatus", new Boolean(true));
    }
«ENDDEFINE»

«REM»dto con solo le property delle action (parametri per spring)«ENDREM»
«DEFINE actionModelFile(GUIModel model) FOR ContentPanel»
«FILE getFullModelDTOClassFile(this,false,false,model)»
package «getDTOBaseJavaPackage(model)+getAppModuleAsPkg(this,true,false)»;

«IF hasFileUpload(this)»import java.io.File;«ENDIF»
import java.util.*;
import «getDTOBaseJavaPackage(model)».*;
«EXPAND importAllNamespaces(model) FOR model.typedefs»

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata alla Schermata [«this.name»]
 */
public class «getModelDTOClassName(this,false,false,model)» extends BaseSessionAwareDTO {

	
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«EXPAND template::struts2::model::appDataProperties::storedAppDataProperties(model, false) FOR this»
	
	////////////////////////////////////////////////////////////////////
	/// campi per widget semplici
	////////////////////////////////////////////////////////////////////
	«EXPAND template::struts2::model::widgetProperties::widgetsProperties(model, false) FOR this»
	
	////////////////////////////////////////////////////////////////////
	/// ulteriori campi comuni 
	////////////////////////////////////////////////////////////////////
	«EXPAND template::struts2::model::commonProperties::commonProperties FOR this»
}
«ENDFILE»
«ENDDEFINE»


«DEFINE actionModelFile(GUIModel model) FOR Menubar»
«FILE getFullModelDTOClassFile(null,true,false,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;
«EXPAND importAllNamespaces(model) FOR model.typedefs»

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata al Menu
 */
public class «getModelDTOClassName(null,true,false,model)» extends BaseSessionAwareDTO {

		
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«EXPAND template::struts2::model::appDataProperties::storedAppDataProperties(model) FOR this»
	

}
«ENDFILE»
«ENDDEFINE»

«DEFINE actionModelFile(GUIModel model) FOR ApplicationArea»
«FILE getFullModelDTOClassFile(null,false,true,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;
«EXPAND importAllNamespaces(model) FOR model.typedefs»

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata alla OnInit action
 */
public class «getModelDTOClassName(null,false,true,model)» extends BaseSessionAwareDTO {

	
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«IF onInitCommand!=null»
	«EXPAND template::struts2::model::appDataProperties::storedAppDataProperties(model) FOR this.onInitCommand»
	«ENDIF»
	

}
«ENDFILE»
«ENDDEFINE»

«DEFINE importAllNamespaces(GUIModel model) FOR Typedefs-»
«FOREACH namespaces.select(ns|ns.types.select(t|t.metaType==ComplexType).size >0) AS ns-»
import «getBaseJavaPackage(model)».dto.«ns.name.toLowerCase()».*;
«ENDFOREACH-»
«ENDDEFINE»