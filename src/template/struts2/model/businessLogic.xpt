«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT guigen»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»


«DEFINE springBEClasses FOR GUIModel-»
«EXPAND CPBEJavaFile(this) FOREACH (List[ContentPanel])getAllContentPanels(this).select(x|mustGenerateContentPanel((ContentPanel)x))-»

«FILE getSpringBEJavaFile()»
package «getBaseJavaPackage()».business;

import java.util.*;

import «getDTOBaseJavaPackage()».*;

import org.apache.log4j.*;
import «getBaseJavaPackage()».util.*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEImports")»

«ENDPROTECT»

public class «getSpringBEClassName()»{

	/**  */
	protected static final Logger log =							«noSonarTag("EIAS")» 
	Logger.getLogger(Constants.APPLICATION_CODE + ".business"); «noSonarTag("EIAS")»
	
    //////////////////////////////////////////////////////////////////////////////
	/// Costanti identificative degli Application Data
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH (List[ApplicationData])getAllApplicationData(this) AS currAD»
    public final static String APPDATA_«currAD.name.toUpperCase()»_CODE = "«getAppDataKey(currAD)»";
    «ENDFOREACH» 
   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi associati alla U.I.
	/// - i metodi relativi a menu e azioni di inizializzazione sono direttamente 
	///   implementati in questa classe
	/// - i metodi relativi ai singoli content panel sono delegati nei rispettivi
	///   bean
	//////////////////////////////////////////////////////////////////////////////
	«EXPAND template::struts2::model::businessLogic::springBEMethodsDelegation FOR this»
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property relative ai bean spring associati agli specifici content panel
	//////////////////////////////////////////////////////////////////////////////
	«FOREACH (List[ContentPanel])getAllContentPanels(this) AS currCP-»
	
	private «getSpringCPBEFQN(currCP)» _«getSpringCPBEClassName(currCP)» = null;
	
	public void set«getSpringCPBEClassName(currCP)»(«getSpringCPBEFQN(currCP)» bean){
		_«getSpringCPBEClassName(currCP)» = bean;
	}
	
	public «getSpringCPBEFQN(currCP)» get«getSpringCPBEClassName(currCP)»(){
		return _«getSpringCPBEClassName(currCP)»;
	}
	«ENDFOREACH-»
	
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»

«FILE getSpringBEExcJavaFile()»package «getBaseJavaPackage()».business;

/**
 * Eccezione rilanciata dallo strato spring nel caso in cui la condizione di 
 * errore non sia gestita attraverso un outcome_code e corrispondenti messaggi.
 * Serve per gestire situazioni non recuperabili o impreviste
 */
public class «getSpringBEExcClassName()» extends Exception {
	public «getSpringBEExcClassName()»(String msg, Exception nested) {
		super(msg, nested);
	}
}
«ENDFILE»
«ENDDEFINE»


«REM»bean spring associato alla logica del singolo pannello«ENDREM»
«DEFINE CPBEJavaFile(GUIModel model) FOR ContentPanel»
«FILE getSpringCPBEJavaFile(model,this)»
package «getBaseJavaPackage(model)».business«getAppModuleAsPkg(this,true,false)»;

import java.util.*;

import «getDTOBaseJavaPackage(model)».*;
«EXPAND template::struts2::model::modelJavaFiles::importAllNamespaces(model) FOR model.typedefs»

import org.apache.log4j.*;
import «getBaseJavaPackage(model)».util.*;
import «getBaseJavaPackage(model)».business.*;
«IF hasGisMap()»
import «getBaseJavaPackage(model)».presentation.uiutils.GreaseDTOMapper;
«ENDIF»
«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("CP"+name+"SpringBEImports")»

«ENDPROTECT»

public class «getSpringCPBEClassName()»{

	/**  */
	protected static final Logger log =								«noSonarTag("EIAS")» 
		Logger.getLogger(Constants.APPLICATION_CODE + ".business"); «noSonarTag("EIAS")»
	
    //////////////////////////////////////////////////////////////////////////////
	/// Costanti identificative degli Application Data
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH this.appData AS currAD»
    public final static String APPDATA_«currAD.name.toUpperCase()»_CODE = "«getAppDataKey(currAD)»";
    «ENDFOREACH» 
   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi associati alla U.I.
	//////////////////////////////////////////////////////////////////////////////
	
	// nome del content panel associato al bean
	public final static String CPNAME = "«name»"; 
	
	«EXPAND template::struts2::model::tabSetUtils::tabSetUtils(model) FOR this-»
	
	«EXPAND template::struts2::model::businessLogic::springBEMethods(model) FOR this»
	
	«REM»[DM] gestione del reset delle tabelle«ENDREM»
	«EXPAND resetTableMethods FOR this»
	
	«IF hasGisMap()»
	//*********************bean di iniezione delle mappe
	«LET (List[MapView])getMapsInContentPanel() AS maps-»
	«FOREACH maps AS map-»
	private GreaseDTOMapper mapAdapter«map.mapId.toFirstUpper()»;

	public void setMapAdapter«map.mapId.toFirstUpper()»(GreaseDTOMapper mapAdapter«map.mapId.toFirstUpper()») {
		this.mapAdapter«map.mapId.toFirstUpper()» = mapAdapter«map.mapId.toFirstUpper()»;
	}
	«ENDFOREACH»
	«ENDLET»
	«ENDIF»
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(""+this.name+"SpringBEProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»
«ENDDEFINE»

«REM»[DM] metodi statici per il reset delle tabelle (non bello... ma così è...)«ENDREM»
«DEFINE resetTableMethods FOR ContentPanel»
    //////////////////////////////////////////////////////////////////////////////
	/// Metodi statici per il reset delle tabelle
	//////////////////////////////////////////////////////////////////////////////
	
	«EXPAND resetTableMethods(this,"") FOR this.panels»
	  
«ENDDEFINE»

«REM»implementazione di default per i casi non da gestire«ENDREM»
«DEFINE resetTableMethods(ContentPanel cp, String contextPrefix) FOR Panel»
«ENDDEFINE»

«DEFINE resetTableMethods(ContentPanel cp, String contextPrefix) FOR FormPanel»
	«EXPAND resetTableMethods(cp, contextPrefix) FOREACH this.subpanels-»
«ENDDEFINE»

«DEFINE resetTableMethods(ContentPanel cp, String contextPrefix) FOR MultiPanel»
	«EXPAND resetTableMethods(cp, contextPrefix) FOREACH this.panels-»
«ENDDEFINE»

«DEFINE resetTableMethods(ContentPanel cp, String contextPrefix) FOR PanelDefUse»
	«EXPAND resetTableMethods(cp, getChainedContext(contextPrefix,this.name)) FOR this.panelDef.panel-»
«ENDDEFINE»

«DEFINE resetTableMethods(ContentPanel cp, String contextPrefix) FOR WidgetsPanel»
	«FOREACH this.widgets.typeSelect(Table) AS currTable»
    	«EXPAND resetTableMethod(cp, contextPrefix) FOR currTable-»
    «ENDFOREACH»
«ENDDEFINE»



«DEFINE resetTableMethod(ContentPanel cp, String contextPrefix) FOR Table»
	public static void resetClearStatus_«getWidgetName(this, contextPrefix)»(java.util.Map session) {
    	session.put("«cp.name»_«getFullID(this, contextPrefix)»_clearStatus", Boolean.TRUE);
    }
«ENDDEFINE»


«REM»inserisce i metodi della classe BEFacade«ENDREM»
«DEFINE springBEMethodsDelegation FOR GUIModel-»
	«FOREACH (List[ContentPanel])getAllContentPanels(this) AS currCP-»
		«REM»handlers dei widget«ENDREM»
		«EXPAND springBEMethodDelegation(this) FOR currCP-»
	«ENDFOREACH-»
	«FOREACH (List[Menu])getAllEventSourceMenus(this.structure.appWindow.appArea.menubar) AS currESM-»
		«FOREACH getAllExecActionsForEventHandler(currESM.eventHandler) AS currAct-»
			«EXPAND springBEMethod(this,"Menu", null, "", null) FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDFOREACH-»
	«LET this.structure.appWindow.appArea.onInitCommand AS onInitAct-»
	«IF onInitAct != null-»
		«FOREACH getAllExecActionsRecursive(this.structure.appWindow.appArea.onInitCommand) AS currAct-»
			«EXPAND springBEMethod(this,"Home", null, "", null) FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model) FOR ContentPanel-»
	«REM»handler dei widget«ENDREM»
	«EXPAND springBEMethodDelegation(model, this, "") FOR this.panels»
	«REM»handler dei dialogs«ENDREM»
	«EXPAND springBEMethodDelegation(model, this, "") FOREACH this.dialogs»
	«REM»handlers dei refresh command«ENDREM»
	«IF this.onRefreshCommand!=null»
		«FOREACH getAllExecActionsRecursive(this.onRefreshCommand) AS currAct-»
			«EXPAND springBEMethodDelegation(model,this, "") FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDIF»
	«IF this.cpCommands!=null»
		«IF !this.cpCommands.commands.isEmpty»
			«FOREACH this.cpCommands.commands AS cpCommand»
				«FOREACH getAllExecActionsRecursive(cpCommand.command) AS currAct-»
					«EXPAND springBEMethodDelegation(model,this, "") FOR (ExecCommand)currAct-»
				«ENDFOREACH-»
			«ENDFOREACH»
		«ENDIF»
	«ENDIF»
	
	
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR Panel-»
«ENDDEFINE»


«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR FormPanel-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH subpanels-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR WidgetsPanel-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH widgets-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR MenuPanel-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH widgets-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR CommandPanel-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH widgets-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR DialogPanel-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOR commands-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR MultiPanel-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH panels-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR TabSetPanel-»
	«IF switcher!=null-»
		«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH switcher.eventHandlers-»
	«ENDIF-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH panels-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR WizardPanel-»
	«IF switcher!=null-»
		«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH switcher.eventHandlers-»
	«ENDIF-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH panels-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR PanelDefUse-»
	«EXPAND springBEMethodDelegation(model,cp, getChainedContext(contextPrefix,name)) FOR panelDef.panel-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR Widget-»
	«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH eventHandlers-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR EventHandler-»
	«LET (List[ExecCommand])getAllExecActionsForEventHandler() AS allExec»
		«EXPAND springBEMethodDelegation(model,cp, contextPrefix) FOREACH allExec-»
	«ENDLET»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp, String contextPrefix) FOR ExecCommand»
	////////////////////////////////////////////////////////////////////////////////////
			
	public ExecResults «getFullExecCmdMethodName(this.methodName, contextPrefix)» (
	«IF cp != null»
		«getModelDTOFQN(cp, false, false, model)» theModel
	«ELSEIF isInMenuBranch(this)»
		«getModelDTOFQN(null, true, false, model)» theModel
	«ELSE»
		«getModelDTOFQN(null, false, true, model)» theModel
	«ENDIF»
			
	)
	throws BEException
	{
	    return get«getSpringCPBEClassName(cp)»().«getFullExecCmdMethodName(this.methodName, contextPrefix)»(theModel);
	}
	
«ENDDEFINE»


«REM»#############################«ENDREM»

«DEFINE springBEMethods(GUIModel model) FOR ContentPanel-»
	«REM»handler dei widget«ENDREM»
	«EXPAND springBEMethod(model, "CP"+this.name, this, "", null) FOR this.panels»
	«REM»handler dei dialogs«ENDREM»
	«EXPAND springBEMethod(model, "CP"+this.name, this, "", null) FOREACH this.dialogs»
	«REM»handlers dei refresh command«ENDREM»
	«IF this.onRefreshCommand!=null»
		«FOREACH getAllExecActionsRecursive(this.onRefreshCommand) AS currAct-»
			«EXPAND springBEMethod(model,"CP"+this.name,this, "", null) FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDIF»
	
	«IF this.cpCommands!=null»
		«IF !this.cpCommands.commands.isEmpty»
			«FOREACH this.cpCommands.commands AS cpCommand»
				«FOREACH getAllExecActionsRecursive(cpCommand.command) AS currAct-»
					«EXPAND springBEMethod(model,"CP"+this.name,this, "", null) FOR (ExecCommand)currAct-»
				«ENDFOREACH-»
			«ENDFOREACH»
		«ENDIF»
	«ENDIF»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Panel-»
«ENDDEFINE»


«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR FormPanel-»
	«EXPAND springBEMethod(model, contextID, cp, contextPrefix, pduc) FOREACH subpanels-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR WidgetsPanel-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MenuPanel-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR CommandPanel-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR DialogPanel-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOR commands-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MultiPanel-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH panels-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR TabSetPanel-»
	«IF switcher!=null-»
		«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH switcher.eventHandlers-»
	«ENDIF-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH panels-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR WizardPanel-»
	«IF switcher!=null-»
		«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH switcher.eventHandlers-»
	«ENDIF-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH panels-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR PanelDefUse-»
	«EXPAND springBEMethod(model,contextID, cp, getChainedContext(contextPrefix, name), this.config) FOR panelDef.panel-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Widget-»
	«EXPAND springBEMethod(model,contextID, cp, contextPrefix, pduc) FOREACH eventHandlers-»
«ENDDEFINE»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR EventHandler-»
	«LET (List[ExecCommand])getAllExecActionsForEventHandler() AS allExec»
		«EXPAND springBEMethod(model, contextID, cp, contextPrefix, pduc) FOREACH allExec-»
	«ENDLET»
«ENDDEFINE»




«REM» 
«DEFINE springBEMethods(GUIModel model) FOR ContentPanel»
	«IF this.onRefreshCommand!=null»
		«FOREACH getAllExecActionsRecursive(this.onRefreshCommand) AS currAct-»
			«EXPAND springBEMethod(model,"CP"+this.name) FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDIF»
	«FOREACH getAllEventSourceWidgets(this) AS currESW-»
		«FOREACH ((Widget)currESW).eventHandlers AS currEH-»
			«FOREACH getAllExecActionsForEventHandler(currEH) AS currAct-»
				«EXPAND springBEMethod(model,"CP"+this.name) FOR (ExecCommand)currAct-»
			«ENDFOREACH-»
		«ENDFOREACH-»
	«ENDFOREACH-»
«ENDDEFNE»
«ENDREM»

«DEFINE springBEMethod(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand»
	////////////////////////////////////////////////////////////////////////////////////
	
	«LET cp AS parentCP-»		
	public ExecResults «getFullExecCmdMethodName(this.methodName, contextPrefix)» (
	«IF parentCP != null»
		«getModelDTOFQN(parentCP, false, false, model)» theModel
	«ELSEIF isInMenuBranch(this)»
		«getModelDTOFQN(null, true, false, model)» theModel
	«ELSE»
		«getModelDTOFQN(null, false, true, model)» theModel
	«ENDIF»
			
	)
	throws BEException
	{
	    /// definizione costanti di outcome
	    «FOREACH this.results AS currRes-»
		final String «getFullExecCmdMethodName(this.methodName, contextPrefix).toUpperCase()»_OUTCOME_CODE__«currRes.resultCode.toUpperCase()» = «noSonarTag("EIAS")»
			 "«currRes.resultCode»"; «noSonarTag("EIAS")»
		«ENDFOREACH-»
	    ///
		try{
			«EXPAND springBEMethodCoreDispatcher(model, contextID, cp, contextPrefix, pduc) FOR this-»
		}
		catch(Exception e){
		  log.error("[«getSpringBEClassName()»::«getFullExecCmdMethodName(this.methodName, contextPrefix)»] Errore occorso nell'esecuzione del metodo:"+e,e);
		  throw new BEException("Errore occorso nell'esecuzione del metodo:"+e,e);
		}
	}
	
	«ENDLET-»
«ENDDEFINE»

«REM»implementazione effettiva sovrascrivibile«ENDREM»
«DEFINE springBEMethodCoreDispatcher(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«IF this.customTemplate==null-»
		«EXPAND springBEMethodCore_CRT_default(model, contextID, cp, contextPrefix, pduc) FOR this-»
	«ELSE-»
		«LET (CustomCartridge)(customTemplate.eContainer) AS crt-»
		«IF crt.crtID==CustomCartridgeID::PLATF_1-»
			«EXPAND springBEMethodCore_CRT_PLATF1(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::PLATF_2-»
			«EXPAND springBEMethodCore_CRT_PLATF2(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::PLATF_3-»
			«EXPAND springBEMethodCore_CRT_PLATF3(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::PLATF_4-»
			«EXPAND springBEMethodCore_CRT_PLATF4(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::PLATF_5-»
			«EXPAND springBEMethodCore_CRT_PLATF5(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::TECH_1-»
			«EXPAND springBEMethodCore_CRT_TECH1(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::TECH_2-»
			«EXPAND springBEMethodCore_CRT_TECH2(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::TECH_3-»
			«EXPAND springBEMethodCore_CRT_TECH3(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::TECH_4-»
			«EXPAND springBEMethodCore_CRT_TECH4(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::TECH_5-»
			«EXPAND springBEMethodCore_CRT_TECH5(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::CUSTOM_1-»
			«EXPAND springBEMethodCore_CRT_CUSTOM1(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::CUSTOM_2-»
			«EXPAND springBEMethodCore_CRT_CUSTOM2(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSEIF crt.crtID==CustomCartridgeID::CUSTOM_3-»
			«EXPAND springBEMethodCore_CRT_CUSTOM3(model, contextID, cp, contextPrefix, pduc) FOR this-»
		«ELSE-»
			«ERROR "cartuccia "+crt.crtID+" non supportata"-»			
		«ENDIF-»
		«ENDLET-»
	«ENDIF-»
«ENDDEFINE»

«REM»implementazione di default«ENDREM»
«DEFINE springBEMethodCore_CRT_default(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
			ExecResults result = new ExecResults();
			«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(contextID+"springBE_"+getFullExecCmdMethodName(this.methodName, contextPrefix)+"_code")»
			// inserire qui la logica applicativa da eseguire:
			
			// impostazione del result code 
			result.setResultCode(«getFullExecCmdMethodName(this.methodName, contextPrefix).toUpperCase()»_OUTCOME_CODE__«this.results.first().resultCode.toUpperCase()»);
			
			// modifica degli attributi del model (che verranno propagati allo strato
			// di presentation). si puo' agire anche direttamente sull'attributo "session".
		
			result.setModel(theModel);
			return result;
			«ENDPROTECT»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_PLATF1(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom PLATF1 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_PLATF2(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom PLATF2 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_PLATF3(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom PLATF3 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_PLATF4(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom PLATF4 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_PLATF5(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom PLATF5 non configurata"»
«ENDDEFINE»


«DEFINE springBEMethodCore_CRT_TECH1(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom TECH1 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_TECH2(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom TECH2 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_TECH3(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom TECH3 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_TECH4(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom TECH4 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_TECH5(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom TECH5 non configurata"»
«ENDDEFINE»


«DEFINE springBEMethodCore_CRT_CUSTOM1(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom CUSTOM1 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_CUSTOM2(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom CUSTOM2 non configurata"»
«ENDDEFINE»

«DEFINE springBEMethodCore_CRT_CUSTOM3(GUIModel model, String contextID, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ExecCommand-»
	«ERROR "Errore AOP: cartuccia di template custom CUSTOM3 non configurata"»
«ENDDEFINE»