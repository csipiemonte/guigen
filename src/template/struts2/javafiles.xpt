«IMPORT guigen»

«IMPORT template::struts2::actionImplJavaFiles»
«IMPORT template::struts2::security»
«IMPORT template::struts2::typeConversion»
«IMPORT template::struts2::eventHandlers»
«IMPORT template::struts2::interceptor»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»


«DEFINE javaFiles(boolean skip_component_dir_creation) FOR GUIModel»
	«EXPAND applicationConstantsJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND template::struts2::controller::baseAction::struts2BaseActionJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND template::struts2::controller::menuAction::struts2MenuJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND template::struts2::controller::homeAction::struts2HomeJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND template::struts2::controller::logoutAction::struts2LogoutJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND sessionListenerJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND template::struts2::controller::actionCommands::actionImplClasses FOR this»
	«EXPAND template::struts2::model::modelJavaFiles::modelClasses FOR this»
	«EXPAND template::struts2::model::businessLogic::springBEClasses FOR this»
	«EXPAND template::struts2::validation::strutsCustomValidatorsJavaFiles(skip_component_dir_creation) FOR this»
	«EXPAND template::struts2::view::tableDecorator::strutsCustomDecoratorsJavaFiles(skip_component_dir_creation) FOR this»
	«EXPAND security::securityJavaFiles(skip_component_dir_creation) FOR this»
	«EXPAND typeConversion::conversionClassesFiles(skip_component_dir_creation) FOR this»
	«EXPAND typeConversion::decoratorsClassesFiles(skip_component_dir_creation) FOR this»
	«EXPAND typeConversion::comparatorsClassesFiles(skip_component_dir_creation) FOR this»
	«EXPAND interceptor::interceptorsClassesFiles(skip_component_dir_creation) FOR this»
	«IF targetPlatform.enableFatClient»
		«EXPAND uiutils::uiutilsClassesFiles(skip_component_dir_creation) FOR this»
	«ENDIF»
	«REM»«EXPAND viewFragmentResultJavaFile FOR this»«ENDREM»
«ENDDEFINE»

«DEFINE sessionListenerJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getBaseJavaSrcDir(skip_component_dir_creation) + "/util/SessionListener.java" »package «getBaseJavaPackage(this)».util;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("seesionlistener.extraimports")»
«ENDPROTECT»

public class SessionListener implements HttpSessionListener {

	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("seesionlistener.attributes")»
	«ENDPROTECT»

  public SessionListener() {
 	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("seesionlistener.cntr")»
	«ENDPROTECT»
  }

  public void sessionCreated(HttpSessionEvent se) {
    «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("sessionlistener.created")»
	«ENDPROTECT»
  }

  public void sessionDestroyed(HttpSessionEvent se) {
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("sessionlistener.destroyed")»
	«ENDPROTECT»
  }
}

«ENDFILE»
«ENDDEFINE»

«REM»
==========================================================================================================================
STRUTS2 BASE FILES
===========================================================================================================================
«ENDREM»

«REM»Crea una Base action«ENDREM»
«DEFINE applicationConstantsJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getBaseJavaSrcDir(this, skip_component_dir_creation) + "/util/Constants.java" »package «getBaseJavaPackage(this)».util;

/**
 * <p>Classe delle costanti applicative.</p>
 *
 * @author GuiGen
 */
public final class Constants
{
    /**
     * identificativo dell'applicativo.
     */
    public static final String APPLICATION_CODE = "«codComponente»";
    
    «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("Constants")»
    // Add here your constants
    «ENDPROTECT»
}

«ENDFILE»
«ENDDEFINE»




«REM»
«DEFINE viewFragmentResultJavaFile FOR GUIModel»
«FILE getViewFragResultJavaFile(true)»package «getResultJavaPackage()»;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.PageContext;


import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.dispatcher.ServletDispatcherResult;
import org.apache.struts2.views.util.UrlHelper;

import sun.security.action.GetLongAction;

import com.opensymphony.xwork2.ActionInvocation;



public class «getViewFragResultClassName()» extends ServletDispatcherResult{
	public class DummyServletOutputStream extends ServletOutputStream{

		@Override
		public void write(int b) throws IOException {
			System.out.print((char)b);
			
		}
		
	}
	
	public class DummyResponse implements ServletResponse{

		public void flushBuffer() throws IOException {
			// TODO Auto-generated method stub
			
		}

		public int getBufferSize() {

			return bufferSize;
		}

		String characterEncoding=null;
		
		public String getCharacterEncoding() {

			return characterEncoding;
		}

		public String getContentType() {

			return contentType;
		}

		public Locale getLocale() {
			
			return locale;
		}

		public ServletOutputStream getOutputStream() throws IOException {
		 System.out.println("gertOutputStream");
			return new DummyServletOutputStream();
		}

		public PrintWriter getWriter() throws IOException {
			System.out.println("getWriter");
			return new PrintWriter(System.out);
		}

		public boolean isCommitted() {
			// TODO Auto-generated method stub
			return false;
		}

		public void reset() {
			// TODO Auto-generated method stub
			
		}

		public void resetBuffer() {
			// TODO Auto-generated method stub
			
		}

		int bufferSize = 1024;
		
		public void setBufferSize(int arg0) {
			bufferSize=arg0;
			
		}

		public void setCharacterEncoding(String arg0) {
			characterEncoding=arg0;
			
		}

		int contentLength;
		public void setContentLength(int arg0) {
			contentLength=arg0;
			
		}

		String contentType;
		public void setContentType(String arg0) {
			contentType=arg0;
			
		}

		Locale locale;
		public void setLocale(Locale arg0) {
			locale=arg0;
			
		}
    	
    }
	public static Logger LOG = Logger.getLogger(ViewFragmentResult.class);

	public «getViewFragResultClassName()»() {
		super();
	}

	public «getViewFragResultClassName()»(String location) {
		super(location);
	}

	@Override
	public void doExecute(String finalLocation, ActionInvocation invocation) throws Exception {
        if (LOG.isDebugEnabled()) {
            LOG.debug("Forwarding to location " + finalLocation);
        }

        PageContext pageContext = ServletActionContext.getPageContext();

        if (pageContext != null) {
            pageContext.include(finalLocation);
        } else {
            HttpServletRequest request = ServletActionContext.getRequest();
            HttpServletResponse response = ServletActionContext.getResponse();
            RequestDispatcher dispatcher = request.getRequestDispatcher(finalLocation);

            //add parameters passed on the location to #parameters
            // see WW-2120
            if (invocation != null && finalLocation != null && finalLocation.length() > 0
                    && finalLocation.indexOf("?") > 0) {
                String queryString = finalLocation.substring(finalLocation.indexOf("?") + 1);
                Map parameters = (Map) invocation.getInvocationContext().getContextMap().get("parameters");
                Map queryParams = UrlHelper.parseQueryString(queryString);
                if (queryParams != null && !queryParams.isEmpty())
                    parameters.putAll(queryParams);
            }

            // if the view doesn't exist, let's do a 404
            if (dispatcher == null) {
                response.sendError(404, "result '" + finalLocation + "' not found");

                return;
            }

            // If we're included, then include the view
            // Otherwise do forward
            // This allow the page to, for example, set content type
            if (!response.isCommitted() && (request.getAttribute("javax.servlet.include.servlet_path") == null)) {
                request.setAttribute("struts.view_uri", finalLocation);
                request.setAttribute("struts.request_uri", request.getRequestURI());

                ViewFragmentResult.DummyResponse dr  = new  ViewFragmentResult.DummyResponse();
                dr.setBufferSize(response.getBufferSize());
                dr.setCharacterEncoding(response.getCharacterEncoding());
                dr.setContentType(response.getContentType());
                dr.setLocale(response.getLocale());
                
                response.getWriter().write(getLastFinalLocation());
                dr.getWriter().write(getLastFinalLocation());
                System.out.println("\n\nforward:"+getLastFinalLocation());
                dispatcher.forward(request, dr);
            } else {
            	ViewFragmentResult.DummyResponse dr  = new  ViewFragmentResult.DummyResponse();
                dr.setBufferSize(response.getBufferSize());
                dr.setCharacterEncoding(response.getCharacterEncoding());
                dr.setContentType(response.getContentType());
                dr.setLocale(response.getLocale());
                
            	response.getWriter().write(getLastFinalLocation());
            	System.out.println("\n\ninclude:"+getLastFinalLocation());
                dispatcher.include(request, dr);
            }
        }
        
        
    }


}

«ENDFILE»

«ENDDEFINE»
«ENDREM»