«IMPORT guigen»

«IMPORT template::struts2::actionImplJavaFiles»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«DEFINE javaFiles(boolean skip_component_dir_creation) FOR GUIModel»
	«EXPAND applicationConstantsJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND struts2BaseActionJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND struts2MenuJavaFile(skip_component_dir_creation) FOR this»
	«EXPAND template::struts2::actionImplJavaFiles::actionImplClasses FOR this»
	«EXPAND template::struts2::modelJavaFiles::modelClasses FOR this»
«ENDDEFINE»


«REM»Crea una Base action«ENDREM»
«DEFINE applicationConstantsJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getBaseJavaSrcDir(this, skip_component_dir_creation) + "/util/Constants.java" »package «getBaseJavaPackage(this)».util;

/**
 * <p>Classe delle costanti applicative.</p>
 *
 * @author GuiGen
 */
public final class Constants
{
    /**
     * identificativo dell'applicativo.
     */
    public static final String APPLICATION_CODE = "«codComponente»";
    
    «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("Constants")»
    // Add here your constants
    «ENDPROTECT»
}

«ENDFILE»
«ENDDEFINE»


«REM»
Genera una Base Action Struts2 che contiene gli elementi comuni all'applicazione.
Tutte le altre Action dell'applicazione dovranno ereditare da questa
in modo da ottenere le parti comuni, e dovranno implementare in proprio
le funzionalità specifiche della pagina.
TODO: implementare se necessario
«ENDREM»
«DEFINE struts2BaseActionJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getStrutsBaseActionJavaFile(this, skip_component_dir_creation)»package «getPresentationJavaPackage(this)»;

import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.struts2.interceptor.SessionAware;

import com.opensymphony.xwork2.ActionSupport;

import «getBaseJavaPackage(this)».util.*;

/**
 * Base Action che contiene gli elementi comuni all'applicazione.
 * Tutte le altre Action dell'applicazione dovranno ereditare da questa
 * in modo da ottenere le parti comuni, e dovranno implementare in proprio
 * le funzionalit&agrave; specifiche della pagina.
 * <p/>
 * La classe eredita da {@link com.opensymphony.xwork2.ActionSupport} il
 * metodo {@link com.opensymphony.xwork2.ActionSupport#execute()}, 
 * che consiste in una default implementation che non fa altro che 
 * ritornare "success". Questa implementazione pu&ograve; essere usata
 * quando si ha bisogno di visualizzare una pagina e non si vuole creare
 * una Action ad hoc.
 * 
 * @author GuiGen
 */
public class «getStrutsBaseActionClassName(this)» extends ActionSupport implements SessionAware {

	/**  */
	protected static Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".presentation");

	/**  */
	protected Map session;


	public void setSession(Map session) {
		this.session = session;
	}
	public Map getSession() {
		return this.session;
	}


	// TODO: add here other stuff if needed
	public static boolean isWidgetVisible(String panelName, String widgetName, javax.servlet.http.HttpSession session){
		Map<String, Boolean> panelStatus = (Map<String, Boolean>)session.getAttribute(panelName);
		if (panelStatus!=null){
			Boolean status = panelStatus.get(widgetName+"_visible");
			if (status == null || status.equals(Boolean.TRUE))
				return true;
			else
				return false;
		}
		else
			return true; // no info -> visibile
	}

	public static boolean isWidgetEnabled(String panelName, String widgetName, javax.servlet.http.HttpSession session){
		Map<String, Boolean> panelStatus = (Map<String, Boolean>)session.getAttribute(panelName);
		if (panelStatus!=null){
			Boolean status = panelStatus.get(widgetName+"_enabled");
			if (status == null || status.equals(Boolean.TRUE))
				return true;
			else
				return false;
		}
		else
			return true; // no info -> abilitato
	}
}
«ENDFILE»
«ENDDEFINE»


«REM»
Genera una Action Struts2 per mappare il menu.
TODO: Vedere se è necessario estendere la BaseAction.
«ENDREM»
«DEFINE struts2MenuJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getStrutsMenuJavaFile(this, skip_component_dir_creation)»package «getPresentationJavaPackage(this)»;

/**
 * «getStrutsMenuClassName(this)» Action Class.
 *
 * @author GuiGen
 */
public class «getStrutsMenuClassName(this)» extends «getStrutsBaseActionClassName(this)» {

	/**
	 *
	 */
	public String execute() throws Exception {
		return SUCCESS;
	}

	«FOREACH this.structure.appWindow.appArea.menubar.topLevelMenu AS tlmenu»
	«FOREACH tlmenu.item AS currMenuItem»
	«IF currMenuItem.eventHandler.eventType == EventTypes::CLICKED»
	«LET currMenuItem.eventHandler.action AS currAction»
	/**
	 * Jump to «((JumpAction)currAction).jumpTo.name» Content Panel.
	 * @return SUCCESS result.
	 */
	public String goTo«currMenuItem.name.toFirstUpper()»() {
		return SUCCESS;
	}

	«ENDLET»
	«ENDIF»
	«ENDFOREACH»
	«ENDFOREACH»

}
«ENDFILE»
«ENDDEFINE»


«REM»Mappa un ContentPanel con una Action Struts«ENDREM»
«DEFINE actionJavaFile(GUIModel model, boolean skip_component_dir_creation) FOR ContentPanel»
«FILE getStrutsActionJavaFile(this, model, skip_component_dir_creation)»package «getPresentationJavaPackage(model)»;

import java.util.*;
import «getDTOBaseJavaPackage(model)».*;
/**
 * «getStrutsActionClassName(this)» Action Class.
 *
 * @author GuiGen
 */
public class «getStrutsActionClassName(this)» extends «getStrutsBaseActionClassName(model)» {


    «EXPAND actionImplJavaFiles::buttonFlagsInAction FOR this»
    «EXPAND actionImplJavaFiles::widgetsProperties(model) FOR this»
	«EXPAND actionImplJavaFiles::storedAppDataProperties(model) FOR this»

	/**
	 *
	 * @return Il risultato delle azioni, SUCCESS altrimenti.
	 */
	public String execute() throws Exception {
	    dumpModel(true); // TODO mettere solo se log=debug
	    «LET getAllEventSourceWidgets() AS allEventSources»
		«LET allEventSources.select(w|((Widget)w).eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED).size>0) AS allClickSources»
		// gestione degli eventi di tipo CLICKED
		«FOREACH allClickSources AS currClickSource»
		if(_widg_«((Widget)currClickSource).name») {
			IAction action = initAction("«((Widget)currClickSource).name»","CLICKED");
			String result = action.doAction(this);
			if(result != null) {
				dumpModel(false);
				System.out.println("=====> 1 - RETURNING RESULT [" + result + "]");
				return result;
			} else {
				dumpModel(false);
				System.out.println("#####> 2 - RETURNING DEFAULT RESULT {" + SUCCESS + "}");
				return SUCCESS;
			}
		}
		«ENDFOREACH»
		«ENDLET»
		«ENDLET»
		// se arrivo qui non ci sono eventi da gestire ...
		return SUCCESS;
	}
	
	
	void dumpModel(boolean pre){
		
		System.out.println("#### DUMP del model della action "+this.getClass()+(pre?" prima dell'azione":" dopo l'azione"));
		System.out.println("[a] campi pubblici del model");
		try{
			java.beans.BeanInfo bi = java.beans.Introspector.getBeanInfo(this.getClass());
			java.beans.PropertyDescriptor[] props = bi.getPropertyDescriptors();
			for (int i = 0; i < props.length; i++) {
				java.beans.PropertyDescriptor pd = props[i];
				java.lang.reflect.Method m = pd.getReadMethod();
				if(m!=null){
					Object pval = m.invoke(this, new Object[]{});
					System.out.println(pd.getName() + ":" + pval);
				}
			}
		}
		catch(Exception e){
			System.out.println("Errore nel dump"+e);
		}
		System.out.println("[b] stato dei widget");
		Object cpWidgetStatus = session.get("«this.name»");
		System.out.println(""+cpWidgetStatus);
		System.out.println("[c] sessione");
		System.out.println(""+session);
	}
	

	«REM»Espande la struttura della InitAction«ENDREM»
    «EXPAND actionImplJavaFiles::actionStructureInit(model) FOR this»
}
«ENDFILE»
«ENDDEFINE»

