import guigen;
import ecore;
extension template::GenericExtensions;

///////////////////////////////////////////////////////////////////////////////////////////////
/// Estensioni specifiche per il framework Struts2                                           //
///////////////////////////////////////////////////////////////////////////////////////////////


String getPresentationJavaSrcDir(GUIModel model, boolean omit_root) :
	getBaseJavaSrcDir(model, omit_root) + "/presentation/" + model.codComponente + "/action";

String getPresentationJavaPackage(GUIModel model) :
	getBaseJavaPackage(model) + ".presentation." + model.codComponente + ".action";

String getPresentationMarkupDir(GUIModel model, boolean omit_root) :
	getWebSrcDir(model, omit_root) + "/jsp";
	
String getPresentationMarkupConfig() :
	"jsp";	
	
///////////////////////////////////////////////////////////////////////////////////////////////
/// Files di configurazione di Struts2

String getStrutsConfigFile(GUIModel model, boolean omit_root) :
	getWebModuleConfigDir(model, omit_root) + "/struts.xml";

String getStrutsGlobalConfigFile(GUIModel model, boolean omit_root) :
	getWebModuleConfigDir(model, omit_root) + "/struts-global.xml";

String getStrutsApplicationConfigFile(GUIModel model, boolean omit_root, String fileName) :
	getWebModuleConfigDir(model, omit_root) + "/" + fileName + ".xml";


///////////////////////////////////////////////////////////////////////////////////////////////
/// Files di configurazione di Spring

String getSpringEjbConfigurationFile(GUIModel model, boolean omit_root) :
	getEjbConfigDir(model, omit_root) + "/beanContext.xml";
	
String getSpringWebConfigurationFile(GUIModel model, boolean omit_root) :
	getWebModuleConfigDir(model, omit_root) + "/applicationContext.xml";


///////////////////////////////////////////////////////////////////////////////////////////////
/// Files JSP comuni

// Index Page (for redirection purpoose only)
String getIndexJspFile(GUIModel model, boolean omit_root) :
	getWebSrcDir(model, omit_root) + "/index.jsp";

// Home Page
String getHomePageConfig(GUIModel model) :
	getStrutsActionJspConfigName(model.structure.appWindow.appArea.contentPanels.first());

// JSP Fragments (Header, footer, ecc...)
String getJspFragmentsMarkupDir(GUIModel model, boolean omit_root) :
	getPresentationMarkupDir(model, omit_root) + "/fragments";
	
// JSP Tab (Tabbed Panels Includes)
String getJspTabsMarkupDir(GUIModel model, boolean omit_root) :
	getPresentationMarkupDir(model, omit_root) + "/tabs";

String getJspTabsConfig() :
	"/" + getPresentationMarkupConfig() + "/tabs";


///////////////////////////////////////////////////////////////////////////////////////////////
/// Classi Java comuni

String getDTOBaseJavaPackage(GUIModel model) :
	getBaseJavaPackage(model) + ".dto";

String getDTOBaseSrcDir(GUIModel model) :
	getBaseJavaSrcDir(model, true)+"/dto";

String getDTOClassName(ComplexType ct) :
	ct.name.toFirstUpper();

String getFQNDTOClassName(ComplexType ct, GUIModel model) :
	getDTOBaseJavaPackage(model)+"."+getDTOClassName(ct);
	
String getFullDTOClassFile(ComplexType ct, GUIModel model) :
	getDTOBaseSrcDir(model)+"/"+getDTOClassName(ct)+".java";	


String getModelDTOClassName(ContentPanel cp, boolean forMenu, boolean forHome, GUIModel model) :
    ( forMenu? "GlobalMenuModel":
    	(forHome? "GlobalHomeModel": cp.name.toFirstUpper()+"Model") 
    );
	
	
String getModelDTOFQN(ContentPanel cp, boolean forMenu, boolean forHome, GUIModel model) :
	getDTOBaseJavaPackage(model) + "." + getModelDTOClassName(cp, forMenu, forHome, model);

String getFullModelDTOClassFile(ContentPanel cp, boolean forMenu, boolean forHome, GUIModel model) :
	getDTOBaseSrcDir(model)+"/"+getModelDTOClassName(cp, forMenu, forHome, model)+".java";
	 
/// MENU
String getStrutsMenuClassName(GUIModel model) :
	"MenuAction";
	
String getStrutsMenuFQN(GUIModel model) :
	getPresentationJavaPackage(model) + "." + getStrutsMenuClassName(model);

String getStrutsHomeClassName(GUIModel model) :
	"HomeAction";
	
String getStrutsHomeFQN(GUIModel model) :
	getPresentationJavaPackage(model) + "." + getStrutsHomeClassName(model);
	
String getStrutsMenuJavaFile(GUIModel model, boolean omit_root) :
	getPresentationJavaSrcDir(model, omit_root) + "/" + getStrutsMenuClassName(model) + ".java";

String getStrutsHomeJavaFile(GUIModel model, boolean omit_root) :
	getPresentationJavaSrcDir(model, omit_root) + "/" + getStrutsHomeClassName(model) + ".java";

String getStrutsMenuConfigName(GUIModel model) :
	"menuAction";

/// BaseAction
String getStrutsBaseActionClassName(GUIModel model) :
	"BaseAction";

String getStrutsBaseActionFQN(GUIModel model) :
	getPresentationJavaPackage(model) + "." + getStrutsBaseActionClassName(model);

String getStrutsBaseActionJavaFile(GUIModel model, boolean omit_root) :
	getPresentationJavaSrcDir(model, omit_root) + "/" + getStrutsBaseActionClassName(model) + ".java";

/// Pattern Command Actions Classes




///////////////////////////////////////////////////////////////////////////////////////////////
/// Action Struts2

String getStrutsActionClassName(ContentPanel panel) :
	panel.name.toFirstUpper() + "Action";
	
String getStrutsActionJspName(ContentPanel panel) :
	panel.name;

String getStrutsActionConfigName(ContentPanel panel) :
	panel.name;

String getStrutsActionFQN(ContentPanel panel, GUIModel model) :
	getPresentationJavaPackage(model) + "." + getStrutsActionClassName(panel);
	
String getStrutsActionJavaFile(ContentPanel panel, GUIModel model, boolean omit_root) :
	getPresentationJavaSrcDir(model, omit_root) + "/" + getStrutsActionClassName(panel) + ".java";
	
String getStrutsActionJspFile(ContentPanel panel, GUIModel model, boolean omit_root) :
	getPresentationMarkupDir(model, omit_root) + "/" + getStrutsActionJspName(panel) + ".jsp";

String getStrutsActionJspConfigName(ContentPanel panel) :
	"/" + getPresentationMarkupConfig() + "/" + getStrutsActionJspName(panel) + ".jsp";



///////////////////////////////////////////////////////////////////////////////////////////////
// Classi spring

String getSpringBEClassName() :
	"BackEndFacade";

String getSpringBEFQN(GUIModel model) :
	getBaseJavaPackage(model)+".business."+getSpringBEClassName();


String getSpringBEJavaFile(GUIModel model) :
	getBaseJavaSrcDir(model, true)+"/business/"+getSpringBEClassName()+".java";

///////////////////////////////////////////////////////////////////////////////////////////////
/// Type Mapping

/// mapping di tipi model -> java
String toJavaSimpleType(Type type) :
	let code = ((SimpleType)type).code :
	let nillable =  ((SimpleType)type).nillable :
	if (code == guigen::SimpleTypeCodes::INT) then
  	(nillable ? "java.lang.Integer" : "int")
	else if (code == guigen::SimpleTypeCodes::STRING) then
  	(nillable ? "java.lang.String" : "java.lang.String")
	else if (code == guigen::SimpleTypeCodes::FLOAT) then
  	(nillable ? "java.lang.Float" : "float")
  	else if (code == guigen::SimpleTypeCodes::LONG) then
  	(nillable ? "java.lang.Long" : "long")
	else if (code == guigen::SimpleTypeCodes::DOUBLE) then
  	(nillable ? "java.lang.Double" : "double")
	else if (code == guigen::SimpleTypeCodes::BOOLEAN) then
  	(nillable ? "java.lang.Boolean" : "boolean")
	else if (code == guigen::SimpleTypeCodes::DATE) then
  	(nillable ? "java.util.Date" : "java.lang.String")
  	else if (code == guigen::SimpleTypeCodes::DATETIME) then
  	(nillable ? "java.util.Date" : "java.util.Date")
  	else if (code == guigen::SimpleTypeCodes::HOURS) then
  	(nillable ? "java.util.Date" : "java.lang.String")
	else if (code == guigen::SimpleTypeCodes::BYTE) then
  	(nillable ? "byte" : "byte")
	else 
  	"???";

String toJavaType(Type type, GUIModel model) :
if (type==null) then
	"void"
else if (type.metaType==SimpleType) then
	toJavaSimpleType(type)
else if (type.metaType==ComplexType) then
      getDTOBaseJavaPackage(model)+"."+type.name.toFirstUpper() 
else 
	"java.util.ArrayList<"+toJavaType(((TypedArray)type).componentType, model)+">";

String defaultInitVal(Type type, GUIModel model) :
	if(type==null) then
	  "null"
	else if(type.metaType==SimpleType) then
	  defaultSimpleInitVal(type)
	else if(type.metaType==TypedArray) then
	  "new java.util.ArrayList<"+toJavaType(((TypedArray)type).componentType, model)+">()"
	else
	  "null";

String defaultSimpleInitVal(Type type) :
let code = ((SimpleType)type).code :
	let nillable =  ((SimpleType)type).nillable :
	if (code == guigen::SimpleTypeCodes::INT) then
  	(nillable ? "null" : "0")
	else if (code == guigen::SimpleTypeCodes::STRING) then
  	(nillable ? "null" : "null")
	else if (code == guigen::SimpleTypeCodes::FLOAT) then
  	(nillable ? "null" : "0")
  	else if (code == guigen::SimpleTypeCodes::LONG) then
  	(nillable ? "null" : "0")
	else if (code == guigen::SimpleTypeCodes::DOUBLE) then
  	(nillable ? "null" : "0")
	else if (code == guigen::SimpleTypeCodes::BOOLEAN) then
  	(nillable ? "null" : "true")
	else if (code == guigen::SimpleTypeCodes::DATE) then
  	(nillable ? "null" : "null")
  	else if (code == guigen::SimpleTypeCodes::DATETIME) then
  	(nillable ? "null" : "null")
  	else if (code == guigen::SimpleTypeCodes::HOURS) then
  	(nillable ? "null" : "null")
	else if (code == guigen::SimpleTypeCodes::BYTE) then
  	(nillable ? "0" : "0")
	else 
  	"???";



///////////////////////////////////////////////////////////////////////////////////////////////
/// PORTAL THEMES AND STYLES

String getTablePortalStyle(GUIModel model) :
	if(model.portale == guigen::PortalNames::INTRANET_RUPARPIEMONTE) then
		"class=\"righe_alternate\"  cellpadding=\"0\" cellspacing=\"0\""
	else if(model.portale == guigen::PortalNames::SISTEMA_PIEMONTE) then
		"class=\"col\" cellpadding=\"2\" cellspacing=\"2\""
	else
		"class=\"\" cellpadding=\"2\" cellspacing=\"2\"";


String getMenuItemCssSistemaPiemonte(MenuItem item, int level) :
	if (level == 1) then
		"class=\"<s:property value=\"%{#session.active_menu == 'menu_items_"+item.name+"' ? 'attivo' : ''}\" />\""
	else if (level == 2) then
		"class=\"<s:property value=\"%{#session.active_menu == 'menu_items_"+item.name+"' ? 'sottomenuOn' : ''}\" />\""
	else if (level == 3) then
		"class=\"<s:property value=\"%{#session.active_menu == 'menu_items_"+item.name+"' ? 'attivo3liv' : ''}\" />\""
	else if(level == 4) then
		"class=\"<s:property value=\"%{#session.active_menu == 'menu_items_"+item.name+"' ? 'attivo4liv' : ''}\" />\""
	else
		"";


String getMenuItemLabelSistemaPiemonte(MenuItem item, int level) :
	if (level == 1) then
		"<s:if test=\"%{#session.active_menu == 'menu_items_"+item.name+"'}\"><span class=\"menu_alto\">" + item.label + "</span></s:if>" +
		"<s:else>" + item.label + "</s:else>"
	else
		item.label;


///////////////////////////////////////////////////////////////////////////////////////////////
/// JAVA METHODS BINDING

List getAllPossibleJumps(ContentPanel cp) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllPossibleJumps(it.csi.mddtools.guigen.ContentPanel);

List getAllPossibleJumps(MenuItem mi) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllPossibleJumps(it.csi.mddtools.guigen.MenuItem);

List getAllPossibleJumps(Action a) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllPossibleJumps(it.csi.mddtools.guigen.Action);
		
List getAllEventSourceWidgets(ContentPanel cp) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllEventSourceWidgets(it.csi.mddtools.guigen.ContentPanel);
	
List getAllEventSourceMenuItems(Menubar mb) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllEventSourceMenuItems(it.csi.mddtools.guigen.Menubar);

List getAllExecActionsForEventHandler(EventHandler eh) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllExecActionsForEventHandler(it.csi.mddtools.guigen.EventHandler);

List getAllExecActionsRecursive(Action a) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllExecActionsRecursive(it.csi.mddtools.guigen.Action);

ContentPanel findParentContentPanel(Action a) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findParentContentPanel(it.csi.mddtools.guigen.Action);

String getFixedRadioButtonList(RadioButtons rb) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getFixedRadioButtonList(it.csi.mddtools.guigen.RadioButtons);

List findAllActionScopedAppDataInContentPanel(ContentPanel cp) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findAllActionScopedAppDataInContentPanel(it.csi.mddtools.guigen.ContentPanel);

List findAllActionScopedAppDataInMenubar(Menubar mb) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findAllActionScopedAppDataInMenubar(it.csi.mddtools.guigen.Menubar);

List findAllActionScopedAppData(Action a) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.findAllActionScopedAppData(it.csi.mddtools.guigen.Action);
			
String getOGNLForWidgetValue(DataWidget w) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getOGNLForWidgetValue(it.csi.mddtools.guigen.DataWidget);

String getOGNLForWidgetMultiValue(MultiDataWidget w) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getOGNLForWidgetMultiValue(it.csi.mddtools.guigen.MultiDataWidget);


// chiave dell'app data quando salvato in sessione
String getAppDataKey(ApplicationData ad) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAppDataKey(it.csi.mddtools.guigen.ApplicationData);

// nome della property associata all'appdata quando viene inserito nella action
String getAppDataPropertyName(ApplicationData ad) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAppDataPropertyName(it.csi.mddtools.guigen.ApplicationData);

// [DM] verifica se l'elemento Menu ha un solo Item o no
boolean hasUniqueMenuItem(Menu currMenu) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.hasUniqueMenuItem(it.csi.mddtools.guigen.Menu);

List getAllMenuItemRecursive(Menu m) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getAllMenuItemRecursive(it.csi.mddtools.guigen.Menu);


boolean isInMenuBranch(ExecAction ea) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.isInMenuBranch(it.csi.mddtools.guigen.ExecAction);

// [DM] restituisce il numero di colonne del layout
int getColumnsLayout(FormPanel firstLevPanel) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getColumnsLayout(it.csi.mddtools.guigen.FormPanel);

// [DM]
Panel getSubPanelByLayout(FormPanel firstLevPanel, UDLRCSpecConstants quadrante) : JAVA
	it.csi.mddtools.guigen.genutils.GenUtils.getSubPanelByLayout(it.csi.mddtools.guigen.FormPanel, it.csi.mddtools.guigen.UDLRCSpecConstants);




///////////////////////////////////////////////////////////////////////////////////////////////
/// Fake data for widgets (only when needed)                                                 //
/// TODO: remove or comment in PRODUCTION                                                    //
///////////////////////////////////////////////////////////////////////////////////////////////

String getComboboxFakeData() : JAVA
	it.csi.mddtools.guigen.genutils.GenStrutsFakeData.getComboboxFakeData();


