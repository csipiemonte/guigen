import guigen;
import ecore;
extension template::GenericExtensions;
extension template::struts2::Struts2Extensions;
extension template::struts2::neutral::Struts2ExtensionsNeutral;


///////////////////////////////////////////////////////////////////////////////////////////////
/// Estensioni specifiche per il layout SistemaPiemonte ridefinite mediante AOP              //
///////////////////////////////////////////////////////////////////////////////////////////////

around template::GenericExtensions::getPortalName() :
	"Neutral";

around template::GenericExtensions::getPortalCode() :
	"neutral";


///////////////////////////////////////////////////////////////////////////////////////////////
/// Build files 

around template::struts2::Struts2Extensions::getReminclResourceProvider(GUIModel model) :
	"";



///////////////////////////////////////////////////////////////////////////////////////////////
/// PORTAL THEMES AND STYLES

//
around template::struts2::Struts2Extensions::getStrutsThemeByPortal(GUIModel model) :
	"csi"; // definirne uno se serve

//
around template::struts2::Struts2Extensions::getTablePortalStyle(GUIModel model, Table t) :
	"class=\"dataTable\"";

//
around template::struts2::Struts2Extensions::getRadioPortalStyle(GUIModel model) :
	"cssClass=\"radio\"";

// [DM] restituisce il numero di colonne del layout
around template::struts2::Struts2Extensions::getColumnsLayout(FormPanel firstLevPanel, GUIModel model) :
	getColumnsLayoutNeutral(firstLevPanel, model);

// [DM] Restituisce lo stile del <div> per i Button
around template::struts2::Struts2Extensions::getButtonDivStyleByLayout(GUIModel model, Button b) : 
	getButtonDivStyleByLayoutNeutral(model, b);

// [DM] Restituisce lo stile dei Button
around template::struts2::Struts2Extensions::getButtonStyleByLayout(GUIModel model, Button b) :
	getButtonStyleByLayoutNeutral(model, b);

// [DM] Restituisce lo stile dei TextField
around template::struts2::Struts2Extensions::getTextFieldStyleByLayout(GUIModel model, TextField t) :
	getTextFieldStyleByLayoutNeutral(model, t);

// [DM] Restituisce lo stile dei Calendar
around template::struts2::Struts2Extensions::getCalendarStyleByLayout(GUIModel model, Calendar c) :
	"cssClass=\"calendar\"";

// [DM] Restituisce (ove necessaria) l'immagine per l'apertura dei Calendar
//      Qui non inseriamo un'immagine, ma un marcatore che possa essere utilizzato per vari scopi
around template::struts2::Struts2Extensions::getCalendarImageByLayout(GUIModel model, Calendar c) :
	"<div class=\"infoCalendar\"></div>";

// [DM] Restituisce lo stile dei FileUpload
around template::struts2::Struts2Extensions::getFileUploadStyleByLayout(GUIModel model, FileUpload f) :
	"";

// [DM] Restituisce lo stile del pulsante che gestisce l'evento di ValueChanged sulla ComboBox (Javascript disabilitato)
around template::struts2::Struts2Extensions::getComboBoxValueChangedHandlerStyle(GUIModel model) :
	"";

// [DM] Restituisce lo stile di un MsgBoxPanel
around template::struts2::Struts2Extensions::getMsgBoxPanelStyleByPortal(GUIModel model, MsgBoxPanel mbp) :
	getMsgBoxPanelStyleByPortalNeutral(model, mbp);

// [DM] Restituisce lo stile di una colonna sulla base del tipo bindato alla colonna stessa
around template::struts2::Struts2Extensions::getColumnStyle(Column col, Table t, GUIModel model) :
	getColumnStyleNeutral(col, t, model);

// [DM]  Restituisce la classe per un CheckBox
// nota: deve rimanere in Java perché viene utilizzato anche da Java
around template::struts2::Struts2Extensions::getCheckboxPortalStyle(GUIModel model) :
	getCheckboxPortalStyleNeutral(model);

// [DM] Restituisce la classe da applicare ad una cella nella CustomComponent sulla base del tipo di dato del Widget (PlainText).
//      Utilizzato per allineare a destra i dati numerici.
around template::struts2::Struts2Extensions::getCustomComponentColumnStyleByPortal(GUIModel model, PlainText w) :
	getCustomComponentColumnStyleByPortalNeutral(model, w);

// [DM] Restituisce la classe per un TextField in una Table.
// nota: deve rimanere in Java perché viene utilizzato anche da Java 
around template::struts2::Struts2Extensions::getColumnEditableTextfieldPortalStyle(GUIModel model) :
	getColumnEditableTextfieldPortalStyleNeutral(model);

// [DM] restituisce l'attributo di obbligatorietà del campo da settare nella custom Component widgetsPanelColumn
around template::struts2::Struts2Extensions::getCustomtagRequiredField(Widget w) : 
	getCustomtagRequiredFieldNeutral(w);

// [DM] Imposta l'attributo colSpan della Customtag component (nel caso sia necessario).
around template::struts2::Struts2Extensions::getCustomtagHeaderColspan(WidgetsPanel wp, Widget w) :
	getCustomtagHeaderColspanNeutral(wp, w);

// [DM] Restituisce il campo per l'editabilità di una colonna della tabella
around template::struts2::Struts2Extensions::getColumnEditableField(Column currCol, Table table, GUIModel model, String contextPrefix, PDefUseConfig pduConf, String theme) :
	getColumnEditableFieldNeutral(currCol, table, model, contextPrefix, pduConf, "csi-tableinput-loc");


///////////////////////////////////////////////////////////////////////////////////////////////
/// EVENT HANDLERS

// [DM] genera il codice che gestise l'evento change sulla combobox con JavaScript abilitato (bisogna includere il file pulsantiPadreFiglio.js)
around template::struts2::Struts2Extensions::getComboBoxValueChangedHandlerJS(ComboBox cb, ContentPanel cp, String contextPrefix) :
	if ( cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"onclick=\"onCBClick(this,'conferma" + cb.name + "','conferma','" + getStrutsActionConfigName(cp) + "!" + getHandlerMethodName(cb,cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix) + ".do')\" " + 
		"onfocus=\"inFocus(this)\" " +
		"onblur=\"lostFocus(this,'conferma" + cb.name + "','conferma','" + getStrutsActionConfigName(cp) + "!" + getHandlerMethodName(cb,cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix) + ".do')\" ";

// [DM] genera il codice che gestise l'evento change sulla combobox (con JavaScript disabilitato)
around template::struts2::Struts2Extensions::getComboBoxValueChangedHandlerNoScript(ComboBox cb, GUIModel model, String contextPrefix) :
	if ( cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"<noscript><s:submit value=\"conferma\" name=\"conferma" + cb.name + "\" id=\"conferma" + cb.name + "\" cssClass=\"" + 
			getComboBoxValueChangedHandlerStyle(model) + "\" method=\"" + getHandlerMethodName(cb,cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix) + 
			"\" /></noscript>";

// [DM] genera il codice che gestise l'evento change sui radiobuttons con JavaScript abilitato
around template::struts2::Struts2Extensions::getRadioButtonsValueChangedHandlerJS(RadioButtons rb, String contextPrefix) :
	if ( rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"onclick=\"onRBClick('" + getStrutsActionConfigName(findParentContentPanel(rb)) + "!" + getHandlerMethodName(rb,rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix) + ".do')\" ";

// [DM] genera il codice che gestise l'evento change sui radiobuttons (con JavaScript disabilitato)
around template::struts2::Struts2Extensions::getRadioButtonsValueChangedHandlerNoScript(RadioButtons rb, GUIModel model, String contextPrefix) :
	if ( rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"<noscript><s:submit value=\"conferma\" name=\"conferma" + rb.name + "\" id=\"conferma" + rb.name + "\" cssClass=\"" + 
			getComboBoxValueChangedHandlerStyle(model) + "\" method=\"" + getHandlerMethodName(rb,rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix) + 
			"\" /></noscript>";



///////////////////////////////////////////////////////////////////////////////////////////////
/// Estensioni abilitanti al Web 2.0 (ridefinite solo qui)

around template::struts2::Struts2Extensions::getFragmentId(Panel p) :
	"p_"+p.name;

around template::struts2::Struts2Extensions::startFragment(Panel p) :
	"<div id=\""+getFragmentId(p)+"\"><!-- startFragment:"+getFragmentId(p)+" -->";

around template::struts2::Struts2Extensions::endFragment(Panel p) :
	"<!-- endFragment:"+getFragmentId(p)+" --></div>";

around template::struts2::Struts2Extensions::pageIdMarker(ContentPanel cp) :
	"<!-- pageId:"+cp.name+" -->";

