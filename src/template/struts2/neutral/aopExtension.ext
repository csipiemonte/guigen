import guigen;
import ecore;
extension template::GenericExtensions;
extension template::struts2::Struts2Extensions;
extension template::struts2::neutral::Struts2ExtensionsNeutral;


///////////////////////////////////////////////////////////////////////////////////////////////
/// Estensioni specifiche per il layout Neutral ridefinite mediante AOP                      //
///////////////////////////////////////////////////////////////////////////////////////////////

around template::GenericExtensions::getPortalName() :
	"Neutral";

around template::GenericExtensions::getPortalCode() :
	"neutral";


///////////////////////////////////////////////////////////////////////////////////////////////
/// Build files 

// TODO: ridefinire mediante AOP
around template::struts2::Struts2Extensions::getReminclResourceProvider(GUIModel model) :
	"";



///////////////////////////////////////////////////////////////////////////////////////////////
/// PORTAL THEMES AND STYLES

//
around template::struts2::Struts2Extensions::getStrutsThemeByPortal(GUIModel model) :
	"csi"; // TODO: definire quello corretto

//
around template::struts2::Struts2Extensions::getTablePortalStyle(GUIModel model, Table t) :
	"class=\"col" + (t.databinding != null ? " overouttr" : "") + "\"";

//
around template::struts2::Struts2Extensions::getRadioPortalStyle(GUIModel model) :
	"cssClass=\"noBorder\"";


// [DM] Restituisce lo stile dei Calendar
around template::struts2::Struts2Extensions::getCalendarStyleByLayout(GUIModel model, Calendar c) :
	"cssClass=\"inputData calendario\"";

// [DM] Restituisce lo stile dei FileUpload
around template::struts2::Struts2Extensions::getFileUploadStyleByLayout(GUIModel model, FileUpload f) :
	"";

// [DM]  Restituisce la classe per un CheckBox
// nota: deve rimanere in Java perché viene utilizzato anche da Java
around template::struts2::Struts2Extensions::getCheckboxPortalStyle(GUIModel model) :
	getCheckboxPortalStyle(model);

	
///////////////////////////////////////////////////////////////////////////////////////////////
/// EVENT HANDLERS

// [DM] genera il codice che gestise l'evento change sulla combobox con JavaScript abilitato (bisogna includere il file pulsantiPadreFiglio.js)
around template::struts2::Struts2Extensions::getComboBoxValueChangedHandlerJS(ComboBox cb) :
	if ( cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"onclick=\"onCBClick(this,'conferma" + cb.name + "','conferma','" + getStrutsActionConfigName(findParentContentPanel(cb)) + "!" + getHandlerMethodName(cb,cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first()) + ".do')\" " + 
		"onfocus=\"inFocus(this)\" " +
		"onblur=\"lostFocus(this,'conferma" + cb.name + "','conferma','" + getStrutsActionConfigName(findParentContentPanel(cb)) + "!" + getHandlerMethodName(cb,cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first()) + ".do')\" ";

// [DM] genera il codice che gestise l'evento change sulla combobox (con JavaScript disabilitato)
around template::struts2::Struts2Extensions::getComboBoxValueChangedHandlerNoScript(ComboBox cb, GUIModel model) :
	if ( cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"<noscript><s:submit value=\"conferma\" name=\"conferma" + cb.name + "\" id=\"conferma" + cb.name + "\" cssClass=\"" + 
			getComboBoxValueChangedHandlerStyle(model) + "\" method=\"" + getHandlerMethodName(cb,cb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first()) + 
			"\" /></noscript>";

// [DM] genera il codice che gestise l'evento change sui radiobuttons con JavaScript abilitato (bisogna includere il file ??? -> al momento in javascript  cablato nella header)
around template::struts2::Struts2Extensions::getRadioButtonsValueChangedHandlerJS(RadioButtons rb) :
	if ( rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"onclick=\"onRBClick('" + getStrutsActionConfigName(findParentContentPanel(rb)) + "!" + getHandlerMethodName(rb,rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first()) + ".do')\" "; 

// [DM] genera il codice che gestise l'evento change sui radiobuttons (con JavaScript disabilitato)
around template::struts2::Struts2Extensions::getRadioButtonsValueChangedHandlerNoScript(RadioButtons rb, GUIModel model) :
	if ( rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).size==1 ) then
		"<noscript><s:submit value=\"conferma\" name=\"conferma" + rb.name + "\" id=\"conferma" + rb.name + "\" cssClass=\"" + 
			getComboBoxValueChangedHandlerStyle(model) + "\" method=\"" + getHandlerMethodName(rb,rb.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first()) + 
			"\" /></noscript>";