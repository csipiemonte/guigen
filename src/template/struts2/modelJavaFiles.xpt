«IMPORT guigen»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«DEFINE modelClasses FOR GUIModel»
«REM»tipi complessi«ENDREM»
«LET this.typedefs AS typedefs»
«IF typedefs != null»
«LET typedefs.types.typeSelect(ComplexType) AS complexType»
«EXPAND modelClass(this) FOREACH complexType»
«ENDLET»
«ENDIF»
«ENDLET»
«REM»action model«ENDREM»
«EXPAND baseActionModelfile(this) FOR this»
«LET this.structure.appWindow.appArea.contentPanels AS currCP»
«EXPAND actionModelFile(this) FOREACH currCP»
«ENDLET»
«IF this.structure.appWindow.appArea.menubar!=null»
	«EXPAND actionModelFile(this) FOR this.structure.appWindow.appArea.menubar»
«ENDIF»
«IF this.structure.appWindow.appArea.onInitAction!=null»
	«EXPAND actionModelFile(this) FOR this.structure.appWindow.appArea»
«ENDIF»
«ENDDEFINE»

«DEFINE modelClass(GUIModel model) FOR ComplexType»
«FILE getFullDTOClassFile(this,model)»
package «getDTOBaseJavaPackage(model)»;

public class «getDTOClassName(this)» implements java.io.Serializable{
«EXPAND property (model) FOREACH this.fields»

	public String toString(){
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(""+this.name+"toString")»
		/// inserire qui la logica desiderata per la rappresenatazione a stringa
		return super.toString();
		«ENDPROTECT»
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE property(GUIModel model) FOR Field»

	/// Field [«name»]
	private «toJavaType(this.type, model)» _«this.name» = «defaultInitVal(this.type, model)»;
	
	public void set«name.toFirstUpper()»(«toJavaType(this.type, model)» val) {
		_«this.name» = val;
	}
	
	public «toJavaType(this.type,model)» get«name.toFirstUpper()»() {
		return _«this.name»;
	}
«ENDDEFINE»

«DEFINE springBEClasses FOR GUIModel-»
«FILE getSpringBEJavaFile()»
package «getBaseJavaPackage()».business;

import java.util.*;
import «getPresentationJavaPackage()».*;
import «getDTOBaseJavaPackage()».*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEImports")»

«ENDPROTECT»

public class «getSpringBEClassName()»{

    //////////////////////////////////////////////////////////////////////////////
	/// Costanti identificative degli Application Data
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH this.appDataDefs.appData AS currAD»
    public final static String APPDATA_«currAD.name.toUpperCase()»_CODE = "«getAppDataKey(currAD)»";
    «ENDFOREACH» 
   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi associati alla U.I.
	//////////////////////////////////////////////////////////////////////////////
	«EXPAND springBEMethods FOR this»
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»
«ENDDEFINE»

«REM»inserisce un metodo per ogni ExecAction contenuta nel modello«ENDREM»
«DEFINE springBEMethods FOR GUIModel-»
	«FOREACH this.structure.appWindow.appArea.contentPanels AS currCP-»
		«FOREACH getAllEventSourceWidgets(currCP) AS currESW-»
			«FOREACH ((Widget)currESW).eventHandlers AS currEH-»
				«FOREACH getAllExecActionsForEventHandler(currEH) AS currAct-»
					«EXPAND springBEMethod(this) FOR (ExecAction)currAct-»
				«ENDFOREACH-»
			«ENDFOREACH-»
		«ENDFOREACH-»
	«ENDFOREACH-»
	«FOREACH getAllEventSourceMenuItems(this.structure.appWindow.appArea.menubar) AS currESM-»
		«FOREACH getAllExecActionsForEventHandler(((MenuItem)currESM).eventHandler) AS currAct-»
			«EXPAND springBEMethod(this) FOR (ExecAction)currAct-»
		«ENDFOREACH-»
	«ENDFOREACH-»
	«LET this.structure.appWindow.appArea.onInitAction AS onInitAct-»
	«IF onInitAct != null-»
		«FOREACH getAllExecActionsRecursive(this.structure.appWindow.appArea.onInitAction) AS currAct-»
			«EXPAND springBEMethod(this) FOR (ExecAction)currAct-»
		«ENDFOREACH-»
	«ENDIF-»
	«ENDLET-»
«ENDDEFINE»


«DEFINE springBEMethod(GUIModel model) FOR ExecAction»
	////////////////////////////////////////////////////////////////////////////////////
	«FOREACH this.results AS currRes-»
	public static final String «this.methodName.toUpperCase()»_OUTCOME_CODE__«currRes.resultCode.toUpperCase()» = "«currRes.resultCode»";
	«ENDFOREACH-»
	
	«LET findParentContentPanel() AS parentCP-»		
	public ExecResults «this.methodName» (
	«IF parentCP != null»
		«getModelDTOFQN(parentCP, false, false, model)» theModel
	«ELSEIF isInMenuBranch(this)»
		«getModelDTOFQN(null, true, false, model)» theModel
	«ELSE»
		«getModelDTOFQN(null, false, true, model)» theModel
	«ENDIF»
			
	){
		ExecResults result = new ExecResults();
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("springBE_"+this.methodName+"_code")»
		// inserire qui la logica applicativa da eseguire:
			
		// impostazione del result code
		result.setResultCode("«this.results.first().resultCode»");
		// modifica degli attributi del model (che verranno propagati allo strato
		// di presentation). si può agire anche direttamente sull'attributo "session".
		
		result.setModel(theModel);
		return result;
		«ENDPROTECT»
	}
	
	«ENDLET-»
«ENDDEFINE»


«DEFINE baseActionModelfile(GUIModel model) FOR GUIModel»
«FILE getDTOBaseSrcDir()+"/BaseSessionAwareDTO.java"»package «getDTOBaseJavaPackage()»;

import java.util.Map;

public abstract class BaseSessionAwareDTO implements java.io.Serializable{
	protected Map session;
	
	public void setSession(Map session){
		this.session = session;
	}
	
	public Map getSession(){
		return this.session;
	}
	
	/**
	 * dump di debug dello stato interno del DTO
	 */
	public String dump() {
		StringBuffer sb = new StringBuffer();
		sb.append(""+getClass().getName()+"{\n");
		sb.append("\telenco fields:\n");
		java.beans.BeanInfo bi;
		try {
			bi = java.beans.Introspector.getBeanInfo(this.getClass());
			java.beans.PropertyDescriptor[] pds = bi.getPropertyDescriptors();
			for (int i = 0; i < pds.length; i++) {
				java.beans.PropertyDescriptor currPD = pds[i];
				java.lang.reflect.Method currReadMethod = currPD
						.getReadMethod();
				if (currReadMethod != null) {
					try {
						Object srcVal = currReadMethod.invoke(this,
								new Object[]{});
						sb.append("\t\t" + currPD.getName() + "=" + srcVal
								+ "\n");
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (java.lang.reflect.InvocationTargetException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (java.beans.IntrospectionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		sb.append("\t\t");

		sb.append("\tsessione:\n");

		sb.append("}\n");
		return sb.toString();
	}
}
«ENDFILE»
«ENDDEFINE»


«REM»dto con solo le property delle action (parametri per spring)«ENDREM»
«DEFINE actionModelFile(GUIModel model) FOR ContentPanel»
«FILE getFullModelDTOClassFile(this,false,false,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata alla Schermata [«this.name»]
 */
public class «getModelDTOClassName(this,false,false,model)» extends BaseSessionAwareDTO {

	
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«EXPAND actionImplJavaFiles::storedAppDataProperties(model) FOR this»
	
	////////////////////////////////////////////////////////////////////
	/// campi per widget semplici
	////////////////////////////////////////////////////////////////////
	«EXPAND actionImplJavaFiles::widgetsProperties(model) FOR this»
	
	
}
«ENDFILE»
«ENDDEFINE»


«DEFINE actionModelFile(GUIModel model) FOR Menubar»
«FILE getFullModelDTOClassFile(null,true,false,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata al Menu
 */
public class «getModelDTOClassName(null,true,false,model)» extends BaseSessionAwareDTO {

		
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«EXPAND actionImplJavaFiles::storedAppDataProperties(model) FOR this»
	

}
«ENDFILE»
«ENDDEFINE»

«DEFINE actionModelFile(GUIModel model) FOR ApplicationArea»
«FILE getFullModelDTOClassFile(null,false,true,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata alla OnInit action
 */
public class «getModelDTOClassName(null,false,true,model)» extends BaseSessionAwareDTO {

	
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«IF onInitAction!=null»
	«EXPAND actionImplJavaFiles::storedAppDataProperties(model) FOR this.onInitAction»
	«ENDIF»
	

}
«ENDFILE»
«ENDDEFINE»
