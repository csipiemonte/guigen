«IMPORT guigen»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«DEFINE modelClasses FOR GUIModel»
«REM»tipi complessi«ENDREM»
«LET this.typedefs AS typedefs»
«IF typedefs != null»
«LET ((List[Type])getAllTypes(this)).typeSelect(ComplexType) AS complexType»
«EXPAND modelClass(this) FOREACH complexType»
«ENDLET»
«ENDIF»
«ENDLET»
«REM»action model«ENDREM»
«EXPAND baseActionModelfile(this) FOR this»
«LET (List[ContentPanel])getAllContentPanels(this) AS currCP»
«EXPAND actionModelFile(this) FOREACH currCP»
«ENDLET»
«IF this.structure.appWindow.appArea.menubar!=null»
	«EXPAND actionModelFile(this) FOR this.structure.appWindow.appArea.menubar»
«ENDIF»
«IF this.structure.appWindow.appArea.onInitCommand!=null»
	«EXPAND actionModelFile(this) FOR this.structure.appWindow.appArea»
«ENDIF»
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE modelClass(GUIModel model) FOR ComplexType»
«FILE getFullDTOClassFile(this,model)»
package «getDTOBaseJavaPackage(model)»;
«REM»STDMDD-159: visitor validator.«ENDREM»
«IF isValidatorAnnotationRequired(this)-»
import com.opensymphony.xwork2.validator.annotations.*;

@Validation
«ENDIF-»
public class «getDTOClassName(this)» implements java.io.Serializable {
«EXPAND property(model) FOREACH this.fields»

	public «getDTOClassName(this)»() {
	«IF this.initFields-»
		«FOREACH fields.select(f|f.type.metaType==ComplexType) AS cf-»
		«LET (ComplexType)(cf.type) AS tp»
		this.set«cf.name.toFirstUpper()»(new «tp.toJavaType(model)»());
		«ENDLET-»
		«ENDFOREACH»
		«FOREACH fields.select(f|f.type.metaType==TypedArray) AS taf-»
		«LET (TypedArray)(taf.type) AS atp»
		this.set«taf.name.toFirstUpper()»(new «atp.toJavaType(model)»());
		«ENDLET-»
		«ENDFOREACH»
	«ENDIF»
	}
	
	public String toString(){
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(""+this.name+"toString")»
		/// inserire qui la logica desiderata per la rappresenatazione a stringa
		return super.toString();
		«ENDPROTECT»
	}
}
«ENDFILE»
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE property(GUIModel model) FOR Field»

	/// Field [«name»]
	private «toJavaType(this.type, model)» _«this.name» = «defaultInitVal(this.type, model)»;
	
	«REM»STDMDD-159: visitor validator.«ENDREM»
	«getValidatorFieldAnnotationForDTO(this)»
	public void set«name.toFirstUpper()»(«toJavaType(this.type, model)» val) {
		_«this.name» = val;
	}
	
	public «toJavaType(this.type,model)» get«name.toFirstUpper()»() {
		return _«this.name»;
	}
«ENDDEFINE»


«REM»comment«ENDREM»
«DEFINE springBEClasses FOR GUIModel-»
«EXPAND CPBEJavaFile(this) FOREACH (List[ContentPanel])getAllContentPanels(this)-»

«FILE getSpringBEJavaFile()»
package «getBaseJavaPackage()».business;

import java.util.*;

import «getDTOBaseJavaPackage()».*;

import org.apache.log4j.*;
import «getBaseJavaPackage()».util.*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEImports")»

«ENDPROTECT»

public class «getSpringBEClassName()»{

	/**  */
	protected static Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".business");
	
    //////////////////////////////////////////////////////////////////////////////
	/// Costanti identificative degli Application Data
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH (List[ApplicationData])getAllApplicationData(this) AS currAD»
    public final static String APPDATA_«currAD.name.toUpperCase()»_CODE = "«getAppDataKey(currAD)»";
    «ENDFOREACH» 
   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi associati alla U.I.
	/// - i metodi relativi a menu e azioni di inizializzazione sono direttamente 
	///   implementati in questa classe
	/// - i metodi relativi ai singoli content panel sono delegati nei rispettivi
	///   bean
	//////////////////////////////////////////////////////////////////////////////
	«EXPAND springBEMethods FOR this»
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property relative ai bean spring associati agli specifici content panel
	//////////////////////////////////////////////////////////////////////////////
	«FOREACH (List[ContentPanel])getAllContentPanels(this) AS currCP-»
	
	private «getSpringCPBEClassName(currCP)» _«getSpringCPBEClassName(currCP)» = null;
	
	public void set«getSpringCPBEClassName(currCP)»(«getSpringCPBEClassName(currCP)» bean){
		_«getSpringCPBEClassName(currCP)» = bean;
	}
	
	public «getSpringCPBEClassName(currCP)» get«getSpringCPBEClassName(currCP)»(){
		return _«getSpringCPBEClassName(currCP)»;
	}
	«ENDFOREACH-»
	
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("SpringBEProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»

«FILE getSpringBEExcJavaFile()»package «getBaseJavaPackage()».business;

/**
 * Eccezione rilanciata dallo strato spring nel caso in cui la condizione di 
 * errore non sia gestita attraverso un outcome_code e corrispondenti messaggi.
 * Serve per gestire situazioni non recuperabili o impreviste
 */
public class «getSpringBEExcClassName()» extends Exception {
	public «getSpringBEExcClassName()»(String msg, Throwable nested) {
		super(msg, nested);
	}
}
«ENDFILE»
«ENDDEFINE»


«REM»bean spring associato alla logica del singolo pannello«ENDREM»
«DEFINE CPBEJavaFile(GUIModel model) FOR ContentPanel»
«FILE getSpringCPBEJavaFile(model,this)»
package «getBaseJavaPackage(model)».business;

import java.util.*;

import «getDTOBaseJavaPackage(model)».*;

import org.apache.log4j.*;
import «getBaseJavaPackage(model)».util.*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("CP"+name+"SpringBEImports")»

«ENDPROTECT»

public class «getSpringCPBEClassName()»{

	/**  */
	protected static Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".business");
	
    //////////////////////////////////////////////////////////////////////////////
	/// Costanti identificative degli Application Data
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH this.appData AS currAD»
    public final static String APPDATA_«currAD.name.toUpperCase()»_CODE = "«getAppDataKey(currAD)»";
    «ENDFOREACH» 
   

    //////////////////////////////////////////////////////////////////////////////
	/// Metodi associati alla U.I.
	//////////////////////////////////////////////////////////////////////////////
	«EXPAND springBEMethods(model) FOR this»
	
	«REM»[DM] gestione del reset delle tabelle«ENDREM»
	«IF hasTable(this)»
	«EXPAND resetTableMethods FOR this»
	«ENDIF»
	
	//////////////////////////////////////////////////////////////////////////////
	/// Property aggiuntive del bean
	//////////////////////////////////////////////////////////////////////////////
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(""+this.name+"SpringBEProperties")»
	//// inserire qui le property che si vogliono iniettare in questo bean (es. dao, proxy di pd, ...) 
«ENDPROTECT»
}

«ENDFILE»
«ENDDEFINE»


«REM»metodi per il singolo CPBE«ENDREM»
«DEFINE springBEMethods(GUIModel model) FOR ContentPanel»
	«IF this.onRefreshCommand!=null»
		«FOREACH getAllExecActionsRecursive(this.onRefreshCommand) AS currAct-»
			«EXPAND springBEMethod(model,"CP"+this.name) FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDIF»
	«FOREACH getAllEventSourceWidgets(this) AS currESW-»
		«FOREACH ((Widget)currESW).eventHandlers AS currEH-»
			«FOREACH getAllExecActionsForEventHandler(currEH) AS currAct-»
				«EXPAND springBEMethod(model,"CP"+this.name) FOR (ExecCommand)currAct-»
			«ENDFOREACH-»
		«ENDFOREACH-»
	«ENDFOREACH-»
«ENDDEFINE»

«REM»inserisce un metodo per ogni ExecAction contenuta nel modello«ENDREM»
«DEFINE springBEMethods FOR GUIModel-»
	«FOREACH (List[ContentPanel])getAllContentPanels(this) AS currCP-»
		«IF currCP.onRefreshCommand!=null»
			«FOREACH getAllExecActionsRecursive(currCP.onRefreshCommand) AS currAct-»
				«EXPAND springBEMethodDelegation(this,currCP) FOR (ExecCommand)currAct-»
			«ENDFOREACH-»
		«ENDIF»
		«FOREACH getAllEventSourceWidgets(currCP) AS currESW-»
			«FOREACH ((Widget)currESW).eventHandlers AS currEH-»
				«FOREACH getAllExecActionsForEventHandler(currEH) AS currAct-»
					«EXPAND springBEMethodDelegation(this,currCP) FOR (ExecCommand)currAct-»
				«ENDFOREACH-»
			«ENDFOREACH-»
		«ENDFOREACH-»
	«ENDFOREACH-»
	«FOREACH getAllEventSourceMenuItems(this.structure.appWindow.appArea.menubar) AS currESM-»
		«FOREACH getAllExecActionsForEventHandler(((MenuItem)currESM).eventHandler) AS currAct-»
			«EXPAND springBEMethod(this,"Menu") FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDFOREACH-»
	«LET this.structure.appWindow.appArea.onInitCommand AS onInitAct-»
	«IF onInitAct != null-»
		«FOREACH getAllExecActionsRecursive(this.structure.appWindow.appArea.onInitCommand) AS currAct-»
			«EXPAND springBEMethod(this,"Home") FOR (ExecCommand)currAct-»
		«ENDFOREACH-»
	«ENDIF-»
	«ENDLET-»
«ENDDEFINE»


«DEFINE springBEMethod(GUIModel model, String contextID) FOR ExecCommand»
	////////////////////////////////////////////////////////////////////////////////////
	
	«LET findParentContentPanel() AS parentCP-»		
	public ExecResults «this.methodName» (
	«IF parentCP != null»
		«getModelDTOFQN(parentCP, false, false, model)» theModel
	«ELSEIF isInMenuBranch(this)»
		«getModelDTOFQN(null, true, false, model)» theModel
	«ELSE»
		«getModelDTOFQN(null, false, true, model)» theModel
	«ENDIF»
			
	)
	throws BEException
	{
	    /// definizione costanti di outcome
	    «FOREACH this.results AS currRes-»
		final String «this.methodName.toUpperCase()»_OUTCOME_CODE__«currRes.resultCode.toUpperCase()» = "«currRes.resultCode»";
		«ENDFOREACH-»
	    ///
		try{
			ExecResults result = new ExecResults();
			«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(contextID+"springBE_"+this.methodName+"_code")»
			// inserire qui la logica applicativa da eseguire:
			
			// impostazione del result code
			result.setResultCode("«this.results.first().resultCode»");
			// modifica degli attributi del model (che verranno propagati allo strato
			// di presentation). si puo' agire anche direttamente sull'attributo "session".
		
			result.setModel(theModel);
			return result;
		«ENDPROTECT»
		}
		catch(Throwable e){
		  log.error("[«getSpringBEClassName()»::«this.methodName»] Errore occorso nell'esecuzione del metodo:"+e,e);
		  throw new BEException("Errore occorso nell'esecuzione del metodo:"+e,e);
		}
	}
	
	«ENDLET-»
«ENDDEFINE»

«DEFINE springBEMethodDelegation(GUIModel model, ContentPanel cp) FOR ExecCommand»
	////////////////////////////////////////////////////////////////////////////////////
			
	public ExecResults «this.methodName» (
	«IF cp != null»
		«getModelDTOFQN(cp, false, false, model)» theModel
	«ELSEIF isInMenuBranch(this)»
		«getModelDTOFQN(null, true, false, model)» theModel
	«ELSE»
		«getModelDTOFQN(null, false, true, model)» theModel
	«ENDIF»
			
	)
	throws BEException
	{
	    return get«getSpringCPBEClassName(cp)»().«this.methodName»(theModel);
	}
	
«ENDDEFINE»


«DEFINE baseActionModelfile(GUIModel model) FOR GUIModel»
«FILE getDTOBaseSrcDir()+"/BaseSessionAwareDTO.java"»package «getDTOBaseJavaPackage()»;

import java.util.Map;
import org.apache.log4j.*;
import «getBaseJavaPackage()».util.*;

public abstract class BaseSessionAwareDTO implements java.io.Serializable {
	protected Map session;
	
	public void setSession(Map session){
		this.session = session;
	}
	
	public Map getSession(){
		return this.session;
	}
	
	/**  */
	protected static Logger log = Logger.getLogger(Constants.APPLICATION_CODE + ".dto");
	
	/**
	 * dump di debug dello stato interno del DTO
	 */
	public String dump() {
		StringBuffer sb = new StringBuffer();
		sb.append(""+getClass().getName()+"{\n");
		sb.append("\telenco fields:\n");
		java.beans.BeanInfo bi;
		try {
			bi = java.beans.Introspector.getBeanInfo(this.getClass());
			java.beans.PropertyDescriptor[] pds = bi.getPropertyDescriptors();
			for (int i = 0; i < pds.length; i++) {
				java.beans.PropertyDescriptor currPD = pds[i];
				java.lang.reflect.Method currReadMethod = currPD
						.getReadMethod();
				if (currReadMethod != null) {
					try {
						Object srcVal = currReadMethod.invoke(this,
								new Object[]{});
						sb.append("\t\t" + currPD.getName() + "=" + srcVal
								+ "\n");
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (IllegalAccessException e) {
						e.printStackTrace();
					} catch (java.lang.reflect.InvocationTargetException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (java.beans.IntrospectionException e) {
			e.printStackTrace();
		}

		sb.append("\t\t");

		sb.append("\tsessione:\n");

		sb.append("}\n");
		return sb.toString();
	}
}
«ENDFILE»
«ENDDEFINE»

«REM»[DM] metodi statici per il reset delle tabelle (non bello... ma così è...)«ENDREM»
«DEFINE resetTableMethods FOR ContentPanel»
    //////////////////////////////////////////////////////////////////////////////
	/// Metodi statici per il reset delle tabelle
	//////////////////////////////////////////////////////////////////////////////
    «FOREACH (List[Table])findAllTablesInContentPanel(this) AS currTable»
    public static void resetClearStatus_widg_«currTable.name»(java.util.Map session) {
    	session.put("«this.name»_«currTable.name»_clearStatus", new Boolean(true));
    }
    «ENDFOREACH»
	
«ENDDEFINE»



«REM»dto con solo le property delle action (parametri per spring)«ENDREM»
«DEFINE actionModelFile(GUIModel model) FOR ContentPanel»
«FILE getFullModelDTOClassFile(this,false,false,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata alla Schermata [«this.name»]
 */
public class «getModelDTOClassName(this,false,false,model)» extends BaseSessionAwareDTO {

	
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«EXPAND actionImplJavaFiles::storedAppDataProperties(model, false) FOR this»
	
	////////////////////////////////////////////////////////////////////
	/// campi per widget semplici
	////////////////////////////////////////////////////////////////////
	«EXPAND actionImplJavaFiles::widgetsProperties(model, false) FOR this»
	
	////////////////////////////////////////////////////////////////////
	/// ulteriori campi comuni 
	////////////////////////////////////////////////////////////////////
	«EXPAND actionImplJavaFiles::commonProperties FOR this»
}
«ENDFILE»
«ENDDEFINE»


«DEFINE actionModelFile(GUIModel model) FOR Menubar»
«FILE getFullModelDTOClassFile(null,true,false,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata al Menu
 */
public class «getModelDTOClassName(null,true,false,model)» extends BaseSessionAwareDTO {

		
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«EXPAND actionImplJavaFiles::storedAppDataProperties(model) FOR this»
	

}
«ENDFILE»
«ENDDEFINE»

«DEFINE actionModelFile(GUIModel model) FOR ApplicationArea»
«FILE getFullModelDTOClassFile(null,false,true,model)»
package «getDTOBaseJavaPackage(model)»;

import java.util.*;

/**
 * Questo DTO incapsula tutto il contenuto informativo necessario all'esecuzione della
 * logica di business associata alla OnInit action
 */
public class «getModelDTOClassName(null,false,true,model)» extends BaseSessionAwareDTO {

	
	////////////////////////////////////////////////////////////////////
	/// application data
	////////////////////////////////////////////////////////////////////
	«IF onInitCommand!=null»
	«EXPAND actionImplJavaFiles::storedAppDataProperties(model) FOR this.onInitCommand»
	«ENDIF»
	

}
«ENDFILE»
«ENDDEFINE»
