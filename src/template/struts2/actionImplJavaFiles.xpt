«IMPORT guigen»
«IMPORT ecore»
«EXTENSION template::GenericExtensions »
«EXTENSION template::struts2::Struts2Extensions»




«REM»property sempre presenti:
- idNodo per gestire eventuali click su un treeView
- idCella per gestire eventuali click sulla cella di una tabella
«ENDREM»
«DEFINE commonProperties FOR ContentPanel»
	/////////////////////////////////////////
	/// property comuni a tutte le action
	/////////////////////////////////////////

	«IF hasTree(this)»
	// nodo selezionato in un eventuale tree
	private String _idNodo = "";

	public void setIdNodo(String val){
		_idNodo = val;
	}

	public String getIdNodo(){
		return _idNodo;
	}
	«ENDIF»

	«IF hasTable(this)»
	// riga selezionata in una eventuale tabella
	// NOTA: l'id della cella selezionata e' data da idRiga + idColonna
	private String _idRiga = "";

	public void setIdRiga(String val){
		_idRiga = val;
	}

	public String getIdRiga(){
		return _idRiga;
	}

	// colonna selezionata in una eventuale tabella
	// NOTA: l'id della cella selezionata e' data da idRiga + idColonna
	private String _idColonna = "";

	public void setIdColonna(String val){
		_idColonna = val;
	}

	public String getIdColonna(){
		return _idColonna;
	}
    «ENDIF»
    
    /// parametri per cambio TAB
    
    private String selectedTabKey;

	public void setSelectedTabKey(String value) {
		selectedTabKey = value;
	}

	public String getSelectedTabKey() {
		return selectedTabKey;
	}

	private String selectedTabValue;

	public void setSelectedTabValue(String value) {
		selectedTabValue = value;
	}

	public String getSelectedTabValue() {
		return selectedTabValue;
	}
    

«ENDDEFINE»

«REM»
	inserisce tutte le propeprty associate ai vari DataWidget contenuti nel content panel
	a tutti i livelli
	[DM] STDMDD-294: aggiunta delle properties per i widget di tipo FileUpload 
	[AM] STDMDD-360: aggiunta gestione dei widget indiretti (PanelDefUse)
«ENDREM»
«DEFINE widgetsProperties(GUIModel model, boolean widgetValidation) FOR ContentPanel»
«LET findAllWidgetsInContentPanel(this) AS allW»
	«LET (List[Widget])allW AS allWidgets»
		«REM»properties dei DataWidgets«ENDREM»
		«LET allWidgets.typeSelect(DataWidget).select(w|w.databinding == null) AS allDataWidgets»
			«EXPAND widgetProperty(model, widgetValidation, "") FOREACH allDataWidgets»
		«ENDLET»
		«REM»STDMDD-294: properties per i FileUpload widgets«ENDREM»
		«LET allWidgets.typeSelect(FileUpload) AS fileUploadWidgets»
			«EXPAND widgetProperty(model, widgetValidation, "") FOREACH fileUploadWidgets»
		«ENDLET»
	«ENDLET»
«ENDLET»

«ENDDEFINE»

«DEFINE widgetsProperties(GUIModel model, boolean widgetValidation, String contextPrefix) FOR Panel»
«ENDDEFINE»

«DEFINE widgetsProperties(GUIModel model, boolean widgetValidation, String contextPrefix) FOR FormPanel»
	«EXPAND widgetsProperties(model, widgetValidation, contextPrefix) FOREACH this.subpanels»
«ENDDEFINE»

«DEFINE widgetsProperties(GUIModel model, boolean widgetValidation, String contextPrefix) FOR MultiPanel»
	«EXPAND widgetsProperties(model, widgetValidation, contextPrefix) FOREACH this.panels»
«ENDDEFINE»

«DEFINE widgetsProperties(GUIModel model, boolean widgetValidation, String contextPrefix) FOR WidgetsPanel»
	«EXPAND widgetProperty(model, widgetValidation, contextPrefix) FOREACH this.widgets»
«ENDDEFINE»

«DEFINE widgetsProperties(GUIModel model, boolean widgetValidation, String contextPrefix) FOR PanelDefUse»
	«EXPAND widgetsProperties(model, widgetValidation, getChainedContext(contextPrefix,name)) FOR this.panelDef.panel»
«ENDDEFINE»


«DEFINE widgetProperty (GUIModel model, boolean widgetValidation, String contextPrefix) FOR Widget»
«ENDDEFINE»

«DEFINE widgetProperty (GUIModel model, boolean widgetValidation, String contextPrefix) FOR DataWidget»
	«ERROR "tipo di data widget non gestito:"+this»
«ENDDEFINE»

«DEFINE widgetProperty (GUIModel model, boolean widgetValidation, String contextPrefix) FOR PlainText»
	«REM»Non facciamo niente. Implementare in futuro se servisse«ENDREM»
«ENDDEFINE»

«DEFINE widgetProperty (GUIModel model, boolean widgetValidation, String contextPrefix) FOR HiddenValue»
	// HiddenValue «name»
	«LET (widgetValidation && (this.required || !isNullOrEmpty(this.dataTypeModifier)) ? getWidgetValidation(this, contextPrefix) : "")  AS widgetValidation»
	«EXPAND property(getWidgetName(this, contextPrefix), model, widgetValidation) FOR this.dataType»
	«ENDLET»
«ENDDEFINE»

«DEFINE widgetProperty (GUIModel model, boolean widgetValidation, String contextPrefix) FOR TextField»
	// TextField «name»
	«LET (widgetValidation && (this.required || !isNullOrEmpty(this.dataTypeModifier)) ? getWidgetValidation(this, contextPrefix) : "")  AS widgetValidation»
	«EXPAND property(getWidgetName(this, contextPrefix), model, widgetValidation) FOR this.dataType»
	«ENDLET»
«ENDDEFINE»

«DEFINE widgetProperty(GUIModel model, boolean widgetValidation, String contextPrefix) FOR TextArea»
	// TextArea «name»
	«LET (widgetValidation && (this.required || !isNullOrEmpty(this.dataTypeModifier)) ? getWidgetValidation(this, contextPrefix) : "")  AS widgetValidation»
	«EXPAND property(getWidgetName(this, contextPrefix), model, widgetValidation) FOR this.dataType»
	«ENDLET»
«ENDDEFINE»

«DEFINE widgetProperty(GUIModel model, boolean widgetValidation, String contextPrefix) FOR Table»
	// Table «name»
	«EXPAND property(getWidgetName(this, contextPrefix), model, "") FOR this.dataType»
«ENDDEFINE»

«DEFINE widgetProperty(GUIModel model, boolean widgetValidation, String contextPrefix) FOR RadioButtons»
	// RadioButtons «name»
	«LET (widgetValidation && (this.required || !isNullOrEmpty(this.dataTypeModifier)) ? getWidgetValidation(this, contextPrefix) : "")  AS widgetValidation»
	«EXPAND property(getWidgetName(this, contextPrefix), model, widgetValidation) FOR this.dataType»
	«ENDLET»
«ENDDEFINE»

«DEFINE widgetProperty(GUIModel model, boolean widgetValidation, String contextPrefix) FOR CheckBox»
	// CheckBox «name»
	«LET (widgetValidation && (this.required || !isNullOrEmpty(this.dataTypeModifier)) ? getWidgetValidation(this, contextPrefix) : "")  AS widgetValidation»
	«EXPAND property(getWidgetName(this, contextPrefix), model, widgetValidation) FOR this.dataType»
	«ENDLET»
«ENDDEFINE»

«DEFINE widgetProperty(GUIModel model, boolean widgetValidation, String contextPrefix) FOR ComboBox»
	// ComboBox «name»
	«LET (widgetValidation && (this.required || !isNullOrEmpty(this.dataTypeModifier)) ? getWidgetValidation(this, contextPrefix) : "")  AS widgetValidation»
	«EXPAND property(getWidgetName(this, contextPrefix), model, widgetValidation) FOR this.dataType»
	«ENDLET»
«ENDDEFINE»

«DEFINE widgetProperty(GUIModel model, boolean widgetValidation, String contextPrefix) FOR Calendar»
	// Calendar «name»
	«LET (widgetValidation && (this.required || !isNullOrEmpty(this.dataTypeModifier)) ? getWidgetValidation(this, contextPrefix) : "")  AS widgetValidation»
	«EXPAND property(getWidgetName(this, contextPrefix), model, widgetValidation) FOR this.dataType»
	«ENDLET»
«ENDDEFINE»


«DEFINE property(String name, GUIModel model, String widgetValidation) FOR Type»
	private «toJavaType(this, model)» _«name»;
	
	«widgetValidation»
	public void set«name.toFirstUpper()»(«toJavaType(this, model)» value){
		_«name» = value;
	}
	
	public «toJavaType(this, model)» get«name.toFirstUpper()»(){
		return _«name»;
	}
«ENDDEFINE»


«REM»[DM] STDMDD-294: aggiunta delle properties per i widget di tipo FileUpload «ENDREM»
«DEFINE widgetProperty (GUIModel model, boolean widgetValidation, String contextPrefix) FOR FileUpload»
	«EXPAND property(getWidgetName(this, contextPrefix), model, null, contextPrefix) FOR this»
«ENDDEFINE»

«DEFINE property(String name, GUIModel model, String widgetValidation, String contextPrefix) FOR FileUpload»
	«IF contextPrefix!=null && contextPrefix.length==0»
	«ERROR "il file upload all'interno di un PanelDef non supportato"»
	«ENDIF»
	// FileUpload «name»
	private File _«name»;               // The actual file
	private String _«name»ContentType;  // The content type of the file 
	private String _«name»FileName;     // The uploaded file name and path 

	public void set«name.toFirstUpper()»(File value) {
		_«name» = value;
	}
	
	public File get«name.toFirstUpper()»() {
		return _«name»;
	}

	public void set«name.toFirstUpper()»ContentType(String value) {
		_«name»ContentType = value;
	}
	
	public String get«name.toFirstUpper()»ContentType() {
		return _«name»ContentType;
	}

	public void set«name.toFirstUpper()»FileName(String value) {
		_«name»FileName = value;
	}
	
	public String get«name.toFirstUpper()»FileName() {
		return _«name»FileName;
	}
«ENDDEFINE»


«DEFINE storedAppDataProperties(GUIModel model, boolean expandVisitorFieldValidator) FOR ContentPanel»
«LET findAllActionScopedAppDataInContentPanel(this) AS allAD»
«LET (List[ApplicationData])allAD AS allAppData»
	«EXPAND appDataProperty(model, this, expandVisitorFieldValidator) FOREACH allAppData»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«REM»serve per la on-init action: non usare altrove«ENDREM»
«DEFINE storedAppDataProperties(GUIModel model) FOR Command»
«LET findAllActionScopedAppData(this) AS allAD»
«LET (List[ApplicationData])allAD AS allAppData»
	«EXPAND appDataProperty(model, null, false) FOREACH allAppData»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE storedAppDataProperties(GUIModel model) FOR Menubar»
«LET findAllActionScopedAppDataInMenubar(this) AS allAD»
«LET (List[ApplicationData])allAD AS allAppData»
	«EXPAND appDataProperty(model, null, false) FOREACH allAppData»
«ENDLET»
«ENDLET»
«ENDDEFINE»

«DEFINE springBEProperties FOR GUIModel»
	private «getSpringBEFQN()» _backEnd = null;
	
	public void setSpringBackEnd(«getSpringBEFQN()» be){
		_backEnd = be;
	}
	
	public «getSpringBEFQN()» getSpringBackEnd(){
		return _backEnd;
	}
	
	
	private «getSpringSecurityHelperFQN()» _securityHelper = null;
	
	public void setSpringSecurityHelper(«getSpringSecurityHelperFQN()» sh){
		_securityHelper = sh;
	}
	
	public «getSpringSecurityHelperFQN()» getSpringSecurityHelper(){
		return _securityHelper;
	}
	
«ENDDEFINE»

«DEFINE appDataProperty(GUIModel model, ContentPanel cp, boolean expandVisitorFieldValidator) FOR ApplicationData»
«IF this.lifetimeExtent==DataLifetimeType::USER_ACTION-»
«EXPAND appDataPropertyActionScoped(model, cp, expandVisitorFieldValidator) FOR this-»
«ELSE-»
«EXPAND appDataPropertySessionScoped(model, cp, expandVisitorFieldValidator) FOR this-»
«ENDIF-»
«ENDDEFINE»

«DEFINE appDataPropertyActionScoped(GUIModel model, ContentPanel cp, boolean expandVisitorFieldValidator) FOR ApplicationData»
	private «toJavaType(this.type, model)» _«getAppDataPropertyName(this)» = «defaultInitVal(this.type,model)»;
	
	«REM»STDMDD-159: visitor validator.«ENDREM»
	«getVisitorFieldValidator(this, cp, expandVisitorFieldValidator)»
	public void set«getAppDataPropertyName(this).toFirstUpper()»(«toJavaType(this.type, model)» value){
		_«getAppDataPropertyName(this)» = value;
	}
	
	public «toJavaType(this.type, model)» get«getAppDataPropertyName(this).toFirstUpper()»(){
		return _«getAppDataPropertyName(this)»;
	}
«ENDDEFINE»

«DEFINE appDataPropertySessionScoped(GUIModel model, ContentPanel cp, boolean expandVisitorFieldValidator) FOR ApplicationData»
	
	«REM»STDMDD-159: visitor validator.«ENDREM»
	«getVisitorFieldValidator(this, cp, expandVisitorFieldValidator)»
	public void set«getAppDataPropertyName(this).toFirstUpper()»(«toJavaType(this.type, model)» value){
		getSession().put("«getAppDataKey(this)»", value);
	}
	
	public «toJavaType(this.type, model)» get«getAppDataPropertyName(this).toFirstUpper()»(){
		return («toJavaType(this.type, model)»)(getSession().get("«getAppDataKey(this)»"));
	}
«ENDDEFINE»


«REM»
[DM] STDMDD-241: razionalizzazione del menu
Esteso a qualunque livello di annidamento
«ENDREM»
«DEFINE submenuMap FOR Menubar»
«FOREACH this.topLevelMenu AS topLevelMenu»
«EXPAND submenuList FOR topLevelMenu»
«ENDFOREACH»
«ENDDEFINE»


«DEFINE submenuList FOR Menu»
«IF this.submenu.size > 0»
	List<String> «this.name»SubmenuList = new ArrayList<String>();
	«FOREACH this.submenu AS subMenu-»
	«this.name»SubmenuList.add("«subMenu.name»");
	«ENDFOREACH-»
	submenuMap.put("«this.name»", «this.name»SubmenuList);

	«FOREACH this.submenu AS subMenu-»
		«EXPAND submenuList FOR subMenu»
	«ENDFOREACH-»
	«ENDIF»
«ENDDEFINE»
