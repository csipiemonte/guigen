«IMPORT guigen»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«DEFINE actionImplClasses FOR GUIModel»
«FILE getPresentationJavaSrcDir(true)+"/IAction.java"»
package it.csi.piol.piolfe.presentation.piolfe.action;

/**
 * Interfaccia comune di tutte le azioni di presentation
 * @author CSI Piemonte
 *
 */
public interface IAction {
	/**
	 * Esegue l'azione corrispondente
	 * @return il codice del RESULT struts conseguente all'azioen (se l'azione comporta)
	 * una decisione sul result, null altrimenti
	 */
	public String doAction();
};
«ENDFILE»

«FILE getPresentationJavaSrcDir(true)+"/JumpAction.java"»
package it.csi.piol.piolfe.presentation.piolfe.action;

/// JUMP_ACTION
public class JumpAction implements IAction {
	String name;
	String _currentPageName = null;
	boolean _pushCurrent;
	public JumpAction(String panelName, String currentPageName,
			boolean pushCurrent) {
		name = panelName;
		_pushCurrent = pushCurrent;
		_currentPageName = currentPageName;
	}
	public String doAction() {
		if (_pushCurrent) {
			//TODO capire se e come impleemntare lo stack delle action
			//_pageStack.add(_currentPageName);
		}
		return "GO_TO_"+name;
	}
};
«ENDFILE»

«FILE getPresentationJavaSrcDir(true)+"/ExecAction.java"»
package it.csi.piol.piolfe.presentation.piolfe.action;

////ExecAction
public abstract class ExecAction implements IAction {
	String _esiti[] = null;
	//JFrame _frame = null;
	IAction _azioni[] = null;
	java.util.Hashtable _resultAzioni = new java.util.Hashtable();

	//public ExecAction(JFrame frame, String esiti[], IAction[] azioni) {
	public ExecAction(String esiti[], IAction[] azioni) {
		_esiti = esiti;
		//_frame = frame;
		_azioni = azioni;
		if (_esiti != null) {
			for (int i = 0; i < _esiti.length; i++)
				_resultAzioni.put(_esiti[i], _azioni[i]);
		}
	}

	public String doAction(){
		// esecuzione azione
		String result = doLogic();
		// determinazione esito e azione corrispondente
		IAction resultAction = null;
		for (int i = 0; i<_esiti.length; i++){
			if (_esiti[i].equals(result))
				resultAction = _azioni[i];
		}
		// esecuzione azione conseguente all'esito
		if(resultAction!=null){
			return resultAction.doAction();
		}
		else
			throw new IllegalStateException("Il result code "+result+" non è tra quelli previsti ("+_esiti+")");
	}
	
	// deve essere sovrascritto per eseguire la logica e deve restituire il result_code
	// corretto
	public abstract String doLogic();
}
«ENDFILE»

«FILE getPresentationJavaSrcDir(true)+"/SequenceAction.java"»
package it.csi.piol.piolfe.presentation.piolfe.action;

/// SEQUENCE_ACTION
public class SequenceAction implements IAction {
	IAction[] _actions;
	public SequenceAction(IAction[] actions) {
		_actions = actions;
	}
	
	/**
	 * La sequence action esegue in sequenza tutte le azioni atomiche
	 * incluse come step, mantenendo il più recente risultato non nullo restituito
	 * dagli step (per determinare al termine quale debba essere la pagina successiva
	 */
	public String doAction() {
		String result=null;
		if (_actions != null) {
			for (int i = 0; i < _actions.length; i++) {
				IAction currAct = _actions[i];
				// TODO standardizzare log
				System.out
						.println("sequenza, azione #" + i + ":" + currAct);
				String currResult = currAct.doAction();
				if (currResult!=null)
					result=currResult;
			}
			System.out.println("Il risultato finale della sequence è "+result);
		}
		return result;
	}
};
«ENDFILE»
«ENDDEFINE»


«REM»richiamata dal template di definizione della classe Action per un dato 
     content panel
«ENDREM»
«DEFINE actionStructureInit FOR ContentPanel»
	public IAction initAction() {
		
		«LET getAllEventSourceWidgets() AS eventSources»
		«IF eventSources.size>0»
		«REM»TODO prendere non solo il primo !!!«ENDREM»
		«LET eventSources.first() AS currEventSource»
		«LET ((Widget)currEventSource).eventHandlers AS evhs»
		«REM»TODO prendere non solo il primo !!!«ENDREM»
		«LET evhs.first() AS currEvh»
		«EXPAND addActionsCode("actions_"+currEvh.eventType.toString().toLowerCase()+"_"+((Widget)currEvh.eContainer).name) FOR currEvh»
		/// TODO la riga successiv aè un pezza...
		IAction action = act_actions_«currEvh.eventType.toString().toLowerCase()»_«((Widget)currEvh.eContainer).name»_1; 
		«ENDLET»
		«ENDLET»	
		«ENDLET»
		return action;
		«ELSE»
		return new IAction(){
			public String doAction(){return null;}
		};
		«ENDIF»
		«ENDLET»
	}
«ENDDEFINE»



«DEFINE addActionsCode(String actionsVarName) FOR EventHandler»
    «LET this.action AS currAction»
    «LET 1 AS actionNumber»
    	«EXPAND addActionCode(actionsVarName,actionNumber) FOR currAction»
    «ENDLET»
    «ENDLET»
    
	IAction [] «actionsVarName» = new IAction[]{
	«LET this.action AS currAct»
		«LET 1 AS actionNumber»
		act_«actionsVarName»_«actionNumber»
		«ENDLET»
	«ENDLET»
	};
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR Action»
// azione non supportata «this»
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR JumpAction»
	/// Jump Action begin
	JumpAction act_«actionsVarName»_«actionNumber» = new JumpAction("«this.jumpTo.name»", «IF this.pushCurrentPage»"«findParentContentPanel(this).name»",true«ELSE»null,false«ENDIF»);
	/// Jump Action end
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR ShowDialogAction»
	// ShowDialog Action begin
	ShowDialogAction act_«actionsVarName»_«actionNumber» = new ShowDialogAction("«this.dialog.name»");
	// ShowDialog Action end
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR JumpBackAction»
	//JumpBack Action begin
	JumpBackAction act_«actionsVarName»_«actionNumber» = new JumpBackAction();
	// JumpBack Action end
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR SequenceAction»
	// SequenceAction begin
    «FOREACH actions AS currAct»
    «EXPAND addActionCode(actionsVarName+"step",actions.indexOf(currAct)) FOR currAct»
    «ENDFOREACH»
    
    IAction [] act_«actionsVarName»_«actionNumber»_steps = new IAction[]{
    «FOREACH actions AS currAct»
    act_«actionsVarName+"step_"+actions.indexOf(currAct)»«IF currAct!=actions.last()»,«ENDIF»
    «ENDFOREACH»
    };
	SequenceAction act_«actionsVarName»_«actionNumber» = new SequenceAction(act_«actionsVarName»_«actionNumber»_steps);
	// SequenceAction end
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR ONOFFAction»
	// ONOFF Action begin
    //prepara i nomi dei componenti target da abilitare/disabilitare
    String[] act_«actionsVarName»_«actionNumber»_targets = new String[]{
    «FOREACH this.targetWidgets AS currWidg»
    "«currWidg.name»"«IF currWidg!=targetWidgets.last()»,«ENDIF»
    «ENDFOREACH»
    };
    
	OnOffAction act_«actionsVarName»_«actionNumber» = new OnOffAction(act_«actionsVarName»_«actionNumber»_targets,«this.enable»);
	//ONOFF Action end
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR VisibilityAction»
	// VisibilityAction begin
	//prepara i nomi dei componenti target da mostrare/nascondere
    String[] act_«actionsVarName»_«actionNumber»_targets = new String[]{
    «FOREACH this.targetWidgets AS currWidg»
    "«currWidg.name»"«IF currWidg!=targetWidgets.last()»,«ENDIF»
    «ENDFOREACH»
    };
	VisibilityAction act_«actionsVarName»_«actionNumber» = new VisibilityAction(act_«actionsVarName»_«actionNumber»_targets,«this.show»);
	// Visibility Action end
«ENDDEFINE»

«DEFINE addActionCode(String actionsVarName, int actionNumber) FOR ExecAction»
	// ExecAction begin
    String [] resultNames=new String []{
      «FOREACH this.results AS currRes»
      "«currRes.resultCode»"«IF currRes!=results.last()»,«ENDIF»
      «ENDFOREACH»
    };
    
    IAction [] actionsForResults = new IAction[«this.results.size»];
    «FOREACH results AS currRes»
    «EXPAND addActionCode(actionsVarName+"_resAction",results.indexOf(currRes)) FOR currRes.action»
    actionsForResults[«results.indexOf(currRes)»] = «"act_"+actionsVarName+"_resAction_"+results.indexOf(currRes)»;
    «ENDFOREACH»
    
    
	ExecAction act_«actionsVarName»_«actionNumber» = new ExecAction(resultNames, actionsForResults){
		public String doLogic(){
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("act_"+actionsVarName+"_"+actionNumber+"code")»
			// inserire qui la logica applicativa da eseguire
			return "«this.results.first().resultCode»";
		«ENDPROTECT»
		}
	};
	// Exec Action end
«ENDDEFINE»
