«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT guigen»

«IMPORT template::struts2::actionImplJavaFiles»
«IMPORT template::struts2::security»
«IMPORT template::struts2::typeConversion»
«IMPORT template::struts2::eventHandlers»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«REM»
==========================================================================================================================
STRUTS2 ACTIONS FILES
===========================================================================================================================
«ENDREM»


«REM»Genera la Action di Struts che gestisce l'azione di Logout«ENDREM»
«DEFINE struts2LogoutJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getStrutsLogoutJavaFile(this, skip_component_dir_creation)»package «getPresentationJavaPackage(this)»;

import java.util.*;

import com.opensymphony.xwork2.ActionContext;

import «getDTOBaseJavaPackage(this)».*;

/**
 * «getStrutsLogoutClassName(this)» Action Class.
 *
 * @author GuiGen
 */
public class «getStrutsLogoutClassName(this)» extends «getStrutsBaseActionClassName(this)» <BaseSessionAwareDTO> {
	
	public BaseSessionAwareDTO getModel()   {
		 throw new UnsupportedOperationException("Metodo getModel() intenzionalmente non implementato.");
	}
	
	public  void setModel(BaseSessionAwareDTO modello) {
		 throw new UnsupportedOperationException("Metodo setModel() intenzionalmente non implementato..");
	}

	«IF isMultiPortal(this)»
	private String savedPortalCode;

	public void savePortalCode(String savedPortalCode) {
		this.savedPortalCode = savedPortalCode;
	}
	public String getSavedPortalCode() {
		return this.savedPortalCode;
	}

	public String getSsoLogoutUrl() {
		return (String) ActionContext.getContext().getApplication().get("logoutURL." + getSavedPortalCode());
	}
	
	public String getLocalLogoutUrl() {
		return (String) ActionContext.getContext().getApplication().get("localLogoutURL." + getSavedPortalCode());
	}
	«ENDIF»

    /**
	 * nessuna classe model associata
	 */
	public Class modelClass() {
		return null;
	}
    
    
	/**
	 * Mostra la pagina di conferma del logout
	 * @return SSO_LOGOUT.
	 */    
    public String confirmLogout() throws Exception {
    	return "confirmLogout";
    }
    
    protected void dumpModel(boolean pre){
	  // metodo intenzionalmente vuoto
	}
	
	protected void doBeforeEventCommand(){
		// non sono previsti before/after event commands
	}
	
	protected void doAfterEventCommand(){
		// non sono previsti before/after event commands
	}
	
	protected ICommand initCommand(String widgName, String eventName){
	  // metodo intenzionalmente vuoto
	  return null;
	}
    
	/**
	 *
	 * @return SSO_LOGOUT.
	 */
	public String ssoLogout() throws Exception {
		log.debug("[«getStrutsLogoutClassName(this)»::ssoLogout] START");
		invalidateLocalSession();
		log.debug("[«getStrutsLogoutClassName(this)»::ssoLogout] END");
		return "SSO_LOGOUT";
	}

	
	/**
	 *
	 * @return LOCAL_LOGOUT.
	 */
	public String localLogout() throws Exception {
		log.debug("[«getStrutsLogoutClassName(this)»::localLogout] START");
		invalidateLocalSession();
		log.debug("[«getStrutsLogoutClassName(this)»::localLogout] END");
		return "LOCAL_LOGOUT";
	}

	«IF getActualSecurityModel(this)!=null && getActualSecurityModel(this).autenticationMethod!=null-»
		«EXPAND invalidateLocalSession(this) FOR getActualSecurityModel(this).autenticationMethod-»
	«ELSE-»
		«EXPAND invalidateLocalSessionNoAuth FOR this-»
	«ENDIF-»
	
	/**
	 *	Metodo per la rimozione dalla sessione degli application data a scope
	 *  SAME_PAGE. 
	 */
	public void clearPageScopedAppData(String targetContentPanelName) {
		//NOP
	}

}
«ENDFILE»
«ENDDEFINE»

«DEFINE invalidateLocalSession(GUIModel model) FOR AutenticationMethod»

«IF model.targetPlatform.securityProfile!=null»
	/**
	 * Invalida la sessione corrente
	 */
	protected void invalidateLocalSession(){
	
	}

«ELSE»
	«ERROR ""+this+ "non supportato"»
«ENDIF»
«ENDDEFINE»

«DEFINE invalidateLocalSessionNoAuth FOR GUIModel»
	/**
	 * Invalida la sessione corrente
	 */
	protected void invalidateLocalSession(){
		«IF isMultiPortal(this)-»
		// salvo il portal code dalla sessione
		savePortalCode(getPortalCode());
		«ENDIF»
		if (session instanceof org.apache.struts2.dispatcher.SessionMap) {
		    try {
		        ((org.apache.struts2.dispatcher.SessionMap) session).invalidate();
		    } catch (IllegalStateException e) {
		        log.error("[«getStrutsLogoutClassName(this)»::invalidateLocalSession] ERROR Invalidating Struts2 Session");
		    }
		}
	}
«ENDDEFINE»


«DEFINE invalidateLocalSession(GUIModel model) FOR OPAUTHSSO»
	/**
	 * Invalida gli attributi di autenticazione contenuti in sessione
	 */
	protected void invalidateLocalSession(){
		session.remove(«getIrideIdAdapterFilterFQN(model)».AUTH_ID_MARKER);
		session.remove(«getIrideIdAdapterFilterFQN(model)».IRIDE_ID_SESSIONATTR);
	}
«ENDDEFINE»

«DEFINE invalidateLocalSession(GUIModel model) FOR SSOBARTSSO»
	/**
	 * Invalida gli attributi di autenticazione contenuti in sessione
	 */
	protected void invalidateLocalSession(){
		session.remove(«getIrideIdAdapterFilterFQN(model)».AUTH_ID_MARKER);
		session.remove(«getIrideIdAdapterFilterFQN(model)».IRIDE_ID_SESSIONATTR);
	}
«ENDDEFINE»

«DEFINE invalidateLocalSession(GUIModel model) FOR ShibbolethSSO»
	/**
	 * Invalida la sessione corrente
	 */
	protected void invalidateLocalSession(){
		if (session instanceof org.apache.struts2.dispatcher.SessionMap) {
			«IF isMultiPortal(model)-»
			// salvo il portal code dalla sessione
			savePortalCode(getPortalCode());
			«ENDIF»
		    try {
		        ((org.apache.struts2.dispatcher.SessionMap) session).invalidate();
		    } catch (IllegalStateException e) {
		        log.error("[«getStrutsLogoutClassName(model)»::invalidateLocalSession] ERROR Invalidating Struts2 Session");
		        // in caso di errore invalido almeno l'attributo di iride
		        session.remove(«getIrideIdAdapterFilterFQN(model)».IRIDE_ID_SESSIONATTR);
		    }
		}
	}
«ENDDEFINE»
