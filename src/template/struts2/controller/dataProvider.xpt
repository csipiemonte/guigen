«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT guigen»

«IMPORT template::struts2::actionImplJavaFiles»
«IMPORT template::struts2::security»
«IMPORT template::struts2::typeConversion»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«REM»deve essere chiamato solo se richBehavior == true«ENDREM»
«DEFINE dataProviderMethods(GUIModel model) FOR ContentPanel-»
	//////////////////////////////////////////////////////////////////////////////////
	/// metodo di data providing sull'intero ContentPanel
	/// metodo: provide_CPDATA
	//////////////////////////////////////////////////////////////////////////////////
	«IF model.targetPlatform.enableFatClient-»
	«EXPAND dataProvider::formDataProviderMethod FOR this»
	«EXPAND provideWidgetsStatus FOR this»
	«ENDIF-»
	//////////////////////////////////////////////////////////////////////////////////
	/// metodi di data providing sui widget dotati di multi data binding
	/// contenuti nel contentPanel
	/// metodo: provide<nomeWidget>_<tipologia dati>
	/// es: provideCbComuni_DATASET
	//////////////////////////////////////////////////////////////////////////////////
	
	«EXPAND dataProviderMethods(model, this, "", null) FOR this.panels-»
«ENDDEFINE»

«DEFINE dataProviderMethods(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Panel»
«ENDDEFINE»

«DEFINE dataProviderMethods(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR FormPanel-»
	«EXPAND dataProviderMethods(model, cp, contextPrefix, pduc) FOREACH this.subpanels-»
«ENDDEFINE»

«DEFINE dataProviderMethods(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR WidgetsPanel-»
	«EXPAND dataProviderMethods(model, cp, contextPrefix, pduc) FOREACH this.widgets -»
«ENDDEFINE»

«DEFINE dataProviderMethods(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR CommandPanel-»
	«EXPAND dataProviderMethods(model, cp, contextPrefix, pduc) FOREACH this.widgets-»
«ENDDEFINE»

«DEFINE dataProviderMethods(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MultiPanel-»
	«EXPAND dataProviderMethods(model, cp, contextPrefix, pduc) FOREACH this.panels-»
«ENDDEFINE»

«DEFINE dataProviderMethods(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR PanelDefUse-»
	«EXPAND dataProviderMethods(model, cp, getChainedContext(contextPrefix, name), this.config) FOR this.panelDef.panel-»
«ENDDEFINE»


«DEFINE dataProviderMethods(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Widget-»
«IF MultiDataWidget.isAssignableFrom(this.metaType)-»
	«EXPAND dataProviderMethod(model, cp, contextPrefix, pduc) FOR (MultiDataWidget)this-»
«ENDIF-»
«ENDDEFINE»

«REM»deve essere chiamato solo se è specificato il collection-binding«ENDREM»
«DEFINE dataProviderMethod(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MultiDataWidget-»
«IF this.multiDataBinding!=null-»
	«EXPAND dataProviderMethod(model, cp, this, "DATASET", contextPrefix, pduc) FOR this.multiDataBinding»
«ENDIF-»
«ENDDEFINE»

«DEFINE dataProviderMethod(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MapView-»
«IF this.multiDataBinding!=null-»
	«EXPAND dataProviderMethod(model, cp, this, "ACETATELAYER", contextPrefix, pduc) FOR this.multiDataBinding»
«ENDIF-»
«IF this.editDataBinding!=null-»
	«EXPAND dataProviderMethod(model, cp, this, "EDITINGLAYER", contextPrefix, pduc) FOR this.editDataBinding»
«ENDIF-»
«ENDDEFINE»


«DEFINE dataProviderInternalMethod FOR GUIModel-»
	/**
	 * Prepara l'input stream referenziato dal result "provideData" con i valori relativi 
	 * al data-binding relativo al dataset 'datasetCode' del widget 'widget'.
	 * @return sempre il result "provideData"
	 */
	@SkipValidation 
	@FatClientOnly
	public String provideDataInternal(String widgetOGNLName, String contextPrefix, boolean jtsData, boolean isTreeView) throws CommandExecutionException {
	
		// reperisce il dato da serializzare
		com.opensymphony.xwork2.ActionContext ctx = 
			com.opensymphony.xwork2.ActionContext.getContext();
		Object dataToProvide = ctx.getValueStack().findValue(widgetOGNLName);
		«REM»«EXPAND arrangeDataToProvide(model, cp, contextPrefix) FOR widget»«ENDREM»
		// TODO !!! qui manca l'arrangeDataToProvide (serve solo per fatclient)
		// serializza
		flexjson.JSONSerializer serializer = getJSONSerializer(jtsData);
		String response = "";
		if (isTreeView){
			response = serializer.exclude("*.class").deepSerialize(((it.csi.custom.component.tree.base.TreeNodeBase) dataToProvide).getChildren());
		}
		else{
			response = serializer.exclude("*.class").deepSerialize(dataToProvide);
		}
		// imposta l'input stream di risposta
		java.io.ByteArrayInputStream bais;
		try {
			bais = new java.io.ByteArrayInputStream(
					response.getBytes("UTF-8"));
			dataProviderStream = bais;
			// risposta
			return "provideData";
		} catch (java.io.UnsupportedEncodingException e) {
			throw new CommandExecutionException("errore provide Data",e);
		}
	}
«ENDDEFINE»


«DEFINE dataProviderMethod(GUIModel model, ContentPanel cp, MultiDataWidget widget, String datasetCode, String contextPrefix, PDefUseConfig pduc) FOR AppDataBinding-»
	/**
	 * Prepara l'input stream referenziato dal result "provideData" con i valori relativi 
	 * al data-binding relativo al dataset «datasetCode» del widget «getFullID(widget, contextPrefix)».
	 * @return sempre il result "provideData"
	 */
	@SkipValidation 
	@FatClientOnly
	public String «getDataProviderMethodName(widget, datasetCode, contextPrefix)» () throws CommandExecutionException {
		return provideDataInternal(
			"«getOGNLForWidgetMultiValue(widget, contextPrefix, pduc)»",  
			"«contextPrefix»", 
			«(widget.metaType==MapView ? true : false)», 
			«widget.metaType == TreeView»);
	}
	«IF widget.metaType == Table»
		«EXPAND dataProviderMethod(model, cp, contextPrefix, pduc) FOREACH ((Table) widget).columnModel.columns.select(c | c.multiDataBinding != null)»
	«ENDIF»
«ENDDEFINE»

«DEFINE dataProviderMethod(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Column-»
«LET (Table)this.eContainer.eContainer AS table»
«IF this.multiDataBinding!=null-»
	/**
	 * Prepara l'input stream referenziato dal result "provideData" con i valori relativi
	 * al multi-data-binding relativo al widget «getFullID(table, contextPrefix)».
	 * @return sempre il result "provideData"
	 */
	@SkipValidation
	@FatClientOnly
	public String «getDataProviderMethodName(table, this.selector+"_DATASET", contextPrefix)» () throws CommandExecutionException {
	«LET multiDataBinding.appData.type AS appdataType-»
		return provideDataInternal(
			"«getOGNLForWidgetMultiValue(table, contextPrefix, pduc)»",  
			"«contextPrefix»", 
			false, false);
	«ENDLET-»
	}
«ENDIF-»
«ENDLET»
«ENDDEFINE»

«REM»parte specifica di aggiustamento dei dati per i vari widget«ENDREM»
«DEFINE arrangeDataToProvide(GUIModel model, ContentPanel cp, String contextPrefix) FOR MultiDataWidget»
«ENDDEFINE»

«DEFINE arrangeDataToProvide(GUIModel model, ContentPanel cp, String contextPrefix) FOR Table»
		if(isTableClearStatus("«cp.name»_«getFullID(this, contextPrefix)»")){
			getModel().getTableStatus().setClearStatus(true);
		}
		TableDataArranger arranger = new TableDataArranger();
		if(dataToProvide != null){
			dataToProvide = arranger.arrange((List)dataToProvide, getModel().getTableStatus(), getModel().getFilter());
		}
«ENDDEFINE»

«DEFINE formDataProviderMethod FOR ContentPanel-»
	/**
	 * Prepara l'input stream referenziato dal result "provideData" con i valori relativi
	 * a tutti gli application data di tipo non collection referenziati nel ContentPanel.
	 * @return sempre il result "provideData"
	 */
	@SkipValidation
	@FatClientOnly
	public String «getFormDataProviderMethodName()» () throws CommandExecutionException {
		// costruzione struttura dati di 1' livello (esclusi gli appdata di tipo collection)
		Object dataToProvide = toModel();
		Map<String, Object> cpData = new HashMap<String, Object>();
		cpData.put("cpData", dataToProvide);
		cpData.put("menuStatus", getMenuStatus());
		cpData.put("widgetsStatus", getWidgetsStatus(getListaWidgets(), "«this.name»"));
		cpData.put("multiPanelStatus", getMultiPanelStatus(getListaMultiPanels(), "«this.name»"));
		
		// serializza
		flexjson.JSONSerializer serializer = new flexjson.JSONSerializer();
		String response = serializer.exclude("*.class", "*.session" «EXPAND jsonExcludeAppdata FOREACH this.appData.select(ad | ad.type.metaType == TypedArray)»).deepSerialize(cpData);
		// imposta l'input stream di risposta
		java.io.ByteArrayInputStream bais;
		try {
			bais = new java.io.ByteArrayInputStream(
					response.getBytes("UTF-8"));
			dataProviderStream = bais;
			// risposta
			return "provideData";
		} catch (java.io.UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new CommandExecutionException("errore provide Data",e);
		}
	}
«ENDDEFINE»

«DEFINE provideWidgetsStatus FOR ContentPanel-»
	//***esecuzione della logica di abilitazione visibilita' widgets del cp
	private String enableWidget;
	private List<String> nomiWidgets;
	private String showWidget;
	
 	public String getEnableWidget() {
		return enableWidget;
	}

	public void setEnableWidget(String enableWidget) {
		this.enableWidget = enableWidget;
	}

	public List<String> getNomiWidgets() {
		return nomiWidgets;
	}

	public void setNomiWidgets(List<String> nomiWidgets) {
		this.nomiWidgets = nomiWidgets;
	}
	public String getShowWidget() {
		return showWidget;
	}

	public void setShowWidget(String showWidget) {
		this.showWidget = showWidget;
	}
	//***setta in sessione lo stato di abilitazione disabilitazione dei widget
	@SkipValidation
	@FatClientOnly
	public void execSetWidgetsOnOffStatus() throws CommandExecutionException{
		
		super.setWidgetsOnOffStatus("«this.name»", nomiWidgets.toArray(new String[]{}), Boolean.valueOf(enableWidget).booleanValue());
	}
	//***setta in sessione lo stato di visibilita' dei widgets
	@SkipValidation
	@FatClientOnly
	public void execSetWidgetsVisibilityStatus() throws CommandExecutionException{
		
		super.setWidgetsVisibilitytatus("«this.name»", nomiWidgets.toArray(new String[]{}), Boolean.valueOf(showWidget).booleanValue());
	}
	//***setta in sessione il tab corrente
	@SkipValidation
	@FatClientOnly
	public void execChangeTab() {
		session.put(selectedTabKey, selectedTabValue);
	}
	
	/***metodo fittizio per eseguire un post prima di ogni eventHandler
	 * se ci sono degli errori o messaggi di validazione settati nella
	 * mappa dei parametri dall'interceptor allora li restituisce
	 * alla response serializzati
	 */
	@FatClientOnly
	public String execPostEvtHandler() throws CommandExecutionException{
		String response = "{\"fldErrors\":{},\"globalErrors\":[],\"globalMessages\":[],\"model\":null,\"resultCode\":\"Ok\"}";

		// imposta l'input stream di risposta
		java.io.ByteArrayInputStream bais;
		try {
			flexjson.JSONSerializer serializer = new flexjson.JSONSerializer();
			String actionErrors = serializer.exclude("*.class").deepSerialize(ActionContext.getContext().getParameters()
				.get(FatClientValidatorInterceptor.ACTION_ERRORS));
			String fieldErrors = serializer.exclude("*.class").deepSerialize(ActionContext.getContext().getParameters()
				.get(FatClientValidatorInterceptor.FIELD_ERRORS));
			String globalMessages = serializer.exclude("*.class").deepSerialize(ActionContext.getContext().getParameters()
				.get(FatClientValidatorInterceptor.ACTION_MESSAGES));
			
			response = "{\"fldErrors\":"+fieldErrors+",\"globalErrors\":"+actionErrors+",\"globalMessages\":"+globalMessages+",\"model\":null,\"resultCode\":\"Ok\"}";
			
			bais = new java.io.ByteArrayInputStream(response.getBytes("UTF-8"));
			dataProviderStream = bais;
			// risposta
			return "provideData";
		} catch (java.io.UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new CommandExecutionException("errore provide Data", e);
		}
	}
	
	//***metodo fittizio per eseguire un post prima di ogni eventHandler
	//***senza effettuare validazioni
	@SkipValidation
	@FatClientOnly
	public String execPostEvtHandlerNoValidation() throws CommandExecutionException{
		String response = "{\"fldErrors\":{},\"globalErrors\":[],\"globalMessages\":[],\"model\":null,\"resultCode\":\"Ok\"}";

		// imposta l'input stream di risposta
		java.io.ByteArrayInputStream bais;
		try {
			bais = new java.io.ByteArrayInputStream(response.getBytes("UTF-8"));
			dataProviderStream = bais;
			// risposta
			return "provideData";
		} catch (java.io.UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new CommandExecutionException("errore provide Data", e);
		}
	}
«ENDDEFINE»

«DEFINE jsonExcludeAppdata FOR ApplicationData-», "*.«getAppDataKey()»"«ENDDEFINE»