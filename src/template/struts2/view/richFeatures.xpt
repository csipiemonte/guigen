«IMPORT guigen»

«IMPORT template::struts2::remoteResources»
«IMPORT template::struts2::richFeatures»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»
«EXTENSION org::openarchitectureware::util::stdlib::naming»

«DEFINE ajaxifyControlHeader FOR Widget»
	«ERROR "widget "+this+" non ajaxificabile"»
«ENDDEFINE»

«DEFINE ajaxifyControlFooter FOR Widget»
	«ERROR "widget "+this+" non ajaxificabile"»
«ENDDEFINE»

«DEFINE ajaxifyControlHeader(List[String] ids, ContentPanel parentCP, String contextPrefix) FOR Button-»
	«LET eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED).first() AS clickHandler-»
	<csiuicore:ajaxify id="«FOREACH ids AS currId SEPARATOR ","-»«currId»«ENDFOREACH-»" 
		widgetType="button" 
		requestUri="«parentCP.name»!«getHandlerMethodName(clickHandler, contextPrefix)».do" 
		pageId="«parentCP.name»" 
		formName="«parentCP.name»">
	«ENDLET-»
«ENDDEFINE»

«DEFINE ajaxifyControlFooter FOR Button»
	</csiuicore:ajaxify>
«ENDDEFINE»

«DEFINE ajaxifyControlHeader(ContentPanel parentCP, TabSetPanel tabSet, Panel tab, String contextPrefix) FOR TabSwitcher-»

	«LET eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED).first() AS clickHandler-»
	<csiuicore:ajaxify id="«getFragmentId(tabSet)»" 
		widgetType="button" 
		requestUri="«parentCP.name»!«getTabItemHandlerMethodName(parentCP, tabSet, tab, contextPrefix)».do" 
		pageId="«parentCP.name»" 
		formName="«parentCP.name»">
	«ENDLET-»
«ENDDEFINE»

«DEFINE ajaxifyControlHeader(ContentPanel parentCP, WizardPanel tabSet, Panel tab, String contextPrefix) FOR TabSwitcher-»

	«LET eventHandlers.select(eh|eh.eventType==EventTypes::CLICKED).first() AS clickHandler-»
	<csiuicore:ajaxify id="«getFragmentId(tabSet)»" 
		widgetType="button" 
		requestUri="«parentCP.name»!«getTabItemHandlerMethodName(parentCP, tabSet, tab, contextPrefix)».do" 
		pageId="«parentCP.name»" 
		formName="«parentCP.name»">
	«ENDLET-»
«ENDDEFINE»


«DEFINE ajaxifyControlFooter FOR TabSwitcher»
	</csiuicore:ajaxify>
«ENDDEFINE»


«DEFINE ajaxifyControlHeader(List[String] ids, ContentPanel parentCP, String contextPrefix) FOR Table-»
	<csiuicore:ajaxify id="«FOREACH ids AS currId SEPARATOR ","-»«currId»«ENDFOREACH-»" 
		widgetType="table" 
		pageId="«parentCP.name»">
«ENDDEFINE»

«DEFINE ajaxifyControlFooter FOR Table»
	</csiuicore:ajaxify>
«ENDDEFINE»

«DEFINE ajaxifyControlHeader(List[String] ids, ContentPanel parentCP, String contextPrefix) FOR ComboBox-»
	«LET eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first() AS vcHandler-»
	<csiuicore:ajaxify id="«FOREACH ids AS currId SEPARATOR ","-»«currId»«ENDFOREACH-»" 
		widgetType="combo" 
		requestUri="«parentCP.name»!«getHandlerMethodName(vcHandler, contextPrefix)».do"
		pageId="«parentCP.name»"
		formName="«parentCP.name»" >
	«ENDLET-»
«ENDDEFINE»

«DEFINE ajaxifyControlFooter FOR ComboBox-»
	</csiuicore:ajaxify>
«ENDDEFINE»

«DEFINE ajaxifyControlHeader(List[String] ids, ContentPanel parentCP, String contextPrefix) FOR RadioButtons-»
	«LET eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first() AS vcHandler-»
	<csiuicore:ajaxify id="«FOREACH ids AS currId SEPARATOR ","-»«currId»«ENDFOREACH-»" 
		widgetType="radio" 
		requestUri="«parentCP.name»!«getHandlerMethodName(vcHandler, contextPrefix)».do"
		pageId="«parentCP.name»"
		formName="«parentCP.name»" >
	«ENDLET-»
«ENDDEFINE»

«DEFINE ajaxifyControlFooter FOR RadioButtons-»
	</csiuicore:ajaxify>
«ENDDEFINE»

«DEFINE ajaxifyControlHeader(List[String] ids, ContentPanel parentCP, String contextPrefix) FOR TreeView-»
	<csiuicore:ajaxify id="«FOREACH ids AS currId SEPARATOR ","-»«currId»«ENDFOREACH-»" 
		widgetType="tree" 
		pageId="«parentCP.name»">
«ENDDEFINE»

«DEFINE ajaxifyControlFooter FOR TreeView»
	</csiuicore:ajaxify>
«ENDDEFINE»

«DEFINE dataProviderStreamProperty FOR GUIModel»
	protected java.io.InputStream dataProviderStream = null;
	
	public java.io.InputStream getDataProviderStream() {
		return dataProviderStream;
	}
«ENDDEFINE»

«REM»crea i file JS di arricchimento delle pagine web«ENDREM»
«DEFINE enrichmentDefs(GUIModel model, boolean skip_component_dir_creation) FOR ContentPanel-»
«FILE getEnrichmentFile(this, model, skip_component_dir_creation)-»
/**
 * Arricchimenti standard per il ContentPanel [«name»] da registrare nella
 * variabile globale uiEnricherMgr
 */
function initStdEnrichments4«name.toFirstUpper()»() {
	var contentPanelName = "«name»";
	«EXPAND enrichmentDefs(model, this, "", null) FOR panels-»
}

/**
 * Arricchimenti custom
 */
function initCustomEnrichments4«name.toFirstUpper()»(){
«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(name+"custom_enrichments")»
	/*
	 * definire e registrare qui eventuali arricchimenti custom, nel formato:
	 * var customEnr_n = function(){
	 *	// codice da eseguire all'applicazione dell'arricchimento
	 * };
	 * String customEnr_fragmentID = [id del pannello a cui deve essere associato l'arricchimento];
	 * uiEnricherMgr.registerEnrichment(contentPanelName, customEnr_fragmentID, customEnr_n);
	*/	
«ENDPROTECT»
}

function initUIStruct«name.toFirstUpper()»(){
	var contentPanelName = "«name»";
	var structure = 
	«EXPAND uiStruct(this, "", (PDefUseConfig)null, 6) FOR this.panels-»;
	uiEnricherMgr.setPageStructure(contentPanelName, structure);
}

initStdEnrichments4«name.toFirstUpper()»();
initCustomEnrichments4«name.toFirstUpper()»();
initUIStruct«name.toFirstUpper()»();

«ENDFILE-»
«ENDDEFINE»

«REM»struttura UI«ENDREM»
«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR Panel-»
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR FormPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "«name»", panels: [
«EXPAND uiStruct(cp, contextPrefix, pduc, lpad+2) FOREACH this.subpanels-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR MultiPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "«name»", panels: [
«EXPAND uiStruct(cp, contextPrefix, pduc, lpad+2) FOREACH this.panels-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR PanelDefUse-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "«name»", panels: [
«EXPAND uiStruct(cp, getChainedContext(contextPrefix, name), this.config, lpad+2) FOR this.panelDef.panel-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR WidgetsPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR CommandPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR MenuPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»


«REM»arricchimenti per i vari pannelli«ENDREM»
«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Panel-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR FormPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH subpanels-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MultiPanel-»
    «EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH panels-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR PanelDefUse-»
	«EXPAND enrichmentDefs(model, cp, getChainedContext(contextPrefix, this.name), this.config) FOR this.panelDef.panel-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR WidgetsPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR CommandPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MenuPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«REM»arricchimenti per i vari widget«ENDREM»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Widget-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Calendar-»
	/// arricchimento per «this.metaType.name» [«name»]: aggiunta datepicker
	var addDateTo«name.toFirstUpper()» = function(){uiNRichLib.addDatePickerNRich("«getFullID(this, contextPrefix)»", «required ? "true" : "false"»)};
	uiEnricherMgr.registerEnrichment(contentPanelName, "«getParentPanel().name»", addDateTo«name.toFirstUpper()»);
«ENDDEFINE»