«IMPORT guigen»

«IMPORT template::struts2::remoteResources»
«IMPORT template::struts2::richFeatures»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»
«EXTENSION org::openarchitectureware::util::stdlib::naming»

«REM»crea i file JS di arricchimento delle pagine web«ENDREM»
«DEFINE enrichmentDefs(GUIModel model, boolean skip_component_dir_creation) FOR ContentPanel-»
«FILE getEnrichmentFile(this, model, skip_component_dir_creation)-»
/**
 * Arricchimenti standard per il ContentPanel [«name»] da registrare nella
 * variabile globale uiEnricherMgr
 */
function initStdEnrichments4«name.toFirstUpper()»() {
	var contentPanelName = "«name»";
	«EXPAND enrichmentDefs(model, this, "", null) FOR panels-»
}

/**
 * Arricchimenti custom
 */
function initCustomEnrichments4«name.toFirstUpper()»(){
«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(name+"custom_enrichments")»
	/*
	 * definire e registrare qui eventuali arricchimenti custom, nel formato:
	 * var customEnr_n = function(){
	 *	// codice da eseguire all'applicazione dell'arricchimento
	 * };
	 * String customEnr_fragmentID = p_[id del pannello a cui deve essere associato l'arricchimento];
	 * uiEnricherMgr.registerEnrichment(contentPanelName, customEnr_fragmentID, customEnr_n);
	*/	
«ENDPROTECT»
}

function initUIStruct«name.toFirstUpper()»(){
	var contentPanelName = "«name»";
	var structure = 
	«EXPAND uiStruct(this, "", (PDefUseConfig)null, 6) FOR this.panels-»;
	uiEnricherMgr.setPageStructure(contentPanelName, structure);
}

Ext.onReady( function() { 
	initStdEnrichments4«name.toFirstUpper()»();
	initCustomEnrichments4«name.toFirstUpper()»();
	initUIStruct«name.toFirstUpper()»();
	uiEnricherMgr.setReady(); 
	uiEnricherMgr.applyAll("«name»"); 
}); 



«ENDFILE-»
«ENDDEFINE»

«REM»struttura UI«ENDREM»
«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR Panel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR FormPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«EXPAND uiStruct(cp, contextPrefix, pduc, lpad+2) FOREACH this.subpanels SEPARATOR ","-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR MultiPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«EXPAND uiStruct(cp, contextPrefix, pduc, lpad+2) FOREACH this.panels SEPARATOR ","-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR PanelDefUse-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«EXPAND uiStruct(cp, getChainedContext(contextPrefix, name), this.config, lpad+2) FOR this.panelDef.panel-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR WidgetsPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR CommandPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR MenuPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»


«REM»arricchimenti per i vari pannelli«ENDREM»
«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Panel-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR FormPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH subpanels-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MultiPanel-»
    «EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH panels-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR PanelDefUse-»
	«EXPAND enrichmentDefs(model, cp, getChainedContext(contextPrefix, this.name), this.config) FOR this.panelDef.panel-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR WidgetsPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR CommandPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MenuPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«REM»arricchimenti per i vari widget«ENDREM»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Widget-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Calendar-»
	/// arricchimento per «this.metaType.name» [«name»]: aggiunta datepicker
	var addDateTo«name.toFirstUpper()» = function(){uiNRichLib.addDatePickerNRich("«getWidgetName(this, contextPrefix)»", «required ? "true" : "false"»)};
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addDateTo«name.toFirstUpper()»);
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR TextField-»
«IF eventHandlers.select(eh|eh.eventType==EventTypes::KEY_PRESSED).size>0-»
«LET eventHandlers.selectFirst(eh|eh.eventType==EventTypes::KEY_PRESSED) AS keyPressedEvh-»
	/// arricchimento per «this.metaType.name» [«name»]: suggestion con interazioen server-side
	var addSuggestionsTo«name.toFirstUpper()» = function(){
		/*
	     * store dei suggerimenti
	     */
	    var store = new Ext.data.JsonStore({
		    //url: 'cpSuggestion!handleTfSuggestedText_KEY_PRESSED.do',
		    url: '«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,keyPressedEvh, contextPrefix)».do',
		    fields: [
		              { name : "descrizione", convert: function(v, rec){return rec;}, type : "string"}
		     ],
		    listeners:{
				exception: Ext.util.Format.messaggiErrore //***gestisco le eccezioni server side
			}
		});
	    
	    
		/*
		 * Impostazione suggestion sul textfield preesistente
		 */
		var el = Ext.get('«getWidgetName(this, contextPrefix)»');
		
		var mustDisable = el.getAttribute("disabled")=="disabled" || el.getAttribute("disabled")==true ;	
	    
	    var suggest = new Ext.form.ComboBox({
	        store: store, 
	        displayField: 'descrizione',
	        queryParam: '«getOGNLForWidgetValue(this, contextPrefix, pduc)»',
	        typeAhead: true,
	        forceSelection: true, 
	        loadMask: true,
	        mode: 'remote', 
	        triggerAction: 'all',
	        hideTrigger: true,
	        selectOnFocus:true,
	        applyTo: '«getWidgetName(this, contextPrefix)»',
	        loadingText : 'Attendere...',
	        disabled : mustDisable,
	        allowBlank : «required ? "false" : "true"»
	    });
	  };
	  uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addSuggestionsTo«name.toFirstUpper()»);
«ENDLET-»
«ENDIF-»
«ENDDEFINE»

«REM»file di configurazione del caricamento risorse per tag csiui:header«ENDREM»
«DEFINE staticResourcesXML FOR GUIModel-»
«FILE getWebModuleConfigDir(true)+"/staticResources.xml"»<?xml version="1.0" encoding="UTF-8"?>
<files>
	<!-- risorse caricate in ogni pagina -->
	<file page="all">
		<resource type="text/css">
			<position value="ext-all/resources/css/ext-all.css" />
			<position value="ext-csi/ajaxify-tag/css/ajaxify.css" />
		</resource>
		<resource type="text/javascript">
			<position value="ext-all/adapter/ext/ext-base.js" />
			<position value="ext-all/ext-all.js" />
			<position value="ext-csi/util/Format.js" />
			<position value="ext-csi/locale/ext-lang-it.js" />
			<position value="ext-csi/enricher/enricher.js" />
			<position value="ext-csi/ajaxify-tag/ajaxifyTag.js" />
		</resource>
	</file>	
	«LET (List[ContentPanel])getAllContentPanels(this.structure.appWindow.appArea) AS allCP-»
	«EXPAND staticResourcesXML(this) FOREACH allCP-»
	«ENDLET-»
</files>
«ENDFILE»
«ENDDEFINE»

«DEFINE staticResourcesXML(GUIModel model) FOR ContentPanel-»
	<!-- risorse specifiche del ContentPanel [«name»] -->
	<file page="«name»">
		<resource type="text/javascript">
			<position value="js/«getEnrichmentFileWebRootRelative(this, model)»" />
		</resource>
	</file>
«ENDDEFINE»