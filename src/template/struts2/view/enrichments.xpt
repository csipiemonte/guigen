«IMPORT guigen»

«IMPORT template::struts2::remoteResources»
«IMPORT template::struts2::richFeatures»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»
«EXTENSION org::openarchitectureware::util::stdlib::naming»
«EXTENSION template::fatjs::FatJSExtensions»


«REM»crea i file JS di arricchimento delle pagine web«ENDREM»
«REM»[DM] STDMDD-670: modificata chiamata«ENDREM»
«DEFINE enrichmentDefs(GUIModel model, boolean skip_component_dir_creation) FOR ContentPanel-»
	«EXPAND staticResources::enrichmentDefs(model, skip_component_dir_creation) FOR this»
«ENDDEFINE»


«REM»Arricchimenti comuni«ENDREM»
«DEFINE enrichmentsCommon(GUIModel model, boolean skip_component_dir_creation) FOR ContentPanel»
/**
 * Arricchimenti standard per il ContentPanel [«name»] da registrare nella
 * variabile globale uiEnricherMgr
 */
function initStdEnrichments4«name.toFirstUpper()»() {
	var contentPanelName = "«name»";
	«IF hasGisMap(this)-»
	// impostazione immagini usate da openlayers
	OpenLayers.ImgPath = '/ris/utheme/global/themes/openlayersthemeV1/css/im/';
	«ENDIF-»
	«EXPAND enrichmentDefs(model, this, "", null) FOR panels-»
}

/**
 * Arricchimenti custom
 */
function initCustomEnrichments4«name.toFirstUpper()»(){
«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(name+"custom_enrichments")»
	/*
	 * definire e registrare qui eventuali arricchimenti custom, nel formato:
	 * var customEnr_n = function(){
	 *	// codice da eseguire all'applicazione dell'arricchimento
	 * };
	 * String customEnr_fragmentID = p_[id del pannello a cui deve essere associato l'arricchimento];
	 * uiEnricherMgr.registerEnrichment(contentPanelName, customEnr_fragmentID, customEnr_n);
	*/	
«ENDPROTECT»
}

function initUIStruct«name.toFirstUpper()»(){
	var contentPanelName = "«name»";
	var structure = 
	«EXPAND uiStruct(this, "", (PDefUseConfig)null, 6) FOR this.panels-»;
	uiEnricherMgr.setPageStructure(contentPanelName, structure);
}

Ext.onReady( function() { 
	
	uiNRichLib.initStateManager();

	initStdEnrichments4«name.toFirstUpper()»();
	initCustomEnrichments4«name.toFirstUpper()»();
	initUIStruct«name.toFirstUpper()»();
	uiEnricherMgr.setReady(); 
	uiEnricherMgr.applyAll("«name»"); 
}); 
«ENDDEFINE»


«REM»struttura UI«ENDREM»
«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR Panel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR FormPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«EXPAND uiStruct(cp, contextPrefix, pduc, lpad+2) FOREACH this.subpanels SEPARATOR ","-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR MultiPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«EXPAND uiStruct(cp, contextPrefix, pduc, lpad+2) FOREACH this.panels SEPARATOR ","-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR PanelDefUse-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: [
«EXPAND uiStruct(cp, getChainedContext(contextPrefix, name), this.config, lpad+2) FOR this.panelDef.panel-»
«getBlankPadding(lpad+2)»]
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR WidgetsPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR CommandPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»

«DEFINE uiStruct(ContentPanel cp, String contextPrefix, PDefUseConfig pduc, int lpad) FOR MenuPanel-»
«getBlankPadding(lpad+0)»{
«getBlankPadding(lpad+2)»name: "p_«name»", panels: []
«getBlankPadding(lpad+0)»}
«ENDDEFINE»


«REM»arricchimenti per i vari pannelli«ENDREM»
«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Panel-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR FormPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH subpanels-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MultiPanel-»
    «EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH panels-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR PanelDefUse-»
	«EXPAND enrichmentDefs(model, cp, getChainedContext(contextPrefix, this.name), this.config) FOR this.panelDef.panel-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR WidgetsPanel-»
	«EXPAND toolTipEnrichments(model, cp, contextPrefix, pduc) FOR this-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR CommandPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MenuPanel-»
	«EXPAND enrichmentDefs(model, cp, contextPrefix, pduc) FOREACH widgets-»
«ENDDEFINE»

«REM»arricchimenti per i vari widget«ENDREM»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Widget-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Calendar-»
«IF enableEnrichment==true-»
	/// arricchimento per «this.metaType.name» [«name»]: aggiunta datepicker
	var addDateTo«name.toFirstUpper()» = function(){uiNRichLib.addDatePickerNRich("«getWidgetName(this, contextPrefix)»", «required ? "true" : "false"»)};
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addDateTo«name.toFirstUpper()»);
«ENDIF-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR Table-»
	«IF enableEnrichment==true-»
	/// arricchimento per «this.metaType.name» [«name»]: tooltip header di colonna
	var «name»Tips = [
	«IF this.databinding!=null-»
		'',«ENDIF-»«FOREACH columnModel.columns AS currCol SEPARATOR ","»
		''«ENDFOREACH-»
	];
	«LET "row_"+getFullID(this, contextPrefix) AS tableHtmlID-»«REM»id strano per table!«ENDREM»
	var enhanceGrid«name.toFirstUpper()» =  
		function(){uiNRichLib.dynaDisplayTableNRich(
			'«tableHtmlID»',«name»Tips
			)}; 
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", enhanceGrid«name.toFirstUpper()»);
	«ENDLET-»
	«ENDIF-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR TextField-»
«IF eventHandlers.select(eh|eh.eventType==EventTypes::KEY_PRESSED).size>0-»
«LET eventHandlers.selectFirst(eh|eh.eventType==EventTypes::KEY_PRESSED) AS keyPressedEvh-»
	/// arricchimento per «this.metaType.name» [«name»]: suggestion con interazioen server-side
	var addSuggestionsTo«name.toFirstUpper()» =  
		function(){uiNRichLib.addTextSuggestionNRich(
			'«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,keyPressedEvh, contextPrefix)».do',
			'«getWidgetName(this, contextPrefix)»',
			'«getOGNLForWidgetValue(this, contextPrefix, pduc)»',
			 «required ? "true" : "false"»)}; 
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addSuggestionsTo«name.toFirstUpper()»);
«ENDLET-»
«ELSE-»
	«IF enableEnrichment==true-»
	/// arricchimento di base per «this.metaType.name» [«name»]
	var addBasicEnrichmentTo«name.toFirstUpper()» =  
		function(){uiNRichLib.basicTextFieldNRich(
			'«getWidgetName(this, contextPrefix)»',
			 «required ? "true" : "false"», 
			 '«toJavaType(this.dataType,model)»', 
			 null)}; 
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addBasicEnrichmentTo«name.toFirstUpper()»);
	«ENDIF-»
«ENDIF-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR ComboBox-»
«IF eventHandlers.select(eh|eh.eventType==EventTypes::KEY_PRESSED).size>0-»
«LET eventHandlers.selectFirst(eh|eh.eventType==EventTypes::KEY_PRESSED) AS keyPressedEvh-»
	/// arricchimento per «this.metaType.name» [«name»]: suggestion con interazioen server-side
	var addSuggestionsTo«name.toFirstUpper()» =  
		function(){uiNRichLib.addComboSuggestionNRich(
			'«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,keyPressedEvh, contextPrefix)».do',
			'«getWidgetName(this, contextPrefix)»',
			'«getAppDataKey(databinding.appData)»',
			'«keySelector»',
			'«valueSelector»',
			«IF eventHandlers.select(evh|evh.eventType==EventTypes::VALUE_CHANGED).size>0-»
			«LET getRefreshTargetIds(this) AS targetIdsTemp-»
			«LET (Panel)(this.eContainer) AS parentPanel-»
			«LET targetIdsTemp!=null ? targetIdsTemp : {getFragmentId(parentPanel)} AS refreshIds-»
			'«FOREACH refreshIds AS currId SEPARATOR ","-»«currId»«ENDFOREACH-»',«REM»targetIds«ENDREM»
			'«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,this.eventHandlers.select(eh|eh.eventType==EventTypes::VALUE_CHANGED).first(), contextPrefix)».do',«REM»requestUri«ENDREM»
			'«cp.name»',«REM»pageId«ENDREM»
			'«cp.name»',«REM»formName«ENDREM»
			«ENDLET-»
			«ENDLET-»
			«ENDLET-»
			«ELSE-»
			'',
			'',
			'',
			'',
			«ENDIF-»
			«required ? "true" : "false"»)}; 
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addSuggestionsTo«name.toFirstUpper()»);
«ENDLET-»
«ELSE-»
	«IF (!(databinding!=null && isBoundToArray(this.databinding)) ||
          	  (databinding==null && dataType.metaType==TypedArray))-»
	/// arricchimento per «this.metaType.name» [«name»]: autonarrowing
	var addNarrowingTo«name.toFirstUpper()» =  
		function(){uiNRichLib.addComboNarrowingNRich(
			'«getWidgetName(this, contextPrefix)»',
			 «required ? "false" : "true"»)}; 
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addNarrowingTo«name.toFirstUpper()»);
	«ENDIF»
«ENDIF»
«ENDDEFINE»

«DEFINE toolTipEnrichments(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR WidgetsPanel-»
«IF widgets.select(w|(!isNullOrEmpty(w.tooltip) && w.enableEnrichment==true)).size>0-»
	/// arricchimento per «this.metaType.name» [«getFullID(this, contextPrefix)»]: aggiunta tooltip su label
	var «getFullID(this, contextPrefix)»Tips = [«FOREACH widgets.select(w|(!isNullOrEmpty(w.tooltip) && w.enableEnrichment==true)) AS currWidg SEPARATOR ","»
		{id:'«getFullID(currWidg,contextPrefix)»Lbl', tip:«jsLiteralValue(currWidg.tooltip)»}«ENDFOREACH-»
	];
	var addLblTipsTo«getFullID(this,contextPrefix).toFirstUpper()» = function(){uiNRichLib.addTooltipsByIDNRich(«getFullID(this, contextPrefix)»Tips)};
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getFullID(this,contextPrefix)»", addLblTipsTo«getFullID(this,contextPrefix).toFirstUpper()»);
«ENDIF-»
«ENDDEFINE»

«DEFINE enrichmentDefs(GUIModel model, ContentPanel cp, String contextPrefix, PDefUseConfig pduc) FOR MapView-»
	/// arricchimento per «this.metaType.name» [«name»]: mapView
	var addMapTo«name.toFirstUpper()» = function(){new ExtCsi.ui.maps.InitMap({
											idHiddenField: 'hidden_field_«this.name»',
											idDivToolbar: 'toolbar_«this.name»',
											idDivMappa: '«this.name»',
											idMappa: '«this.mapId»',
											actionName: contentPanelName,
											appDataName: '«getAppDataPropertyName(this.databinding.appData).toFirstLower()»',
											projectName: '«model.codComponente»'«IF eventHandlers!=null && eventHandlers.size > 0-»,
											clickEventUrl: '«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,eventHandlers.selectFirst(e|e.eventType == EventTypes::CLICKED),null)».do',
											refreshIds: [«LET getRefreshTargetIds(this) AS refreshIds-»«FOREACH refreshIds AS currId SEPARATOR ","-»'«currId»'«ENDFOREACH-»«ENDLET-»]
												«IF this.eventHandlers.selectFirst(evh|evh.eventType == EventTypes::EDIT_COMMITTED) != null-»
											,
											editingEventUrl: '«getStrutsActionConfigName(cp)»!«getHandlerMethodName(this,eventHandlers.selectFirst(e|e.eventType == EventTypes::EDIT_COMMITTED),null)».do',
											refreshEditingIds: [«LET getRefreshTargetIds(this) AS refreshIds-»«FOREACH refreshIds AS currId SEPARATOR ","-»'«currId»'«ENDFOREACH-»«ENDLET-»],
											editingDataName: '«getAppDataPropertyName(this.editDataBinding.appData).toFirstLower()»'
												«ENDIF-»
											«EXPAND MapViewGadgetConfig FOR this.gadgets»
											«ENDIF»					
										}).init()};
	
	uiEnricherMgr.registerEnrichment(contentPanelName, "p_«getParentPanel().name»", addMapTo«name.toFirstUpper()»);
«ENDDEFINE»

«DEFINE MapViewGadgetConfig FOR MapViewGadgets-»
«LET (MapView)eContainer AS mapview-»
	«IF this != null-»
											// configura gadget della mappa
		«IF layerSwitcher-»
											,
											// switch sfondo
											layerSwitcher: «jsLiteralValue(layerSwitcher)»,
											backgroundMapMapServiceName: «jsLiteralValue(this.backgroundMapMapServiceName)»,
											backgroundMapSwitcherLabel: «jsLiteralValue(this.backgroundMapSwitcherLabel)»,
											backgroundPhotoAerialMapServiceName: «jsLiteralValue(this.backgroundPhotoAerialMapServiceName)»,
											backgroundPhotoAerialSwitcherLabel: «jsLiteralValue(this.backgroundPhotoAerialSwitcherLabel)»
		«ENDIF-»
		«IF mapview.eventHandlers.selectFirst(evh|evh.eventType == EventTypes::EDIT_COMMITTED) != null-»
											,										
											// funzioni di editing
											pointEditingActive: «jsLiteralValue(this.pointEditingActive)»,
											lineEditingActive: «jsLiteralValue(this.lineEditingActive)»,
											polygonEditingActive: «jsLiteralValue(this.lineEditingActive)»
		«ENDIF-»
	«ENDIF-»
«ENDLET-»
«ENDDEFINE»

«REM»
File di configurazione del caricamento risorse per tag csiui:header
[DM] STDMDD-670: modificate chiamate
«ENDREM»
«DEFINE staticResourcesXML FOR GUIModel-»
«FILE getWebModuleConfigDir(true)+"/staticResources.xml"»<?xml version="1.0" encoding="UTF-8"?>
<files>
	<!-- risorse caricate in ogni pagina -->
	<file page="all">
		«EXPAND staticResources::staticResourcesXML FOR this-»
	</file>	
	«LET (List[ContentPanel])getAllContentPanels(this.structure.appWindow.appArea) AS allCP-»
		«EXPAND staticResourcesXML(this) FOREACH allCP-»
	«ENDLET-»
	«IF targetPlatform.enableRichUIBehavior && targetPlatform.enableFatClient-»
	<!-- risorsa JS del fat client -->
	<file page="main">
		«EXPAND staticResources::staticResourcesXMLFatClient FOR this-»
	</file>
	«ENDIF-»
</files>
«ENDFILE»
«ENDDEFINE»


«DEFINE staticResourcesXML(GUIModel model) FOR ContentPanel-»
	<!-- risorse specifiche del ContentPanel [«name»] -->
	<file page="«name»">
		«EXPAND staticResources::staticResourcesXML(model) FOR this-»
	</file>
«ENDDEFINE»
