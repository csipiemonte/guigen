«IMPORT guigen»
«IMPORT ecore»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»
«EXTENSION template::fatjs::FatJSExtensions»

«DEFINE main FOR GUIModel»
«FILE getJavascriptSrcDir(true)+"/fatclient.js"»
/**
 * Definizione della struttura ExtCSI dell'applicazione
 */

«EXPAND appAreaStruct(this) FOR this.structure.appWindow.appArea»
«ENDFILE»
«ENDDEFINE»

«DEFINE appAreaStruct(GUIModel model) FOR ApplicationArea»

var appArea = new ExtCsi.app.ApplicationArea(
	{
		menubar: «EXPAND menuBarStruct(model) FOR this.menubar-»,
		homePage: «getRegistryID(this.homePage)»
	}

);

«LET this.getAllContentPanels() AS allCP»
«EXPAND contentPanelStruct(model) FOREACH (List[ContentPanel])allCP»
«ENDLET»
«ENDDEFINE»

«DEFINE menuBarStruct(GUIModel model) FOR Menubar»
	new ExtCsi.ui.menu.Menubar(
		{topLevelMenu: 
			[
			«EXPAND menuStruct FOREACH this.topLevelMenu SEPARATOR ","-»
			]
		}
	)
«ENDDEFINE»

«DEFINE menuStruct FOR Menu-»
			new ExtCsi.ui.menu.Menu(
			{
				name: '«name»',
				label: '«label»'
				«IF submenu.size>0-»,submenu: [«EXPAND menuStruct FOREACH this.submenu SEPARATOR ","»]«ENDIF-»
			}
			)
«ENDDEFINE»

«DEFINE contentPanelStruct(GUIModel model) FOR ContentPanel»
/**
 * struttura del content panel «this.name»
 */ 
 
globalRegistry.registerObject('«getRegistryID(this)»', 
	new ExtCsi.ui.panels.ContentPanel(
		{
			name: '«name»',	
			panels: «EXPAND panelStruct(model) FOR panels»
		}
	)
);
«ENDDEFINE»

«DEFINE panelStruct(GUIModel model) FOR Panel»
«ENDDEFINE»

«DEFINE panelStruct(GUIModel model) FOR FormPanel»
			new ExtCsi.ui.panels.FormPanel(
				{
					«EXPAND panelCommonProperties(model) FOR this»,
					subpanels: [«EXPAND panelStruct(model) FOREACH subpanels SEPARATOR ","»]
				}
			)
«ENDDEFINE»

«DEFINE panelStruct(GUIModel model) FOR WidgetsPanel»
			new ExtCsi.ui.panels.WidgetsPanel(
				{
					«EXPAND panelCommonProperties(model) FOR this»,
					widgets: [«EXPAND widgetStruct(model) FOREACH widgets SEPARATOR ","»]
				}
			)
«ENDDEFINE»

«DEFINE panelStruct(GUIModel model) FOR CommandPanel»
			new ExtCsi.ui.panels.CommandPanel(
				{
					«EXPAND panelCommonProperties(model) FOR this»,
					widgets: [«EXPAND widgetStruct(model) FOREACH widgets SEPARATOR ","»]
				}
			)
«ENDDEFINE»


«DEFINE panelCommonProperties(GUIModel model) FOR Panel»
					name: «jsLiteralValue(this.name)»,
					label: «jsLiteralValue(this.label)»,
					layout: «EXPAND panelLayout FOR this.layout»,
					layoutSpec: «IF layoutSpec!=null»«EXPAND layoutSpec FOR this.layoutSpec»«ELSE» null«ENDIF»,
					scrollable: «jsLiteralValue(this.scrollable)»
«ENDDEFINE»

«DEFINE panelLayout FOR PanelLayout-»
«ERROR "layout "+this.metaType+" non gestito"»
«ENDDEFINE»

«DEFINE panelLayout FOR VerticalFlowPanelLayout-»new ExtCsi.ui.layout.VerticalFlowPanelLayout()«ENDDEFINE»

«DEFINE panelLayout FOR HorizontalFlowPanelLayout-»new ExtCsi.ui.layout.HorizontalFlowPanelLayout()«ENDDEFINE»

«DEFINE panelLayout FOR UDLRCPanelLayout-»new ExtCsi.ui.layout.UDLRCPanelLayout()«ENDDEFINE»

«DEFINE panelLayout FOR GridPanelLayout-»new ExtCsi.ui.layout.VerticalFlowPanelLayout({columns: «jsLiteralValue(columns)», rows: «jsLiteralValue(rows)»})«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR Widget»
«ERROR "widget "+this.metaType+" non gestito"»
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR TextField»
			new ExtCsi.ui.widgets.TextField(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR TextArea»
			new ExtCsi.ui.widgets.TextArea(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR PlainText»
			new ExtCsi.ui.widgets.PlainText(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR ComboBox»
			new ExtCsi.ui.widgets.ComboBox(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR CheckBox»
			new ExtCsi.ui.widgets.CheckBox(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR RadioButtons»
			new ExtCsi.ui.widgets.RadioButtons(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR Table»
			new ExtCsi.ui.widgets.Table(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR Calendar»
			new ExtCsi.ui.widgets.Calendar(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR TreeView»
			new ExtCsi.ui.widgets.TreeView(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR Button»
			new ExtCsi.ui.widgets.Button(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR ConfirmButton»
			new ExtCsi.ui.widgets.ConfirmButton(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR ResetButton»
			new ExtCsi.ui.widgets.ResetButton(
				{
					«EXPAND widgetCommonProperties(model) FOR this»
				}
			)
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR MenuView»
«ENDDEFINE»

«DEFINE widgetStruct(GUIModel model) FOR TabSwitcher»
«ENDDEFINE»

«DEFINE widgetCommonProperties(GUIModel model) FOR Widget»
					name: «jsLiteralValue(this.name)»,
					label: «jsLiteralValue(this.label)»,
					tooltip: «jsLiteralValue(this.tooltip)»,
					defaultVisible: «jsLiteralValue(this.defaultVisible)»,
					defaultEnabled: «jsLiteralValue(this.defaultEnabled)»,
					layoutSpec: «IF layoutSpec!=null»«EXPAND layoutSpec FOR this.layoutSpec»«ELSE» null«ENDIF»
«ENDDEFINE»

«DEFINE layoutSpec FOR WidgetLayoutSpecifier»
«ERROR "layoutspecifier "+this.metaType+" non supportato"»
«ENDDEFINE»

«DEFINE layoutSpec FOR UDLRCWidgetLayoutSpec»
new ExtCsi.ui.layout.UDLRCWidgetLayoutSpec({value: ExtCSI.ui.layout.UDLRCSpecConstants().«value»})
«ENDDEFINE»