«IMPORT guigen»
«IMPORT ecore»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»
«EXTENSION template::fatjs::FatJSExtensions»

«DEFINE types FOR GUIModel»
/**
 * def. e registrazione tipi base e non
 */
function registerTypes(){
«EXPAND type(null) FOREACH typedefs.types»
«EXPAND types FOREACH typedefs.namespaces»
«EXPAND types FOREACH typedefs.extNamespaces»
}

registerTypes();
«ENDDEFINE»

«DEFINE type(TypeNamespace tns) FOR Type»
«ERROR "type:"+metaType»
«ENDDEFINE»

«DEFINE type(TypeNamespace tns) FOR SimpleType»
globalRegistry.registerObject('«getRegistryID(this, tns)»',
	new ExtCsi.mdl.types.SimpleType(
		{ name: «jsLiteralValue(name)»,
		  code: ExtCsi.mdl.types.SimpleTypeCodes().«code»,
		  userDefined: «jsLiteralValue(userDefined)»,
		  nillable: «jsLiteralValue(nillable)»
		}
	)
);
«ENDDEFINE»

«REM»todo: il tns del supertipo dove lo prendo???«ENDREM»
«DEFINE type(TypeNamespace tns) FOR ComplexType»
globalRegistry.registerObject('«getRegistryID(this, tns)»',
	new ExtCsi.mdl.types.ComplexType(
		{ name: «jsLiteralValue(name)»,
		  «IF extends!=null-»extendType: '«getRegistryID(extends, tns)»',«ENDIF-» 
		  initFields: «jsLiteralValue(initFields)»,
		  fields: [«EXPAND field(tns) FOREACH this.fields SEPARATOR ","»]  
		}
	)
);
«ENDDEFINE»

«DEFINE field(TypeNamespace tns) FOR Field»
«LET type.eContainer.metaType == TypeNamespace ? ((TypeNamespace)type.eContainer) : null AS fieldTns»
new ExtCsi.mdl.types.Field(
	{
		name: «jsLiteralValue(name)»,
		type: '«getRegistryID(type, fieldTns)»'
	}
)
«ENDLET»
«ENDDEFINE»

«DEFINE type(TypeNamespace tns) FOR TypedArray»
globalRegistry.registerObject('«getRegistryID(this, tns)»',
	new ExtCsi.mdl.types.TypedArray(
		{ name: «jsLiteralValue(name)»,
		  componentType: '«getRegistryID(componentType,tns)»'  
		}
	)
);
«ENDDEFINE»

«DEFINE types FOR TypeNamespace»
«EXPAND type(this) FOREACH this.types»
«ENDDEFINE»