--------------------------------------------------------
-- FormFields for structure appdata 
--------------------------------------------------------

wizard FormFields4RecordAppdata {
	guard: self.isTypeOf(FormPanel)
	title: 'crea una struttura di campi a partire da application data di tipo strutturato'
	do {
		var genutils : new Native('it.csi.mddtools.guigen.genutils.GenUtils');
		var parentCP : ContentPanel := genutils.findParentContentPanel(self);
		var recordADList: Collection := parentCP.appData.select(ad|ad.type.isTypeOf(ComplexType));
		var recordAD : ApplicationData := UserInput.choose(
			'Selezionare l\'application data che conterrà il record da visualizzare',recordADList
		);
		var wp1: new WidgetsPanel;
		wp1.name:=UserInput.prompt('nome del pannello','wp'+recordAD.name.firstToUpperCase());
		var layout: new VerticalFlowPanelLayout;
		wp1.layout := layout;
		self.subpanels.add(wp1);
		var fieldsToShow: Collection := UserInput.chooseMany(
			'Scegliere i campi del record da visualizzare', recordAD.type.fields.select(f|f.type.isTypeOf(SimpleType))
		);
		for (currFld in fieldsToShow) { 
			wp1.addFieldWidget(currFld, recordAD);
		}
	} 
}

operation WidgetsPanel addFieldWidget(f: Field, ad: ApplicationData): Boolean {
	var w: DataWidget;
	if (f.type.code == SimpleTypeCodes#BOOLEAN)
		w := createFieldCheckBox(f,ad);
	else if (f.type.code == SimpleTypeCodes#DATE)
		w := createFieldCalendar(f,ad);
	else 
		w:= createFieldTextField(f,ad);
	w.name := 'tf'+f.name.firstToUpperCase();
	w.dataType := f.type;
	w.label := f.name;
	var bnd: new AppDataBinding;
	bnd.appData := ad;
	bnd.path := f.name;
	w.databinding := bnd;
	self.widgets.add(w);
}


function createFieldCheckBox(f: Field, ad: ApplicationData): Boolean {
	var w : new CheckBox;
	return w;
}

function createFieldTextField(f: Field, ad: ApplicationData): Boolean {
	var w : new TextField;
	return w;
}

function createFieldCalendar(f: Field, ad: ApplicationData): Boolean {
	var w : new Calendar;
	return w;
}
--------------------------------------------------------
-- TABLE for collection appdata 
--------------------------------------------------------


wizard Table4CollectionAppdata {
	guard : self.isTypeOf(WidgetsPanel)
	title : 'Crea una tabella da applicaton data di tipo collection'
	do {
		var genutils : new Native('it.csi.mddtools.guigen.genutils.GenUtils');
		var parentCP : ContentPanel := genutils.findParentContentPanel(self);
		var collAppdata: Collection;
		collAppdata := parentCP.appData.select(ad| (ad.type.isTypeOf(TypedArray) and ad.type.componentType.isTypeOf(ComplexType)));
		var collectionAD : ApplicationData := UserInput.choose('selezionare l\'application data che conterrà i dati della tabella:',collAppdata); 
		var recordType: ComplexType := collectionAD.type.componentType;
		var table: new Table;
		table.name := UserInput.prompt('nome della tabella:','tbl'+collectionAD.name.firstToUpperCase());
		var collBnd : new AppDataBinding;
		collBnd.appData := collectionAD;
		table.multiDataBinding := collBnd;
		var fieldsToShow: Collection := UserInput.chooseMany(
			'La tabella visualizzerà elementi di tipo '+recordType.name+
			'scegliere i campi da visualizzare tra quelli seguenti',
			recordType.fields
		);
		var colModel : new ColumnModel;
		-- id
		var selectionType: String := UserInput.choose(
			'Che tipo di selezione è possibile effettuare sulla tabella?',Sequence{'0-nessuna selezione','1-selezione singola','2-selezione multipla'},'0-'
		);
		if (selectionType <> '' and not selectionType.startsWith('0-')){
			var pkField: Field := UserInput.choose(
				'Scegliere il campo che contiene l\'identificatore del record',
				recordType.fields
			);
			var multiSel: Boolean := selectionType.startsWith('2-');
			colModel.valueSelector := pkField.name;
			var selADList : Collection := 
				parentCP.appData.select(ad| (multiSel and ad.type.isTypeOf(TypedArray)) or (not multiSel and ad.type.isTypeOf(SimpleType)));
			var selAD: ApplicationData := UserInput.choose(
				'Scegliere l\'application data che conterrà la selezione',selADList);
			if (selAD <> null){
				var dataBnd: new AppDataBinding;
				dataBnd.appData := selAD;
				table.databinding := dataBnd;
			}
		}
		
		
		table.columnModel := colModel;
		for (currFld in fieldsToShow) { 
			var currColumn : new Column;
			currColumn.label := currFld.name;
			currColumn.selector := currFld.name;
			colModel.columns.add(currColumn);
		}
		self.widgets.add(table);
	}
}

--------------------------------------------------------
-- SIMPLE PAGE STRUCTURE 
--------------------------------------------------------

wizard SimplePageStructure {
	guard: self.isTypeOf(ContentPanel)
	title: 'crea scheletro pagina (con scelta template)'
	do {
		if ((self.panels.size()>0) ) {
			UserInput.inform(
				'Attenzione: non è possibile creare la struttura della pagina\n'+
				'poichè è già presente un FormPanel' 
			);
		}
		else {
			var template : String;
			var templates : Sequence := Sequence{
				'A- a quadranti, tre colonne orizzontali più sezioni in alto e in basso',
				'B- a quadranti, due colonne (sinistra + centro) più sezioni in alto e in basso',
				'C- a quadranti, due colonne (centro + destra) più sezioni in alto e in basso',
				'D- a sviluppo verticalte, con colonna unica'
			};
			UserInput.inform(
				'Questo wizard permette di creare la struttra della pagina\n'+
				'con possibilità di scegliere tra differenti template'
			);
			var mainLabel := UserInput.prompt('Etichetta del pannello principale', '--mainLabel--');
			template := UserInput.choose(
				'Scegliere il template di struttura da utilizzare',
				templates, ''
			);
			if (template <> ''){
				var centerLabel :='--centerLabel--';
				if (template.startsWith('A-')) {
					centerLabel := UserInput.prompt('Etichetta del pannello centrale',centerLabel);
					if (centerLabel <> null and centerLabel <> '') 
						self.createPageTemplateA(mainLabel, centerLabel);
					else
						abort;
				}
				else if (template.startsWith('B-')) {
					centerLabel := UserInput.prompt('Etichetta del pannello centrale',centerLabel);
					if (centerLabel <> null and centerLabel <> '')
						self.createPageTemplateB(mainLabel, centerLabel);
					else
						abort;
				}
				else if (template.startsWith('C-')) {
					centerLabel := UserInput.prompt('Etichetta del pannello centrale',centerLabel);
					if (centerLabel <> null and centerLabel <> '')
						self.createPageTemplateC(mainLabel, centerLabel);
					else
						abort;
				}
				else if (template.startsWith('D-')) {
					centerLabel := UserInput.prompt('Etichetta del pannello centrale',centerLabel);
					if (centerLabel <> null and centerLabel <> '')
						self.createPageTemplateD(mainLabel, centerLabel);
					else
						abort;
				}
			}
			else
				abort;
		}
	} 
}

/**
 * udlrc completo
 */
operation ContentPanel createPageTemplateA(mainLabel: String, centerLabel: String) : Boolean {
	return self.createPageUDLRC(mainLabel, centerLabel, true,true,true,true,true);
}

/**
 * udlc
 */
operation ContentPanel createPageTemplateB(mainLabel: String, centerLabel: String) : Boolean {
	return self.createPageUDLRC(mainLabel, centerLabel, true,true,true,false,true);
}

/**
 * udrc
 */
operation ContentPanel createPageTemplateC(mainLabel: String, centerLabel: String) : Boolean {
	return self.createPageUDLRC(mainLabel, centerLabel, true,true,false,true,true);
}

/**
 * udlrc parametrico
 */
operation ContentPanel createPageUDLRC(mainLabel: String, centerLabel: String,
	 up: Boolean ,  down: Boolean, left: Boolean, right: Boolean, center: Boolean) : Boolean {
	var pMain: new FormPanel;
	var udlrcl: UDLRCPanelLayout;
	var pLeft: FormPanel;
	var pCenter: FormPanel;
	var pDown: FormPanel;
	var pRight: FormPanel;
	var pUp: FormPanel;

	self.panels := pMain;
	pMain.name := 'pMain';
	pMain.label=mainLabel;
	pMain.layout := udlrcl;

	if (up) {
		pUp := pMain.addSubFormPanel('pUp', null, 'UP');
	}
	if (down) {
		pDown := pMain.addSubFormPanel('pDown', null, 'DOWN');
	}
	if (left) {
		pLeft := pMain.addSubFormPanel('pLeft', null, 'LEFT');
	}
	if (center){
		pCenter := pMain.addSubFormPanel('pCenter', centerLabel, 'CENTER');
	}
	if (right){
		pRight := pMain.addSubFormPanel('pRight', null, 'RIGHT');
	}
	-- menu?
	var mnuOptions: Sequence;
	mnuOptions := Sequence{'A- non visualizzare'};
	if (left) mnuOptions.add('B-nel pannello di sinistra (menu verticale)');
	if (up) mnuOptions.add('C-nel pannello in alto (menu orizz.)');  
	var posMenu := UserInput.choose('Scegliere dove visualizzare il menu',
		mnuOptions,'A-');
	if (posMenu <> '' and not posMenu.startsWith('A-')){
		if(posMenu.startsWith('B')){
			pLeft.addMenuView(false);
		}
		else if(posMenu.startsWith('C')){
			pUp.addMenuView(true);
		}
	}
	if (up){
		var insertUIP := UserInput.choose('Visualizzare il pannello di info utente?', Sequence{'si','no'},'n');
		if (insertUIP <> '' and insertUIP.startsWith('s'))
			pUp.addUserInfo();
	}
	return true;
}


// aggiunge un nuovo form panel come sottopannello nella posizione specificata
// (se specificata)
function FormPanel addSubFormPanel(name: String, label: String, constraint: String) : FormPanel{
	var panel: new FormPanel;
	panel.name := name;
	panel.label := label;
	if (constraint <> null){
		var layoutSpec: new UDLRCWidgetLayoutSpec;
		if (constraint == 'UP')
			layoutSpec.value := UDLRCSpecConstants#UP;
		else if (constraint == 'DOWN')
			layoutSpec.value := UDLRCSpecConstants#DOWN;
		else if (constraint == 'CENTER')
			layoutSpec.value := UDLRCSpecConstants#CENTER;
		else if (constraint == 'LEFT')
			layoutSpec.value := UDLRCSpecConstants#LEFT;
		else if (constraint == 'RIGHT')
			layoutSpec.value := UDLRCSpecConstants#RIGHT;
	} 
	self.subpanels.add(panel);
	return panel;	
}

/**
 * aggiunge un sottomenu MenuPanel e una MenuView
 */
operation FormPanel addMenuView(horizontal: Boolean) : Boolean {
	var pMenu : new MenuPanel;
	var mnuView: new MenuView;
	var layout: PanelLayout;
	pMenu.name := 'pMenu';
	if (horizontal){
		layout := new HorizontalFlowPanelLayout;
	}
	else {
		layout := new VerticalFlowPanelLayout;
	}
	pMenu.layout := layout;
	mnuView.name='mnuView';
	pMenu.widgets.add(mnuView);
	self.subpanels.add(pMenu);
}

operation FormPanel addUserInfo() : Boolean {
	var uip : new UserInfoPanel;
	var vl: new VerticalFlowPanelLayout;
	uip.name := 'pUserInfo';
	uip.layout := vl;
	self.subpanels.add(uip);
}

/**
 * a sviluppo verticale 1 col
 */
operation ContentPanel createPageTemplateD(mainLabel: String, centerLabel: String ) : Boolean {
	return self.createPageUDLRC(mainLabel, centerLabel, true,true,false,false,true);
}

