/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package it.csi.mddtools.guigen.provider;

import it.csi.mddtools.guigen.util.GuigenAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GuigenItemProviderAdapterFactory extends GuigenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GuigenItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ApplicationArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationAreaItemProvider applicationAreaItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ApplicationArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAreaAdapter() {
		if (applicationAreaItemProvider == null) {
			applicationAreaItemProvider = new ApplicationAreaItemProvider(this);
		}

		return applicationAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Menubar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenubarItemProvider menubarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Menubar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenubarAdapter() {
		if (menubarItemProvider == null) {
			menubarItemProvider = new MenubarItemProvider(this);
		}

		return menubarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Statusbar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusbarItemProvider statusbarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Statusbar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusbarAdapter() {
		if (statusbarItemProvider == null) {
			statusbarItemProvider = new StatusbarItemProvider(this);
		}

		return statusbarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Titlebar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitlebarItemProvider titlebarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Titlebar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitlebarAdapter() {
		if (titlebarItemProvider == null) {
			titlebarItemProvider = new TitlebarItemProvider(this);
		}

		return titlebarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ContentPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentPanelItemProvider contentPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ContentPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentPanelAdapter() {
		if (contentPanelItemProvider == null) {
			contentPanelItemProvider = new ContentPanelItemProvider(this);
		}

		return contentPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.FormPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormPanelItemProvider formPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.FormPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormPanelAdapter() {
		if (formPanelItemProvider == null) {
			formPanelItemProvider = new FormPanelItemProvider(this);
		}

		return formPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TabSetPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabSetPanelItemProvider tabSetPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TabSetPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabSetPanelAdapter() {
		if (tabSetPanelItemProvider == null) {
			tabSetPanelItemProvider = new TabSetPanelItemProvider(this);
		}

		return tabSetPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CommandWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandWidgetItemProvider commandWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CommandWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandWidgetAdapter() {
		if (commandWidgetItemProvider == null) {
			commandWidgetItemProvider = new CommandWidgetItemProvider(this);
		}

		return commandWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.DataWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataWidgetItemProvider dataWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.DataWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataWidgetAdapter() {
		if (dataWidgetItemProvider == null) {
			dataWidgetItemProvider = new DataWidgetItemProvider(this);
		}

		return dataWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TextField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextFieldItemProvider textFieldItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TextField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextFieldAdapter() {
		if (textFieldItemProvider == null) {
			textFieldItemProvider = new TextFieldItemProvider(this);
		}

		return textFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TextArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextAreaItemProvider textAreaItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TextArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAreaAdapter() {
		if (textAreaItemProvider == null) {
			textAreaItemProvider = new TextAreaItemProvider(this);
		}

		return textAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Calendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalendarItemProvider calendarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Calendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalendarAdapter() {
		if (calendarItemProvider == null) {
			calendarItemProvider = new CalendarItemProvider(this);
		}

		return calendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ComboBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComboBoxItemProvider comboBoxItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ComboBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComboBoxAdapter() {
		if (comboBoxItemProvider == null) {
			comboBoxItemProvider = new ComboBoxItemProvider(this);
		}

		return comboBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckBoxItemProvider checkBoxItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckBoxAdapter() {
		if (checkBoxItemProvider == null) {
			checkBoxItemProvider = new CheckBoxItemProvider(this);
		}

		return checkBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GUIModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIModelItemProvider guiModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GUIModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIModelAdapter() {
		if (guiModelItemProvider == null) {
			guiModelItemProvider = new GUIModelItemProvider(this);
		}

		return guiModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GUIStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIStructureItemProvider guiStructureItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GUIStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIStructureAdapter() {
		if (guiStructureItemProvider == null) {
			guiStructureItemProvider = new GUIStructureItemProvider(this);
		}

		return guiStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GUIBehaviors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIBehaviorsItemProvider guiBehaviorsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GUIBehaviors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIBehaviorsAdapter() {
		if (guiBehaviorsItemProvider == null) {
			guiBehaviorsItemProvider = new GUIBehaviorsItemProvider(this);
		}

		return guiBehaviorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RadioButtons} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioButtonsItemProvider radioButtonsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RadioButtons}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioButtonsAdapter() {
		if (radioButtonsItemProvider == null) {
			radioButtonsItemProvider = new RadioButtonsItemProvider(this);
		}

		return radioButtonsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioButtonItemProvider radioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioButtonAdapter() {
		if (radioButtonItemProvider == null) {
			radioButtonItemProvider = new RadioButtonItemProvider(this);
		}

		return radioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ResetButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResetButtonItemProvider resetButtonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ResetButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResetButtonAdapter() {
		if (resetButtonItemProvider == null) {
			resetButtonItemProvider = new ResetButtonItemProvider(this);
		}

		return resetButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ConfirmButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfirmButtonItemProvider confirmButtonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ConfirmButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfirmButtonAdapter() {
		if (confirmButtonItemProvider == null) {
			confirmButtonItemProvider = new ConfirmButtonItemProvider(this);
		}

		return confirmButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GUIFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIFlowItemProvider guiFlowItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GUIFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIFlowAdapter() {
		if (guiFlowItemProvider == null) {
			guiFlowItemProvider = new GUIFlowItemProvider(this);
		}

		return guiFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.FlowState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowStateItemProvider flowStateItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.FlowState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowStateAdapter() {
		if (flowStateItemProvider == null) {
			flowStateItemProvider = new FlowStateItemProvider(this);
		}

		return flowStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.FlowTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowTransitionItemProvider flowTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.FlowTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowTransitionAdapter() {
		if (flowTransitionItemProvider == null) {
			flowTransitionItemProvider = new FlowTransitionItemProvider(this);
		}

		return flowTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.HorizontalFlowPanelLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalFlowPanelLayoutItemProvider horizontalFlowPanelLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.HorizontalFlowPanelLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalFlowPanelLayoutAdapter() {
		if (horizontalFlowPanelLayoutItemProvider == null) {
			horizontalFlowPanelLayoutItemProvider = new HorizontalFlowPanelLayoutItemProvider(this);
		}

		return horizontalFlowPanelLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.VerticalFlowPanelLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerticalFlowPanelLayoutItemProvider verticalFlowPanelLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.VerticalFlowPanelLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerticalFlowPanelLayoutAdapter() {
		if (verticalFlowPanelLayoutItemProvider == null) {
			verticalFlowPanelLayoutItemProvider = new VerticalFlowPanelLayoutItemProvider(this);
		}

		return verticalFlowPanelLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UDLRCPanelLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UDLRCPanelLayoutItemProvider udlrcPanelLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UDLRCPanelLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUDLRCPanelLayoutAdapter() {
		if (udlrcPanelLayoutItemProvider == null) {
			udlrcPanelLayoutItemProvider = new UDLRCPanelLayoutItemProvider(this);
		}

		return udlrcPanelLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UDLRCWidgetLayoutSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UDLRCWidgetLayoutSpecItemProvider udlrcWidgetLayoutSpecItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UDLRCWidgetLayoutSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUDLRCWidgetLayoutSpecAdapter() {
		if (udlrcWidgetLayoutSpecItemProvider == null) {
			udlrcWidgetLayoutSpecItemProvider = new UDLRCWidgetLayoutSpecItemProvider(this);
		}

		return udlrcWidgetLayoutSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Menu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemProvider menuItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Menu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuAdapter() {
		if (menuItemProvider == null) {
			menuItemProvider = new MenuItemProvider(this);
		}

		return menuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MenuItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemItemProvider menuItemItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MenuItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuItemAdapter() {
		if (menuItemItemProvider == null) {
			menuItemItemProvider = new MenuItemItemProvider(this);
		}

		return menuItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GlobalFlowTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalFlowTransitionItemProvider globalFlowTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GlobalFlowTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalFlowTransitionAdapter() {
		if (globalFlowTransitionItemProvider == null) {
			globalFlowTransitionItemProvider = new GlobalFlowTransitionItemProvider(this);
		}

		return globalFlowTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.DisabledComponentSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisabledComponentSetItemProvider disabledComponentSetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.DisabledComponentSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisabledComponentSetAdapter() {
		if (disabledComponentSetItemProvider == null) {
			disabledComponentSetItemProvider = new DisabledComponentSetItemProvider(this);
		}

		return disabledComponentSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ColumnModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnModelItemProvider columnModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ColumnModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnModelAdapter() {
		if (columnModelItemProvider == null) {
			columnModelItemProvider = new ColumnModelItemProvider(this);
		}

		return columnModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActionEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionEventItemProvider actionEventItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActionEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionEventAdapter() {
		if (actionEventItemProvider == null) {
			actionEventItemProvider = new ActionEventItemProvider(this);
		}

		return actionEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ONOFFAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ONOFFActionItemProvider onoffActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ONOFFAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createONOFFActionAdapter() {
		if (onoffActionItemProvider == null) {
			onoffActionItemProvider = new ONOFFActionItemProvider(this);
		}

		return onoffActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CustomAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomActionItemProvider customActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CustomAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomActionAdapter() {
		if (customActionItemProvider == null) {
			customActionItemProvider = new CustomActionItemProvider(this);
		}

		return customActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.VisibilityAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisibilityActionItemProvider visibilityActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.VisibilityAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisibilityActionAdapter() {
		if (visibilityActionItemProvider == null) {
			visibilityActionItemProvider = new VisibilityActionItemProvider(this);
		}

		return visibilityActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RefreshViewAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefreshViewActionItemProvider refreshViewActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RefreshViewAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefreshViewActionAdapter() {
		if (refreshViewActionItemProvider == null) {
			refreshViewActionItemProvider = new RefreshViewActionItemProvider(this);
		}

		return refreshViewActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.JumpAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JumpActionItemProvider jumpActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.JumpAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJumpActionAdapter() {
		if (jumpActionItemProvider == null) {
			jumpActionItemProvider = new JumpActionItemProvider(this);
		}

		return jumpActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ExecAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecActionItemProvider execActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ExecAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecActionAdapter() {
		if (execActionItemProvider == null) {
			execActionItemProvider = new ExecActionItemProvider(this);
		}

		return execActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.EventHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventHandlerItemProvider eventHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.EventHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventHandlerAdapter() {
		if (eventHandlerItemProvider == null) {
			eventHandlerItemProvider = new EventHandlerItemProvider(this);
		}

		return eventHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.DialogPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogPanelItemProvider dialogPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.DialogPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogPanelAdapter() {
		if (dialogPanelItemProvider == null) {
			dialogPanelItemProvider = new DialogPanelItemProvider(this);
		}

		return dialogPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ShowDialogAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShowDialogActionItemProvider showDialogActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ShowDialogAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShowDialogActionAdapter() {
		if (showDialogActionItemProvider == null) {
			showDialogActionItemProvider = new ShowDialogActionItemProvider(this);
		}

		return showDialogActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActionResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionResultItemProvider actionResultItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActionResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionResultAdapter() {
		if (actionResultItemProvider == null) {
			actionResultItemProvider = new ActionResultItemProvider(this);
		}

		return actionResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Header} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderItemProvider headerItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Header}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderAdapter() {
		if (headerItemProvider == null) {
			headerItemProvider = new HeaderItemProvider(this);
		}

		return headerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Footer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FooterItemProvider footerItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Footer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFooterAdapter() {
		if (footerItemProvider == null) {
			footerItemProvider = new FooterItemProvider(this);
		}

		return footerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.AppWindow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppWindowItemProvider appWindowItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.AppWindow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppWindowAdapter() {
		if (appWindowItemProvider == null) {
			appWindowItemProvider = new AppWindowItemProvider(this);
		}

		return appWindowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.StaticLinks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticLinksItemProvider staticLinksItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.StaticLinks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticLinksAdapter() {
		if (staticLinksItemProvider == null) {
			staticLinksItemProvider = new StaticLinksItemProvider(this);
		}

		return staticLinksItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.SequenceAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceActionItemProvider sequenceActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.SequenceAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceActionAdapter() {
		if (sequenceActionItemProvider == null) {
			sequenceActionItemProvider = new SequenceActionItemProvider(this);
		}

		return sequenceActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.JumpBackAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JumpBackActionItemProvider jumpBackActionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.JumpBackAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJumpBackActionAdapter() {
		if (jumpBackActionItemProvider == null) {
			jumpBackActionItemProvider = new JumpBackActionItemProvider(this);
		}

		return jumpBackActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (applicationAreaItemProvider != null) applicationAreaItemProvider.dispose();
		if (menubarItemProvider != null) menubarItemProvider.dispose();
		if (statusbarItemProvider != null) statusbarItemProvider.dispose();
		if (titlebarItemProvider != null) titlebarItemProvider.dispose();
		if (contentPanelItemProvider != null) contentPanelItemProvider.dispose();
		if (formPanelItemProvider != null) formPanelItemProvider.dispose();
		if (tabSetPanelItemProvider != null) tabSetPanelItemProvider.dispose();
		if (commandWidgetItemProvider != null) commandWidgetItemProvider.dispose();
		if (dataWidgetItemProvider != null) dataWidgetItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (textFieldItemProvider != null) textFieldItemProvider.dispose();
		if (textAreaItemProvider != null) textAreaItemProvider.dispose();
		if (calendarItemProvider != null) calendarItemProvider.dispose();
		if (comboBoxItemProvider != null) comboBoxItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (checkBoxItemProvider != null) checkBoxItemProvider.dispose();
		if (guiModelItemProvider != null) guiModelItemProvider.dispose();
		if (guiStructureItemProvider != null) guiStructureItemProvider.dispose();
		if (guiBehaviorsItemProvider != null) guiBehaviorsItemProvider.dispose();
		if (radioButtonsItemProvider != null) radioButtonsItemProvider.dispose();
		if (radioButtonItemProvider != null) radioButtonItemProvider.dispose();
		if (resetButtonItemProvider != null) resetButtonItemProvider.dispose();
		if (confirmButtonItemProvider != null) confirmButtonItemProvider.dispose();
		if (guiFlowItemProvider != null) guiFlowItemProvider.dispose();
		if (flowStateItemProvider != null) flowStateItemProvider.dispose();
		if (flowTransitionItemProvider != null) flowTransitionItemProvider.dispose();
		if (horizontalFlowPanelLayoutItemProvider != null) horizontalFlowPanelLayoutItemProvider.dispose();
		if (verticalFlowPanelLayoutItemProvider != null) verticalFlowPanelLayoutItemProvider.dispose();
		if (udlrcPanelLayoutItemProvider != null) udlrcPanelLayoutItemProvider.dispose();
		if (udlrcWidgetLayoutSpecItemProvider != null) udlrcWidgetLayoutSpecItemProvider.dispose();
		if (imageItemProvider != null) imageItemProvider.dispose();
		if (menuItemProvider != null) menuItemProvider.dispose();
		if (menuItemItemProvider != null) menuItemItemProvider.dispose();
		if (globalFlowTransitionItemProvider != null) globalFlowTransitionItemProvider.dispose();
		if (disabledComponentSetItemProvider != null) disabledComponentSetItemProvider.dispose();
		if (columnModelItemProvider != null) columnModelItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (actionEventItemProvider != null) actionEventItemProvider.dispose();
		if (onoffActionItemProvider != null) onoffActionItemProvider.dispose();
		if (customActionItemProvider != null) customActionItemProvider.dispose();
		if (visibilityActionItemProvider != null) visibilityActionItemProvider.dispose();
		if (refreshViewActionItemProvider != null) refreshViewActionItemProvider.dispose();
		if (jumpActionItemProvider != null) jumpActionItemProvider.dispose();
		if (execActionItemProvider != null) execActionItemProvider.dispose();
		if (eventHandlerItemProvider != null) eventHandlerItemProvider.dispose();
		if (dialogPanelItemProvider != null) dialogPanelItemProvider.dispose();
		if (showDialogActionItemProvider != null) showDialogActionItemProvider.dispose();
		if (actionResultItemProvider != null) actionResultItemProvider.dispose();
		if (headerItemProvider != null) headerItemProvider.dispose();
		if (footerItemProvider != null) footerItemProvider.dispose();
		if (appWindowItemProvider != null) appWindowItemProvider.dispose();
		if (staticLinksItemProvider != null) staticLinksItemProvider.dispose();
		if (sequenceActionItemProvider != null) sequenceActionItemProvider.dispose();
		if (jumpBackActionItemProvider != null) jumpBackActionItemProvider.dispose();
	}

}
