/**
 * <copyright>(C) Copyright 2011 CSI-PIEMONTE
 * </copyright>
 *
 * $Id$
 */
package it.csi.mddtools.guigen.provider;

import it.csi.mddtools.guigen.util.GuigenAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GuigenItemProviderAdapterFactory extends GuigenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GuigenItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ApplicationArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationAreaItemProvider applicationAreaItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ApplicationArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAreaAdapter() {
		if (applicationAreaItemProvider == null) {
			applicationAreaItemProvider = new ApplicationAreaItemProvider(this);
		}

		return applicationAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Menubar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenubarItemProvider menubarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Menubar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenubarAdapter() {
		if (menubarItemProvider == null) {
			menubarItemProvider = new MenubarItemProvider(this);
		}

		return menubarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Statusbar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusbarItemProvider statusbarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Statusbar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusbarAdapter() {
		if (statusbarItemProvider == null) {
			statusbarItemProvider = new StatusbarItemProvider(this);
		}

		return statusbarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Titlebar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TitlebarItemProvider titlebarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Titlebar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTitlebarAdapter() {
		if (titlebarItemProvider == null) {
			titlebarItemProvider = new TitlebarItemProvider(this);
		}

		return titlebarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ContentPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentPanelItemProvider contentPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ContentPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentPanelAdapter() {
		if (contentPanelItemProvider == null) {
			contentPanelItemProvider = new ContentPanelItemProvider(this);
		}

		return contentPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.FormPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormPanelItemProvider formPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.FormPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormPanelAdapter() {
		if (formPanelItemProvider == null) {
			formPanelItemProvider = new FormPanelItemProvider(this);
		}

		return formPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TabSetPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabSetPanelItemProvider tabSetPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TabSetPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabSetPanelAdapter() {
		if (tabSetPanelItemProvider == null) {
			tabSetPanelItemProvider = new TabSetPanelItemProvider(this);
		}

		return tabSetPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CommandWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandWidgetItemProvider commandWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CommandWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandWidgetAdapter() {
		if (commandWidgetItemProvider == null) {
			commandWidgetItemProvider = new CommandWidgetItemProvider(this);
		}

		return commandWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.DataWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataWidgetItemProvider dataWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.DataWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataWidgetAdapter() {
		if (dataWidgetItemProvider == null) {
			dataWidgetItemProvider = new DataWidgetItemProvider(this);
		}

		return dataWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TextField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextFieldItemProvider textFieldItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TextField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextFieldAdapter() {
		if (textFieldItemProvider == null) {
			textFieldItemProvider = new TextFieldItemProvider(this);
		}

		return textFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TextArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextAreaItemProvider textAreaItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TextArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAreaAdapter() {
		if (textAreaItemProvider == null) {
			textAreaItemProvider = new TextAreaItemProvider(this);
		}

		return textAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Calendar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalendarItemProvider calendarItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Calendar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalendarAdapter() {
		if (calendarItemProvider == null) {
			calendarItemProvider = new CalendarItemProvider(this);
		}

		return calendarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ComboBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComboBoxItemProvider comboBoxItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ComboBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComboBoxAdapter() {
		if (comboBoxItemProvider == null) {
			comboBoxItemProvider = new ComboBoxItemProvider(this);
		}

		return comboBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckBoxItemProvider checkBoxItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckBoxAdapter() {
		if (checkBoxItemProvider == null) {
			checkBoxItemProvider = new CheckBoxItemProvider(this);
		}

		return checkBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GUIModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIModelItemProvider guiModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GUIModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIModelAdapter() {
		if (guiModelItemProvider == null) {
			guiModelItemProvider = new GUIModelItemProvider(this);
		}

		return guiModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GUIStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIStructureItemProvider guiStructureItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GUIStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIStructureAdapter() {
		if (guiStructureItemProvider == null) {
			guiStructureItemProvider = new GUIStructureItemProvider(this);
		}

		return guiStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GUIBehaviors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIBehaviorsItemProvider guiBehaviorsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GUIBehaviors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIBehaviorsAdapter() {
		if (guiBehaviorsItemProvider == null) {
			guiBehaviorsItemProvider = new GUIBehaviorsItemProvider(this);
		}

		return guiBehaviorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RadioButtons} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioButtonsItemProvider radioButtonsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RadioButtons}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioButtonsAdapter() {
		if (radioButtonsItemProvider == null) {
			radioButtonsItemProvider = new RadioButtonsItemProvider(this);
		}

		return radioButtonsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioButtonItemProvider radioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioButtonAdapter() {
		if (radioButtonItemProvider == null) {
			radioButtonItemProvider = new RadioButtonItemProvider(this);
		}

		return radioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ResetButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResetButtonItemProvider resetButtonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ResetButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResetButtonAdapter() {
		if (resetButtonItemProvider == null) {
			resetButtonItemProvider = new ResetButtonItemProvider(this);
		}

		return resetButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ConfirmButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfirmButtonItemProvider confirmButtonItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ConfirmButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfirmButtonAdapter() {
		if (confirmButtonItemProvider == null) {
			confirmButtonItemProvider = new ConfirmButtonItemProvider(this);
		}

		return confirmButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.HorizontalFlowPanelLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalFlowPanelLayoutItemProvider horizontalFlowPanelLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.HorizontalFlowPanelLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalFlowPanelLayoutAdapter() {
		if (horizontalFlowPanelLayoutItemProvider == null) {
			horizontalFlowPanelLayoutItemProvider = new HorizontalFlowPanelLayoutItemProvider(this);
		}

		return horizontalFlowPanelLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.VerticalFlowPanelLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerticalFlowPanelLayoutItemProvider verticalFlowPanelLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.VerticalFlowPanelLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerticalFlowPanelLayoutAdapter() {
		if (verticalFlowPanelLayoutItemProvider == null) {
			verticalFlowPanelLayoutItemProvider = new VerticalFlowPanelLayoutItemProvider(this);
		}

		return verticalFlowPanelLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UDLRCPanelLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UDLRCPanelLayoutItemProvider udlrcPanelLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UDLRCPanelLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUDLRCPanelLayoutAdapter() {
		if (udlrcPanelLayoutItemProvider == null) {
			udlrcPanelLayoutItemProvider = new UDLRCPanelLayoutItemProvider(this);
		}

		return udlrcPanelLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UDLRCWidgetLayoutSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UDLRCWidgetLayoutSpecItemProvider udlrcWidgetLayoutSpecItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UDLRCWidgetLayoutSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUDLRCWidgetLayoutSpecAdapter() {
		if (udlrcWidgetLayoutSpecItemProvider == null) {
			udlrcWidgetLayoutSpecItemProvider = new UDLRCWidgetLayoutSpecItemProvider(this);
		}

		return udlrcWidgetLayoutSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Menu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemProvider menuItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Menu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuAdapter() {
		if (menuItemProvider == null) {
			menuItemProvider = new MenuItemProvider(this);
		}

		return menuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MenuItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuItemItemProvider menuItemItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MenuItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuItemAdapter() {
		if (menuItemItemProvider == null) {
			menuItemItemProvider = new MenuItemItemProvider(this);
		}

		return menuItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.DisabledComponentSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisabledComponentSetItemProvider disabledComponentSetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.DisabledComponentSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisabledComponentSetAdapter() {
		if (disabledComponentSetItemProvider == null) {
			disabledComponentSetItemProvider = new DisabledComponentSetItemProvider(this);
		}

		return disabledComponentSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ColumnModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnModelItemProvider columnModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ColumnModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnModelAdapter() {
		if (columnModelItemProvider == null) {
			columnModelItemProvider = new ColumnModelItemProvider(this);
		}

		return columnModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CommandEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandEventItemProvider commandEventItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CommandEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandEventAdapter() {
		if (commandEventItemProvider == null) {
			commandEventItemProvider = new CommandEventItemProvider(this);
		}

		return commandEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ONOFFCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ONOFFCommandItemProvider onoffCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ONOFFCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createONOFFCommandAdapter() {
		if (onoffCommandItemProvider == null) {
			onoffCommandItemProvider = new ONOFFCommandItemProvider(this);
		}

		return onoffCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CustomCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomCommandItemProvider customCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CustomCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomCommandAdapter() {
		if (customCommandItemProvider == null) {
			customCommandItemProvider = new CustomCommandItemProvider(this);
		}

		return customCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.VisibilityCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisibilityCommandItemProvider visibilityCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.VisibilityCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisibilityCommandAdapter() {
		if (visibilityCommandItemProvider == null) {
			visibilityCommandItemProvider = new VisibilityCommandItemProvider(this);
		}

		return visibilityCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RefreshViewCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefreshViewCommandItemProvider refreshViewCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RefreshViewCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefreshViewCommandAdapter() {
		if (refreshViewCommandItemProvider == null) {
			refreshViewCommandItemProvider = new RefreshViewCommandItemProvider(this);
		}

		return refreshViewCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.JumpCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JumpCommandItemProvider jumpCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.JumpCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJumpCommandAdapter() {
		if (jumpCommandItemProvider == null) {
			jumpCommandItemProvider = new JumpCommandItemProvider(this);
		}

		return jumpCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ExecCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecCommandItemProvider execCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ExecCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecCommandAdapter() {
		if (execCommandItemProvider == null) {
			execCommandItemProvider = new ExecCommandItemProvider(this);
		}

		return execCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.EventHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventHandlerItemProvider eventHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.EventHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventHandlerAdapter() {
		if (eventHandlerItemProvider == null) {
			eventHandlerItemProvider = new EventHandlerItemProvider(this);
		}

		return eventHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.DialogPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DialogPanelItemProvider dialogPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.DialogPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDialogPanelAdapter() {
		if (dialogPanelItemProvider == null) {
			dialogPanelItemProvider = new DialogPanelItemProvider(this);
		}

		return dialogPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ShowDialogCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShowDialogCommandItemProvider showDialogCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ShowDialogCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShowDialogCommandAdapter() {
		if (showDialogCommandItemProvider == null) {
			showDialogCommandItemProvider = new ShowDialogCommandItemProvider(this);
		}

		return showDialogCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CommandOutcome} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandOutcomeItemProvider commandOutcomeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CommandOutcome}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandOutcomeAdapter() {
		if (commandOutcomeItemProvider == null) {
			commandOutcomeItemProvider = new CommandOutcomeItemProvider(this);
		}

		return commandOutcomeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Header} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderItemProvider headerItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Header}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderAdapter() {
		if (headerItemProvider == null) {
			headerItemProvider = new HeaderItemProvider(this);
		}

		return headerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.HeaderMetaAttr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderMetaAttrItemProvider headerMetaAttrItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.HeaderMetaAttr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderMetaAttrAdapter() {
		if (headerMetaAttrItemProvider == null) {
			headerMetaAttrItemProvider = new HeaderMetaAttrItemProvider(this);
		}

		return headerMetaAttrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Footer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FooterItemProvider footerItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Footer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFooterAdapter() {
		if (footerItemProvider == null) {
			footerItemProvider = new FooterItemProvider(this);
		}

		return footerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.AppWindow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppWindowItemProvider appWindowItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.AppWindow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppWindowAdapter() {
		if (appWindowItemProvider == null) {
			appWindowItemProvider = new AppWindowItemProvider(this);
		}

		return appWindowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.StaticLinks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticLinksItemProvider staticLinksItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.StaticLinks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticLinksAdapter() {
		if (staticLinksItemProvider == null) {
			staticLinksItemProvider = new StaticLinksItemProvider(this);
		}

		return staticLinksItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.SequenceCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceCommandItemProvider sequenceCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.SequenceCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceCommandAdapter() {
		if (sequenceCommandItemProvider == null) {
			sequenceCommandItemProvider = new SequenceCommandItemProvider(this);
		}

		return sequenceCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.JumpBackCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JumpBackCommandItemProvider jumpBackCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.JumpBackCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJumpBackCommandAdapter() {
		if (jumpBackCommandItemProvider == null) {
			jumpBackCommandItemProvider = new JumpBackCommandItemProvider(this);
		}

		return jumpBackCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ApplicationData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationDataItemProvider applicationDataItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ApplicationData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationDataAdapter() {
		if (applicationDataItemProvider == null) {
			applicationDataItemProvider = new ApplicationDataItemProvider(this);
		}

		return applicationDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.AppDataBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppDataBindingItemProvider appDataBindingItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.AppDataBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppDataBindingAdapter() {
		if (appDataBindingItemProvider == null) {
			appDataBindingItemProvider = new AppDataBindingItemProvider(this);
		}

		return appDataBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MultiDataWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiDataWidgetItemProvider multiDataWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MultiDataWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiDataWidgetAdapter() {
		if (multiDataWidgetItemProvider == null) {
			multiDataWidgetItemProvider = new MultiDataWidgetItemProvider(this);
		}

		return multiDataWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Typedefs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedefsItemProvider typedefsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Typedefs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedefsAdapter() {
		if (typedefsItemProvider == null) {
			typedefsItemProvider = new TypedefsItemProvider(this);
		}

		return typedefsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.SimpleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleTypeItemProvider simpleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.SimpleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleTypeAdapter() {
		if (simpleTypeItemProvider == null) {
			simpleTypeItemProvider = new SimpleTypeItemProvider(this);
		}

		return simpleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexTypeItemProvider complexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexTypeAdapter() {
		if (complexTypeItemProvider == null) {
			complexTypeItemProvider = new ComplexTypeItemProvider(this);
		}

		return complexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TypeAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeAnnotationItemProvider typeAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TypeAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAnnotationAdapter() {
		if (typeAnnotationItemProvider == null) {
			typeAnnotationItemProvider = new TypeAnnotationItemProvider(this);
		}

		return typeAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TypedArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedArrayItemProvider typedArrayItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TypedArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedArrayAdapter() {
		if (typedArrayItemProvider == null) {
			typedArrayItemProvider = new TypedArrayItemProvider(this);
		}

		return typedArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ApplicationDataDefs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationDataDefsItemProvider applicationDataDefsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ApplicationDataDefs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationDataDefsAdapter() {
		if (applicationDataDefsItemProvider == null) {
			applicationDataDefsItemProvider = new ApplicationDataDefsItemProvider(this);
		}

		return applicationDataDefsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TreeView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreeViewItemProvider treeViewItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TreeView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreeViewAdapter() {
		if (treeViewItemProvider == null) {
			treeViewItemProvider = new TreeViewItemProvider(this);
		}

		return treeViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PlainText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainTextItemProvider plainTextItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PlainText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainTextAdapter() {
		if (plainTextItemProvider == null) {
			plainTextItemProvider = new PlainTextItemProvider(this);
		}

		return plainTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MenuView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuViewItemProvider menuViewItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MenuView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuViewAdapter() {
		if (menuViewItemProvider == null) {
			menuViewItemProvider = new MenuViewItemProvider(this);
		}

		return menuViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GridPanelLayout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GridPanelLayoutItemProvider gridPanelLayoutItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GridPanelLayout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGridPanelLayoutAdapter() {
		if (gridPanelLayoutItemProvider == null) {
			gridPanelLayoutItemProvider = new GridPanelLayoutItemProvider(this);
		}

		return gridPanelLayoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.GridWidgetLayoutSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GridWidgetLayoutSpecItemProvider gridWidgetLayoutSpecItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.GridWidgetLayoutSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGridWidgetLayoutSpecAdapter() {
		if (gridWidgetLayoutSpecItemProvider == null) {
			gridWidgetLayoutSpecItemProvider = new GridWidgetLayoutSpecItemProvider(this);
		}

		return gridWidgetLayoutSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CommandPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandPanelItemProvider commandPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CommandPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandPanelAdapter() {
		if (commandPanelItemProvider == null) {
			commandPanelItemProvider = new CommandPanelItemProvider(this);
		}

		return commandPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MenuPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MenuPanelItemProvider menuPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MenuPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMenuPanelAdapter() {
		if (menuPanelItemProvider == null) {
			menuPanelItemProvider = new MenuPanelItemProvider(this);
		}

		return menuPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.HiddenValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HiddenValueItemProvider hiddenValueItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.HiddenValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHiddenValueAdapter() {
		if (hiddenValueItemProvider == null) {
			hiddenValueItemProvider = new HiddenValueItemProvider(this);
		}

		return hiddenValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UserDefinedWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDefinedWidgetItemProvider userDefinedWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UserDefinedWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDefinedWidgetAdapter() {
		if (userDefinedWidgetItemProvider == null) {
			userDefinedWidgetItemProvider = new UserDefinedWidgetItemProvider(this);
		}

		return userDefinedWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MultiPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiPanelItemProvider multiPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MultiPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiPanelAdapter() {
		if (multiPanelItemProvider == null) {
			multiPanelItemProvider = new MultiPanelItemProvider(this);
		}

		return multiPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActivateMultiPanelItemCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivateMultiPanelItemCommandItemProvider activateMultiPanelItemCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActivateMultiPanelItemCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivateMultiPanelItemCommandAdapter() {
		if (activateMultiPanelItemCommandItemProvider == null) {
			activateMultiPanelItemCommandItemProvider = new ActivateMultiPanelItemCommandItemProvider(this);
		}

		return activateMultiPanelItemCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UCBasedSecurityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UCBasedSecurityConstraintItemProvider ucBasedSecurityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UCBasedSecurityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUCBasedSecurityConstraintAdapter() {
		if (ucBasedSecurityConstraintItemProvider == null) {
			ucBasedSecurityConstraintItemProvider = new UCBasedSecurityConstraintItemProvider(this);
		}

		return ucBasedSecurityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.SecurityModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityModelItemProvider securityModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.SecurityModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityModelAdapter() {
		if (securityModelItemProvider == null) {
			securityModelItemProvider = new SecurityModelItemProvider(this);
		}

		return securityModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UseCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UseCaseItemProvider useCaseItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UseCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUseCaseAdapter() {
		if (useCaseItemProvider == null) {
			useCaseItemProvider = new UseCaseItemProvider(this);
		}

		return useCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActorBasedSecurityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorBasedSecurityConstraintItemProvider actorBasedSecurityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActorBasedSecurityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorBasedSecurityConstraintAdapter() {
		if (actorBasedSecurityConstraintItemProvider == null) {
			actorBasedSecurityConstraintItemProvider = new ActorBasedSecurityConstraintItemProvider(this);
		}

		return actorBasedSecurityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CustomSecurityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomSecurityConstraintItemProvider customSecurityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CustomSecurityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomSecurityConstraintAdapter() {
		if (customSecurityConstraintItemProvider == null) {
			customSecurityConstraintItemProvider = new CustomSecurityConstraintItemProvider(this);
		}

		return customSecurityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.OPAUTHSSO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OPAUTHSSOItemProvider opauthssoItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.OPAUTHSSO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOPAUTHSSOAdapter() {
		if (opauthssoItemProvider == null) {
			opauthssoItemProvider = new OPAUTHSSOItemProvider(this);
		}

		return opauthssoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.SSOBARTSSO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SSOBARTSSOItemProvider ssobartssoItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.SSOBARTSSO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSSOBARTSSOAdapter() {
		if (ssobartssoItemProvider == null) {
			ssobartssoItemProvider = new SSOBARTSSOItemProvider(this);
		}

		return ssobartssoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CustomAuthentication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomAuthenticationItemProvider customAuthenticationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CustomAuthentication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomAuthenticationAdapter() {
		if (customAuthenticationItemProvider == null) {
			customAuthenticationItemProvider = new CustomAuthenticationItemProvider(this);
		}

		return customAuthenticationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.StdMessagePanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StdMessagePanelItemProvider stdMessagePanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.StdMessagePanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStdMessagePanelAdapter() {
		if (stdMessagePanelItemProvider == null) {
			stdMessagePanelItemProvider = new StdMessagePanelItemProvider(this);
		}

		return stdMessagePanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.JumpExtCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JumpExtCommandItemProvider jumpExtCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.JumpExtCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJumpExtCommandAdapter() {
		if (jumpExtCommandItemProvider == null) {
			jumpExtCommandItemProvider = new JumpExtCommandItemProvider(this);
		}

		return jumpExtCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TargetPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetPlatformItemProvider targetPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TargetPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetPlatformAdapter() {
		if (targetPlatformItemProvider == null) {
			targetPlatformItemProvider = new TargetPlatformItemProvider(this);
		}

		return targetPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UserInfoPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserInfoPanelItemProvider userInfoPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UserInfoPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserInfoPanelAdapter() {
		if (userInfoPanelItemProvider == null) {
			userInfoPanelItemProvider = new UserInfoPanelItemProvider(this);
		}

		return userInfoPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UserDefinedPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDefinedPanelItemProvider userDefinedPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UserDefinedPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDefinedPanelAdapter() {
		if (userDefinedPanelItemProvider == null) {
			userDefinedPanelItemProvider = new UserDefinedPanelItemProvider(this);
		}

		return userDefinedPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.WizardPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WizardPanelItemProvider wizardPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.WizardPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWizardPanelAdapter() {
		if (wizardPanelItemProvider == null) {
			wizardPanelItemProvider = new WizardPanelItemProvider(this);
		}

		return wizardPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.AppModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppModuleItemProvider appModuleItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.AppModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppModuleAdapter() {
		if (appModuleItemProvider == null) {
			appModuleItemProvider = new AppModuleItemProvider(this);
		}

		return appModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TypeNamespace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeNamespaceItemProvider typeNamespaceItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TypeNamespace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeNamespaceAdapter() {
		if (typeNamespaceItemProvider == null) {
			typeNamespaceItemProvider = new TypeNamespaceItemProvider(this);
		}

		return typeNamespaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.AppDataGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppDataGroupItemProvider appDataGroupItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.AppDataGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppDataGroupAdapter() {
		if (appDataGroupItemProvider == null) {
			appDataGroupItemProvider = new AppDataGroupItemProvider(this);
		}

		return appDataGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MsgBoxPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MsgBoxPanelItemProvider msgBoxPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MsgBoxPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMsgBoxPanelAdapter() {
		if (msgBoxPanelItemProvider == null) {
			msgBoxPanelItemProvider = new MsgBoxPanelItemProvider(this);
		}

		return msgBoxPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.NOPCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NOPCommandItemProvider nopCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.NOPCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNOPCommandAdapter() {
		if (nopCommandItemProvider == null) {
			nopCommandItemProvider = new NOPCommandItemProvider(this);
		}

		return nopCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.WidgetsPanel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WidgetsPanelItemProvider widgetsPanelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.WidgetsPanel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWidgetsPanelAdapter() {
		if (widgetsPanelItemProvider == null) {
			widgetsPanelItemProvider = new WidgetsPanelItemProvider(this);
		}

		return widgetsPanelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ScreenState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScreenStateItemProvider screenStateItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ScreenState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScreenStateAdapter() {
		if (screenStateItemProvider == null) {
			screenStateItemProvider = new ScreenStateItemProvider(this);
		}

		return screenStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ScreenStates} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScreenStatesItemProvider screenStatesItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ScreenStates}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScreenStatesAdapter() {
		if (screenStatesItemProvider == null) {
			screenStatesItemProvider = new ScreenStatesItemProvider(this);
		}

		return screenStatesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ScreenStateCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScreenStateCommandItemProvider screenStateCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ScreenStateCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScreenStateCommandAdapter() {
		if (screenStateCommandItemProvider == null) {
			screenStateCommandItemProvider = new ScreenStateCommandItemProvider(this);
		}

		return screenStateCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ShibbolethSSO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShibbolethSSOItemProvider shibbolethSSOItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ShibbolethSSO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShibbolethSSOAdapter() {
		if (shibbolethSSOItemProvider == null) {
			shibbolethSSOItemProvider = new ShibbolethSSOItemProvider(this);
		}

		return shibbolethSSOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RoleBasedSecurityConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleBasedSecurityConstraintItemProvider roleBasedSecurityConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RoleBasedSecurityConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleBasedSecurityConstraintAdapter() {
		if (roleBasedSecurityConstraintItemProvider == null) {
			roleBasedSecurityConstraintItemProvider = new RoleBasedSecurityConstraintItemProvider(this);
		}

		return roleBasedSecurityConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.FileUpload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileUploadItemProvider fileUploadItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.FileUpload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileUploadAdapter() {
		if (fileUploadItemProvider == null) {
			fileUploadItemProvider = new FileUploadItemProvider(this);
		}

		return fileUploadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TabSwitcher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TabSwitcherItemProvider tabSwitcherItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TabSwitcher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTabSwitcherAdapter() {
		if (tabSwitcherItemProvider == null) {
			tabSwitcherItemProvider = new TabSwitcherItemProvider(this);
		}

		return tabSwitcherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PanelDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PanelDefItemProvider panelDefItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PanelDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPanelDefAdapter() {
		if (panelDefItemProvider == null) {
			panelDefItemProvider = new PanelDefItemProvider(this);
		}

		return panelDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.AppDataMappingParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppDataMappingParamItemProvider appDataMappingParamItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.AppDataMappingParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppDataMappingParamAdapter() {
		if (appDataMappingParamItemProvider == null) {
			appDataMappingParamItemProvider = new AppDataMappingParamItemProvider(this);
		}

		return appDataMappingParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TypeDefMappingParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDefMappingParamItemProvider typeDefMappingParamItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TypeDefMappingParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDefMappingParamAdapter() {
		if (typeDefMappingParamItemProvider == null) {
			typeDefMappingParamItemProvider = new TypeDefMappingParamItemProvider(this);
		}

		return typeDefMappingParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UseCaseMappingParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UseCaseMappingParamItemProvider useCaseMappingParamItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UseCaseMappingParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUseCaseMappingParamAdapter() {
		if (useCaseMappingParamItemProvider == null) {
			useCaseMappingParamItemProvider = new UseCaseMappingParamItemProvider(this);
		}

		return useCaseMappingParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RoleMappingParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleMappingParamItemProvider roleMappingParamItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RoleMappingParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleMappingParamAdapter() {
		if (roleMappingParamItemProvider == null) {
			roleMappingParamItemProvider = new RoleMappingParamItemProvider(this);
		}

		return roleMappingParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActorMappingParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorMappingParamItemProvider actorMappingParamItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActorMappingParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorMappingParamAdapter() {
		if (actorMappingParamItemProvider == null) {
			actorMappingParamItemProvider = new ActorMappingParamItemProvider(this);
		}

		return actorMappingParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PanelDefUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PanelDefUseItemProvider panelDefUseItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PanelDefUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPanelDefUseAdapter() {
		if (panelDefUseItemProvider == null) {
			panelDefUseItemProvider = new PanelDefUseItemProvider(this);
		}

		return panelDefUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.AppDataMappingPDefVal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppDataMappingPDefValItemProvider appDataMappingPDefValItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.AppDataMappingPDefVal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppDataMappingPDefValAdapter() {
		if (appDataMappingPDefValItemProvider == null) {
			appDataMappingPDefValItemProvider = new AppDataMappingPDefValItemProvider(this);
		}

		return appDataMappingPDefValItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TypeDefMappingPDefVal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDefMappingPDefValItemProvider typeDefMappingPDefValItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TypeDefMappingPDefVal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDefMappingPDefValAdapter() {
		if (typeDefMappingPDefValItemProvider == null) {
			typeDefMappingPDefValItemProvider = new TypeDefMappingPDefValItemProvider(this);
		}

		return typeDefMappingPDefValItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.UCMappingPDefVal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UCMappingPDefValItemProvider ucMappingPDefValItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.UCMappingPDefVal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUCMappingPDefValAdapter() {
		if (ucMappingPDefValItemProvider == null) {
			ucMappingPDefValItemProvider = new UCMappingPDefValItemProvider(this);
		}

		return ucMappingPDefValItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RoleMappingPDefVal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleMappingPDefValItemProvider roleMappingPDefValItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RoleMappingPDefVal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleMappingPDefValAdapter() {
		if (roleMappingPDefValItemProvider == null) {
			roleMappingPDefValItemProvider = new RoleMappingPDefValItemProvider(this);
		}

		return roleMappingPDefValItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActorMappingPDefVal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorMappingPDefValItemProvider actorMappingPDefValItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActorMappingPDefVal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorMappingPDefValAdapter() {
		if (actorMappingPDefValItemProvider == null) {
			actorMappingPDefValItemProvider = new ActorMappingPDefValItemProvider(this);
		}

		return actorMappingPDefValItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PDefUseConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PDefUseConfigItemProvider pDefUseConfigItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PDefUseConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPDefUseConfigAdapter() {
		if (pDefUseConfigItemProvider == null) {
			pDefUseConfigItemProvider = new PDefUseConfigItemProvider(this);
		}

		return pDefUseConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActivationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivationModelItemProvider activationModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActivationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivationModelAdapter() {
		if (activationModelItemProvider == null) {
			activationModelItemProvider = new ActivationModelItemProvider(this);
		}

		return activationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ActivationParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivationParamItemProvider activationParamItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ActivationParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivationParamAdapter() {
		if (activationParamItemProvider == null) {
			activationParamItemProvider = new ActivationParamItemProvider(this);
		}

		return activationParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.BeginEditCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeginEditCommandItemProvider beginEditCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.BeginEditCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeginEditCommandAdapter() {
		if (beginEditCommandItemProvider == null) {
			beginEditCommandItemProvider = new BeginEditCommandItemProvider(this);
		}

		return beginEditCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.EndEditCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndEditCommandItemProvider endEditCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.EndEditCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndEditCommandAdapter() {
		if (endEditCommandItemProvider == null) {
			endEditCommandItemProvider = new EndEditCommandItemProvider(this);
		}

		return endEditCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ChkEditStatusCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChkEditStatusCommandItemProvider chkEditStatusCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ChkEditStatusCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChkEditStatusCommandAdapter() {
		if (chkEditStatusCommandItemProvider == null) {
			chkEditStatusCommandItemProvider = new ChkEditStatusCommandItemProvider(this);
		}

		return chkEditStatusCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PanelDefState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PanelDefStateItemProvider panelDefStateItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PanelDefState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPanelDefStateAdapter() {
		if (panelDefStateItemProvider == null) {
			panelDefStateItemProvider = new PanelDefStateItemProvider(this);
		}

		return panelDefStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PDefStateCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PDefStateCommandItemProvider pDefStateCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PDefStateCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPDefStateCommandAdapter() {
		if (pDefStateCommandItemProvider == null) {
			pDefStateCommandItemProvider = new PDefStateCommandItemProvider(this);
		}

		return pDefStateCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PanelDefStates} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PanelDefStatesItemProvider panelDefStatesItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PanelDefStates}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPanelDefStatesAdapter() {
		if (panelDefStatesItemProvider == null) {
			panelDefStatesItemProvider = new PanelDefStatesItemProvider(this);
		}

		return panelDefStatesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TableCustomizationParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableCustomizationParamItemProvider tableCustomizationParamItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TableCustomizationParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableCustomizationParamAdapter() {
		if (tableCustomizationParamItemProvider == null) {
			tableCustomizationParamItemProvider = new TableCustomizationParamItemProvider(this);
		}

		return tableCustomizationParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ExtraColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtraColumnItemProvider extraColumnItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ExtraColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtraColumnAdapter() {
		if (extraColumnItemProvider == null) {
			extraColumnItemProvider = new ExtraColumnItemProvider(this);
		}

		return extraColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.TableCustomizationPDefVal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableCustomizationPDefValItemProvider tableCustomizationPDefValItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.TableCustomizationPDefVal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableCustomizationPDefValAdapter() {
		if (tableCustomizationPDefValItemProvider == null) {
			tableCustomizationPDefValItemProvider = new TableCustomizationPDefValItemProvider(this);
		}

		return tableCustomizationPDefValItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CustomCartridge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomCartridgeItemProvider customCartridgeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CustomCartridge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomCartridgeAdapter() {
		if (customCartridgeItemProvider == null) {
			customCartridgeItemProvider = new CustomCartridgeItemProvider(this);
		}

		return customCartridgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.CustomTemplate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTemplateItemProvider customTemplateItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.CustomTemplate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTemplateAdapter() {
		if (customTemplateItemProvider == null) {
			customTemplateItemProvider = new CustomTemplateItemProvider(this);
		}

		return customTemplateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ModelSlotDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelSlotDefItemProvider modelSlotDefItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ModelSlotDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelSlotDefAdapter() {
		if (modelSlotDefItemProvider == null) {
			modelSlotDefItemProvider = new ModelSlotDefItemProvider(this);
		}

		return modelSlotDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ModelSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelSlotItemProvider modelSlotItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ModelSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelSlotAdapter() {
		if (modelSlotItemProvider == null) {
			modelSlotItemProvider = new ModelSlotItemProvider(this);
		}

		return modelSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.ClearAppdataCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClearAppdataCommandItemProvider clearAppdataCommandItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.ClearAppdataCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClearAppdataCommandAdapter() {
		if (clearAppdataCommandItemProvider == null) {
			clearAppdataCommandItemProvider = new ClearAppdataCommandItemProvider(this);
		}

		return clearAppdataCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MapView} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapViewItemProvider mapViewItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MapView}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapViewAdapter() {
		if (mapViewItemProvider == null) {
			mapViewItemProvider = new MapViewItemProvider(this);
		}

		return mapViewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Point} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointItemProvider pointItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Point}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointAdapter() {
		if (pointItemProvider == null) {
			pointItemProvider = new PointItemProvider(this);
		}

		return pointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MapEnvelope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapEnvelopeItemProvider mapEnvelopeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MapEnvelope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapEnvelopeAdapter() {
		if (mapEnvelopeItemProvider == null) {
			mapEnvelopeItemProvider = new MapEnvelopeItemProvider(this);
		}

		return mapEnvelopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PortalProfile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortalProfileItemProvider portalProfileItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PortalProfile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortalProfileAdapter() {
		if (portalProfileItemProvider == null) {
			portalProfileItemProvider = new PortalProfileItemProvider(this);
		}

		return portalProfileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.StdWebResourceModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StdWebResourceModuleItemProvider stdWebResourceModuleItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.StdWebResourceModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStdWebResourceModuleAdapter() {
		if (stdWebResourceModuleItemProvider == null) {
			stdWebResourceModuleItemProvider = new StdWebResourceModuleItemProvider(this);
		}

		return stdWebResourceModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RepartArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepartArtifactItemProvider repartArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RepartArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepartArtifactAdapter() {
		if (repartArtifactItemProvider == null) {
			repartArtifactItemProvider = new RepartArtifactItemProvider(this);
		}

		return repartArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.RepartModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepartModuleItemProvider repartModuleItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.RepartModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepartModuleAdapter() {
		if (repartModuleItemProvider == null) {
			repartModuleItemProvider = new RepartModuleItemProvider(this);
		}

		return repartModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.Breadcrumb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BreadcrumbItemProvider breadcrumbItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.Breadcrumb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBreadcrumbAdapter() {
		if (breadcrumbItemProvider == null) {
			breadcrumbItemProvider = new BreadcrumbItemProvider(this);
		}

		return breadcrumbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.MapViewGadgets} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapViewGadgetsItemProvider mapViewGadgetsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.MapViewGadgets}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapViewGadgetsAdapter() {
		if (mapViewGadgetsItemProvider == null) {
			mapViewGadgetsItemProvider = new MapViewGadgetsItemProvider(this);
		}

		return mapViewGadgetsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.guigen.PortalExposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortalExpositionItemProvider portalExpositionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.guigen.PortalExposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortalExpositionAdapter() {
		if (portalExpositionItemProvider == null) {
			portalExpositionItemProvider = new PortalExpositionItemProvider(this);
		}

		return portalExpositionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (applicationAreaItemProvider != null) applicationAreaItemProvider.dispose();
		if (menubarItemProvider != null) menubarItemProvider.dispose();
		if (statusbarItemProvider != null) statusbarItemProvider.dispose();
		if (titlebarItemProvider != null) titlebarItemProvider.dispose();
		if (contentPanelItemProvider != null) contentPanelItemProvider.dispose();
		if (formPanelItemProvider != null) formPanelItemProvider.dispose();
		if (multiPanelItemProvider != null) multiPanelItemProvider.dispose();
		if (tabSetPanelItemProvider != null) tabSetPanelItemProvider.dispose();
		if (commandWidgetItemProvider != null) commandWidgetItemProvider.dispose();
		if (dataWidgetItemProvider != null) dataWidgetItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (textFieldItemProvider != null) textFieldItemProvider.dispose();
		if (textAreaItemProvider != null) textAreaItemProvider.dispose();
		if (calendarItemProvider != null) calendarItemProvider.dispose();
		if (comboBoxItemProvider != null) comboBoxItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (checkBoxItemProvider != null) checkBoxItemProvider.dispose();
		if (guiModelItemProvider != null) guiModelItemProvider.dispose();
		if (guiStructureItemProvider != null) guiStructureItemProvider.dispose();
		if (guiBehaviorsItemProvider != null) guiBehaviorsItemProvider.dispose();
		if (radioButtonsItemProvider != null) radioButtonsItemProvider.dispose();
		if (radioButtonItemProvider != null) radioButtonItemProvider.dispose();
		if (resetButtonItemProvider != null) resetButtonItemProvider.dispose();
		if (confirmButtonItemProvider != null) confirmButtonItemProvider.dispose();
		if (horizontalFlowPanelLayoutItemProvider != null) horizontalFlowPanelLayoutItemProvider.dispose();
		if (verticalFlowPanelLayoutItemProvider != null) verticalFlowPanelLayoutItemProvider.dispose();
		if (udlrcPanelLayoutItemProvider != null) udlrcPanelLayoutItemProvider.dispose();
		if (udlrcWidgetLayoutSpecItemProvider != null) udlrcWidgetLayoutSpecItemProvider.dispose();
		if (imageItemProvider != null) imageItemProvider.dispose();
		if (menuItemProvider != null) menuItemProvider.dispose();
		if (menuItemItemProvider != null) menuItemItemProvider.dispose();
		if (disabledComponentSetItemProvider != null) disabledComponentSetItemProvider.dispose();
		if (columnModelItemProvider != null) columnModelItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (commandEventItemProvider != null) commandEventItemProvider.dispose();
		if (onoffCommandItemProvider != null) onoffCommandItemProvider.dispose();
		if (customCommandItemProvider != null) customCommandItemProvider.dispose();
		if (visibilityCommandItemProvider != null) visibilityCommandItemProvider.dispose();
		if (refreshViewCommandItemProvider != null) refreshViewCommandItemProvider.dispose();
		if (jumpCommandItemProvider != null) jumpCommandItemProvider.dispose();
		if (execCommandItemProvider != null) execCommandItemProvider.dispose();
		if (eventHandlerItemProvider != null) eventHandlerItemProvider.dispose();
		if (dialogPanelItemProvider != null) dialogPanelItemProvider.dispose();
		if (showDialogCommandItemProvider != null) showDialogCommandItemProvider.dispose();
		if (commandOutcomeItemProvider != null) commandOutcomeItemProvider.dispose();
		if (headerItemProvider != null) headerItemProvider.dispose();
		if (headerMetaAttrItemProvider != null) headerMetaAttrItemProvider.dispose();
		if (footerItemProvider != null) footerItemProvider.dispose();
		if (appWindowItemProvider != null) appWindowItemProvider.dispose();
		if (staticLinksItemProvider != null) staticLinksItemProvider.dispose();
		if (sequenceCommandItemProvider != null) sequenceCommandItemProvider.dispose();
		if (jumpBackCommandItemProvider != null) jumpBackCommandItemProvider.dispose();
		if (applicationDataItemProvider != null) applicationDataItemProvider.dispose();
		if (appDataBindingItemProvider != null) appDataBindingItemProvider.dispose();
		if (multiDataWidgetItemProvider != null) multiDataWidgetItemProvider.dispose();
		if (typedefsItemProvider != null) typedefsItemProvider.dispose();
		if (simpleTypeItemProvider != null) simpleTypeItemProvider.dispose();
		if (complexTypeItemProvider != null) complexTypeItemProvider.dispose();
		if (typeAnnotationItemProvider != null) typeAnnotationItemProvider.dispose();
		if (typedArrayItemProvider != null) typedArrayItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (applicationDataDefsItemProvider != null) applicationDataDefsItemProvider.dispose();
		if (treeViewItemProvider != null) treeViewItemProvider.dispose();
		if (plainTextItemProvider != null) plainTextItemProvider.dispose();
		if (menuViewItemProvider != null) menuViewItemProvider.dispose();
		if (gridPanelLayoutItemProvider != null) gridPanelLayoutItemProvider.dispose();
		if (gridWidgetLayoutSpecItemProvider != null) gridWidgetLayoutSpecItemProvider.dispose();
		if (commandPanelItemProvider != null) commandPanelItemProvider.dispose();
		if (menuPanelItemProvider != null) menuPanelItemProvider.dispose();
		if (hiddenValueItemProvider != null) hiddenValueItemProvider.dispose();
		if (userDefinedWidgetItemProvider != null) userDefinedWidgetItemProvider.dispose();
		if (activateMultiPanelItemCommandItemProvider != null) activateMultiPanelItemCommandItemProvider.dispose();
		if (ucBasedSecurityConstraintItemProvider != null) ucBasedSecurityConstraintItemProvider.dispose();
		if (securityModelItemProvider != null) securityModelItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (useCaseItemProvider != null) useCaseItemProvider.dispose();
		if (actorBasedSecurityConstraintItemProvider != null) actorBasedSecurityConstraintItemProvider.dispose();
		if (customSecurityConstraintItemProvider != null) customSecurityConstraintItemProvider.dispose();
		if (opauthssoItemProvider != null) opauthssoItemProvider.dispose();
		if (ssobartssoItemProvider != null) ssobartssoItemProvider.dispose();
		if (customAuthenticationItemProvider != null) customAuthenticationItemProvider.dispose();
		if (stdMessagePanelItemProvider != null) stdMessagePanelItemProvider.dispose();
		if (jumpExtCommandItemProvider != null) jumpExtCommandItemProvider.dispose();
		if (targetPlatformItemProvider != null) targetPlatformItemProvider.dispose();
		if (userInfoPanelItemProvider != null) userInfoPanelItemProvider.dispose();
		if (userDefinedPanelItemProvider != null) userDefinedPanelItemProvider.dispose();
		if (wizardPanelItemProvider != null) wizardPanelItemProvider.dispose();
		if (appModuleItemProvider != null) appModuleItemProvider.dispose();
		if (typeNamespaceItemProvider != null) typeNamespaceItemProvider.dispose();
		if (appDataGroupItemProvider != null) appDataGroupItemProvider.dispose();
		if (msgBoxPanelItemProvider != null) msgBoxPanelItemProvider.dispose();
		if (nopCommandItemProvider != null) nopCommandItemProvider.dispose();
		if (widgetsPanelItemProvider != null) widgetsPanelItemProvider.dispose();
		if (screenStateItemProvider != null) screenStateItemProvider.dispose();
		if (screenStatesItemProvider != null) screenStatesItemProvider.dispose();
		if (screenStateCommandItemProvider != null) screenStateCommandItemProvider.dispose();
		if (shibbolethSSOItemProvider != null) shibbolethSSOItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (roleBasedSecurityConstraintItemProvider != null) roleBasedSecurityConstraintItemProvider.dispose();
		if (fileUploadItemProvider != null) fileUploadItemProvider.dispose();
		if (tabSwitcherItemProvider != null) tabSwitcherItemProvider.dispose();
		if (panelDefItemProvider != null) panelDefItemProvider.dispose();
		if (appDataMappingParamItemProvider != null) appDataMappingParamItemProvider.dispose();
		if (typeDefMappingParamItemProvider != null) typeDefMappingParamItemProvider.dispose();
		if (useCaseMappingParamItemProvider != null) useCaseMappingParamItemProvider.dispose();
		if (roleMappingParamItemProvider != null) roleMappingParamItemProvider.dispose();
		if (actorMappingParamItemProvider != null) actorMappingParamItemProvider.dispose();
		if (panelDefUseItemProvider != null) panelDefUseItemProvider.dispose();
		if (appDataMappingPDefValItemProvider != null) appDataMappingPDefValItemProvider.dispose();
		if (typeDefMappingPDefValItemProvider != null) typeDefMappingPDefValItemProvider.dispose();
		if (ucMappingPDefValItemProvider != null) ucMappingPDefValItemProvider.dispose();
		if (roleMappingPDefValItemProvider != null) roleMappingPDefValItemProvider.dispose();
		if (actorMappingPDefValItemProvider != null) actorMappingPDefValItemProvider.dispose();
		if (pDefUseConfigItemProvider != null) pDefUseConfigItemProvider.dispose();
		if (activationModelItemProvider != null) activationModelItemProvider.dispose();
		if (activationParamItemProvider != null) activationParamItemProvider.dispose();
		if (beginEditCommandItemProvider != null) beginEditCommandItemProvider.dispose();
		if (endEditCommandItemProvider != null) endEditCommandItemProvider.dispose();
		if (chkEditStatusCommandItemProvider != null) chkEditStatusCommandItemProvider.dispose();
		if (panelDefStateItemProvider != null) panelDefStateItemProvider.dispose();
		if (pDefStateCommandItemProvider != null) pDefStateCommandItemProvider.dispose();
		if (panelDefStatesItemProvider != null) panelDefStatesItemProvider.dispose();
		if (tableCustomizationParamItemProvider != null) tableCustomizationParamItemProvider.dispose();
		if (extraColumnItemProvider != null) extraColumnItemProvider.dispose();
		if (tableCustomizationPDefValItemProvider != null) tableCustomizationPDefValItemProvider.dispose();
		if (customCartridgeItemProvider != null) customCartridgeItemProvider.dispose();
		if (customTemplateItemProvider != null) customTemplateItemProvider.dispose();
		if (modelSlotDefItemProvider != null) modelSlotDefItemProvider.dispose();
		if (modelSlotItemProvider != null) modelSlotItemProvider.dispose();
		if (clearAppdataCommandItemProvider != null) clearAppdataCommandItemProvider.dispose();
		if (mapViewItemProvider != null) mapViewItemProvider.dispose();
		if (pointItemProvider != null) pointItemProvider.dispose();
		if (mapEnvelopeItemProvider != null) mapEnvelopeItemProvider.dispose();
		if (portalProfileItemProvider != null) portalProfileItemProvider.dispose();
		if (stdWebResourceModuleItemProvider != null) stdWebResourceModuleItemProvider.dispose();
		if (repartArtifactItemProvider != null) repartArtifactItemProvider.dispose();
		if (repartModuleItemProvider != null) repartModuleItemProvider.dispose();
		if (breadcrumbItemProvider != null) breadcrumbItemProvider.dispose();
		if (mapViewGadgetsItemProvider != null) mapViewGadgetsItemProvider.dispose();
		if (portalExpositionItemProvider != null) portalExpositionItemProvider.dispose();
	}

}
