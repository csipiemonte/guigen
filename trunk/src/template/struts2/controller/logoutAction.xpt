«IMPORT guigen»

«IMPORT template::struts2::actionImplJavaFiles»
«IMPORT template::struts2::security»
«IMPORT template::struts2::typeConversion»
«IMPORT template::struts2::eventHandlers»
«EXTENSION template::GenericExtensions»
«EXTENSION template::struts2::Struts2Extensions»

«REM»
==========================================================================================================================
STRUTS2 ACTIONS FILES
===========================================================================================================================
«ENDREM»


«REM»Genera la Action di Struts che gestisce l'azione di Logout«ENDREM»
«DEFINE struts2LogoutJavaFile(boolean skip_component_dir_creation) FOR GUIModel»
«FILE getStrutsLogoutJavaFile(this, skip_component_dir_creation)»package «getPresentationJavaPackage(this)»;

import java.util.*;

import «getDTOBaseJavaPackage(this)».*;

/**
 * «getStrutsLogoutClassName(this)» Action Class.
 *
 * @author GuiGen
 */
public class «getStrutsLogoutClassName(this)» extends «getStrutsBaseActionClassName(this)» {

    
    /**
	 * nessuna classe model associata
	 */
	public Class modelClass() {
		return null;
	}
    
    
	/**
	 * Mostra la pagina di conferma del logout
	 * @return SSO_LOGOUT.
	 */    
    public String confirmLogout() throws Exception {
    	return "confirmLogout";
    }
    
    
	/**
	 *
	 * @return SSO_LOGOUT.
	 */
	public String ssoLogout() throws Exception {
		
		log.debug("[«getStrutsLogoutClassName(this)»::ssoLogout] START");
		
		invalidateLocalSession();
		log.debug("[«getStrutsLogoutClassName(this)»::ssoLogout] START");
		return "SSO_LOGOUT";
	}

	
	/**
	 *
	 * @return LOCAL_LOGOUT.
	 */
	public String localLogout() throws Exception {
		
		log.debug("[«getStrutsLogoutClassName(this)»::localLogout] START");
		invalidateLocalSession();
		log.debug("[«getStrutsLogoutClassName(this)»::localLogout] START");
		return "LOCAL_LOGOUT";
	}

	«IF getActualSecurityModel(this)!=null && getActualSecurityModel(this).autenticationMethod!=null-»
		«EXPAND invalidateLocalSession(this) FOR getActualSecurityModel(this).autenticationMethod-»
	«ELSE-»
		«EXPAND invalidateLocalSessionNoAuth FOR this-»
	«ENDIF-»
	
	/**
	 *	Metodo per la rimozione dalla sessione degli application data a scope
	 *  SAME_PAGE. 
	 */
	public void clearPageScopedAppData() {
		//NOP
	}

}
«ENDFILE»
«ENDDEFINE»

«DEFINE invalidateLocalSession(GUIModel model) FOR AutenticationMethod»
«ERROR ""+this+ "non supportato"»
«ENDDEFINE»

«DEFINE invalidateLocalSessionNoAuth FOR GUIModel»
	protected void invalidateLocalSession(){
		/// NOP
	}
«ENDDEFINE»


«DEFINE invalidateLocalSession(GUIModel model) FOR OPAUTHSSO»
	/**
	 * Invalida gli attributi di autenticazione contenuti in sessione
	 */
	protected void invalidateLocalSession(){
		session.remove(«getIrideIdAdapterFilterFQN(model)».AUTH_ID_MARKER);
		session.remove(«getIrideIdAdapterFilterFQN(model)».IRIDE_ID_SESSIONATTR);
	}
«ENDDEFINE»

«DEFINE invalidateLocalSession(GUIModel model) FOR SSOBARTSSO»
	/**
	 * Invalida gli attributi di autenticazione contenuti in sessione
	 */
	protected void invalidateLocalSession(){
		session.remove(«getIrideIdAdapterFilterFQN(model)».AUTH_ID_MARKER);
		session.remove(«getIrideIdAdapterFilterFQN(model)».IRIDE_ID_SESSIONATTR);
	}
«ENDDEFINE»

«DEFINE invalidateLocalSession(GUIModel model) FOR ShibbolethSSO»
	/**
	 * Invalida gli attributi di autenticazione contenuti in sessione
	 */
	protected void invalidateLocalSession(){
		session.remove(«getIrideIdAdapterFilterFQN(model)».IRIDE_ID_SESSIONATTR);
	}
«ENDDEFINE»
